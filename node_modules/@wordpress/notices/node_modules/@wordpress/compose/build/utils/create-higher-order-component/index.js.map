{"version":3,"sources":["@wordpress/compose/src/utils/create-higher-order-component/index.ts"],"names":["createHigherOrderComponent","mapComponent","modifierName","Inner","Outer","displayName","name"],"mappings":";;;;;;;AAGA;;AAHA;AACA;AACA;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,0BAAT,CACCC,YADD,EAECC,YAFD,EAGoD;AACnD,SAASC,KAAF,IAAa;AACnB,UAAMC,KAAK,GAAGH,YAAY,CAAEE,KAAF,CAA1B;AACA,UAAME,WAAW,GAAGF,KAAK,CAACE,WAAN,IAAqBF,KAAK,CAACG,IAA3B,IAAmC,WAAvD;AACAF,IAAAA,KAAK,CAACC,WAAN,GAAqB,GAAG,wBACvB,uBAAWH,YAAX,CADuB,CAErB,IAAIG,WAAa,GAFpB;AAGA,WAAOD,KAAP;AACA,GAPD;AAQA;;eACcJ,0B","sourcesContent":["/**\n * External dependencies\n */\nimport { camelCase, upperFirst } from 'lodash';\n// eslint-disable-next-line no-restricted-imports\nimport type { ComponentType } from 'react';\n\n/**\n * Higher order components can cause props to be obviated. For example a HOC that\n * injects i18n props will obviate the need for the i18n props to be passed to the component.\n *\n * If a HOC does not obviate the need for any specific props then we default to `{}` which\n * essentially subtracts 0 from the original props of the passed in component. An example\n * of this is the `pure` HOC which does not change the API surface of the component but\n * simply modifies the internals.\n */\nexport type HigherOrderComponent< TInnerProps, TOuterProps > = (\n\tInner: ComponentType< TInnerProps >\n) => ComponentType< TOuterProps >;\n\nexport type SimpleHigherOrderComponent = < TProps >(\n\tInner: ComponentType< TProps >\n) => ComponentType< TProps >;\n\nexport type PropInjectingHigherOrderComponent< TRemovedProps > = <\n\tTProps extends TRemovedProps\n>(\n\tInner: ComponentType< TProps >\n) => ComponentType< Omit< TProps, keyof TRemovedProps > >;\n\n/**\n * Given a function mapping a component to an enhanced component and modifier\n * name, returns the enhanced component augmented with a generated displayName.\n *\n * @param  mapComponentToEnhancedComponent Function mapping component to enhanced component.\n * @param  modifierName                    Seed name from which to generated display name.\n *\n * @return Component class with generated display name assigned.\n */\n\nfunction createHigherOrderComponent< TInnerProps, TOuterProps >(\n\tmapComponent: HigherOrderComponent< TInnerProps, TOuterProps >,\n\tmodifierName: string\n): HigherOrderComponent< TInnerProps, TOuterProps > {\n\treturn ( Inner ) => {\n\t\tconst Outer = mapComponent( Inner );\n\t\tconst displayName = Inner.displayName || Inner.name || 'Component';\n\t\tOuter.displayName = `${ upperFirst(\n\t\t\tcamelCase( modifierName )\n\t\t) }(${ displayName })`;\n\t\treturn Outer;\n\t};\n}\nexport default createHigherOrderComponent;\n"]}