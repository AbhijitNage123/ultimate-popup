{"version":3,"sources":["@wordpress/compose/src/hooks/use-async-list/index.ts"],"names":["getFirstItemsPresentInState","list","state","firstItems","i","length","item","includes","push","useAsyncList","current","setCurrent","asyncQueue","append","index","add","reset"],"mappings":";;;;;;;AAGA;;AACA;;AAJA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,2BAAT,CAA2CC,IAA3C,EAAsDC,KAAtD,EAAwE;AACvE,QAAMC,UAAU,GAAG,EAAnB;;AAEA,OAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGH,IAAI,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAwC;AACvC,UAAME,IAAI,GAAGL,IAAI,CAAEG,CAAF,CAAjB;;AACA,QAAK,CAAEF,KAAK,CAACK,QAAN,CAAgBD,IAAhB,CAAP,EAAgC;AAC/B;AACA;;AAEDH,IAAAA,UAAU,CAACK,IAAX,CAAiBF,IAAjB;AACA;;AAED,SAAOH,UAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,YAAT,CAA4BR,IAA5B,EAA6C;AAC5C,QAAM,CAAES,OAAF,EAAWC,UAAX,IAA0B,uBAAU,EAAV,CAAhC;AAEA,0BAAW,MAAM;AAChB;AACA,UAAMR,UAAU,GAAGH,2BAA2B,CAAEC,IAAF,EAAQS,OAAR,CAA9C;AACAC,IAAAA,UAAU,CAAER,UAAF,CAAV;AAEA,UAAMS,UAAU,GAAG,iCAAnB;;AACA,UAAMC,MAAM,GAAKC,KAAF,IAAqB,MAAM;AACzC,UAAKb,IAAI,CAACI,MAAL,IAAeS,KAApB,EAA4B;AAC3B;AACA;;AACDH,MAAAA,UAAU,CAAIT,KAAF,IAAa,CAAE,GAAGA,KAAL,EAAYD,IAAI,CAAEa,KAAF,CAAhB,CAAf,CAAV;AACAF,MAAAA,UAAU,CAACG,GAAX,CAAgB,EAAhB,EAAoBF,MAAM,CAAEC,KAAK,GAAG,CAAV,CAA1B;AACA,KAND;;AAOAF,IAAAA,UAAU,CAACG,GAAX,CAAgB,EAAhB,EAAoBF,MAAM,CAAEV,UAAU,CAACE,MAAb,CAA1B;AAEA,WAAO,MAAMO,UAAU,CAACI,KAAX,EAAb;AACA,GAhBD,EAgBG,CAAEf,IAAF,CAhBH;AAkBA,SAAOS,OAAP;AACA;;eAEcD,Y","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useEffect, useState } from '@wordpress/element';\nimport { createQueue } from '@wordpress/priority-queue';\n\n/**\n * Returns the first items from list that are present on state.\n *\n * @param  list  New array.\n * @param  state Current state.\n * @return First items present iin state.\n */\nfunction getFirstItemsPresentInState< T >( list: T[], state: T[] ): T[] {\n\tconst firstItems = [];\n\n\tfor ( let i = 0; i < list.length; i++ ) {\n\t\tconst item = list[ i ];\n\t\tif ( ! state.includes( item ) ) {\n\t\t\tbreak;\n\t\t}\n\n\t\tfirstItems.push( item );\n\t}\n\n\treturn firstItems;\n}\n\n/**\n * React hook returns an array which items get asynchronously appended from a source array.\n * This behavior is useful if we want to render a list of items asynchronously for performance reasons.\n *\n * @param  list Source array.\n * @return Async array.\n */\nfunction useAsyncList< T >( list: T[] ): T[] {\n\tconst [ current, setCurrent ] = useState( [] as T[] );\n\n\tuseEffect( () => {\n\t\t// On reset, we keep the first items that were previously rendered.\n\t\tconst firstItems = getFirstItemsPresentInState( list, current );\n\t\tsetCurrent( firstItems );\n\n\t\tconst asyncQueue = createQueue();\n\t\tconst append = ( index: number ) => () => {\n\t\t\tif ( list.length <= index ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetCurrent( ( state ) => [ ...state, list[ index ] ] );\n\t\t\tasyncQueue.add( {}, append( index + 1 ) );\n\t\t};\n\t\tasyncQueue.add( {}, append( firstItems.length ) );\n\n\t\treturn () => asyncQueue.reset();\n\t}, [ list ] );\n\n\treturn current;\n}\n\nexport default useAsyncList;\n"]}