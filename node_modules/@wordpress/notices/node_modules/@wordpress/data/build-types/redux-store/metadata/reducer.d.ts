import EquivalentKeyMap from 'equivalent-key-map';
declare type Action = ReturnType<typeof import('./actions').startResolution> | ReturnType<typeof import('./actions').finishResolution> | ReturnType<typeof import('./actions').startResolutions> | ReturnType<typeof import('./actions').finishResolutions> | ReturnType<typeof import('./actions').invalidateResolution> | ReturnType<typeof import('./actions').invalidateResolutionForStore> | ReturnType<typeof import('./actions').invalidateResolutionForStoreSelector>;
export declare type State = EquivalentKeyMap<unknown[] | unknown, boolean>;
/**
 * Reducer function returning next state for selector resolution, object form:
 *
 *   selectorName -> EquivalentKeyMap<Array, boolean>
 *
 * @param  state  Current state.
 * @param  action Dispatched action.
 *
 * @return Next state.
 */
declare const isResolved: (state: Record<string, State> | undefined, action: Action) => Record<string, State>;
export default isResolved;
//# sourceMappingURL=reducer.d.ts.map