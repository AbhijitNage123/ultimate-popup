{"version":3,"sources":["@wordpress/blocks/src/api/registration.js"],"names":["camelCase","isArray","isEmpty","isFunction","isNil","isObject","isPlainObject","isString","mapKeys","omit","pick","pickBy","some","applyFilters","select","dispatch","_x","blockDefault","isValidIcon","normalizeIconObject","DEPRECATED_ENTRY_KEYS","store","blocksStore","LEGACY_CATEGORY_MAPPING","common","formatting","layout","serverSideBlockDefinitions","unstable__bootstrapServerSideBlockDefinitions","definitions","blockName","Object","keys","apiVersion","undefined","value","key","getBlockSettingsFromMetadata","textdomain","metadata","allowedFields","settings","i18nBlockSchema","forEach","translateBlockSettingUsingI18nSchema","registerBlockType","blockNameOrMetadata","name","console","error","icon","keywords","attributes","providesContext","usesContext","supports","styles","save","test","getBlockType","preFilterSettings","deprecated","map","deprecation","edit","hasOwnProperty","category","getCategories","slug","warn","title","src","addBlockTypes","i18nSchema","settingValue","reduce","accumulator","registerBlockCollection","namespace","addBlockCollection","unregisterBlockCollection","removeBlockCollection","unregisterBlockType","oldBlock","removeBlockTypes","setFreeformContentHandlerName","setFreeformFallbackBlockName","getFreeformContentHandlerName","getFreeformFallbackBlockName","getGroupingBlockName","setUnregisteredTypeHandlerName","setUnregisteredFallbackBlockName","getUnregisteredTypeHandlerName","getUnregisteredFallbackBlockName","setDefaultBlockName","setGroupingBlockName","getDefaultBlockName","getBlockTypes","getBlockSupport","nameOrType","feature","defaultSupports","hasBlockSupport","isReusableBlock","blockOrType","isTemplatePart","getChildBlockNames","hasChildBlocks","hasChildBlocksWithInserterSupport","registerBlockStyle","styleVariation","addBlockStyles","unregisterBlockStyle","styleVariationName","removeBlockStyles","getBlockVariations","scope","registerBlockVariation","variation","addBlockVariations","unregisterBlockVariation","variationName","removeBlockVariations"],"mappings":"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","sourcesContent":["/* eslint no-console: [ 'error', { allow: [ 'error', 'warn' ] } ] */\n\n/**\n * External dependencies\n */\nimport {\n\tcamelCase,\n\tisArray,\n\tisEmpty,\n\tisFunction,\n\tisNil,\n\tisObject,\n\tisPlainObject,\n\tisString,\n\tmapKeys,\n\tomit,\n\tpick,\n\tpickBy,\n\tsome,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { applyFilters } from '@wordpress/hooks';\nimport { select, dispatch } from '@wordpress/data';\nimport { _x } from '@wordpress/i18n';\nimport { blockDefault } from '@wordpress/icons';\n\n/**\n * Internal dependencies\n */\nimport i18nBlockSchema from './i18n-block.json';\nimport { isValidIcon, normalizeIconObject } from './utils';\nimport { DEPRECATED_ENTRY_KEYS } from './constants';\nimport { store as blocksStore } from '../store';\n\n/**\n * An icon type definition. One of a Dashicon slug, an element,\n * or a component.\n *\n * @typedef {(string|WPElement|WPComponent)} WPIcon\n *\n * @see https://developer.wordpress.org/resource/dashicons/\n */\n\n/**\n * Render behavior of a block type icon; one of a Dashicon slug, an element,\n * or a component.\n *\n * @typedef {WPIcon} WPBlockTypeIconRender\n */\n\n/**\n * An object describing a normalized block type icon.\n *\n * @typedef {Object} WPBlockTypeIconDescriptor\n *\n * @property {WPBlockTypeIconRender} src         Render behavior of the icon,\n *                                               one of a Dashicon slug, an\n *                                               element, or a component.\n * @property {string}                background  Optimal background hex string\n *                                               color when displaying icon.\n * @property {string}                foreground  Optimal foreground hex string\n *                                               color when displaying icon.\n * @property {string}                shadowColor Optimal shadow hex string\n *                                               color when displaying icon.\n */\n\n/**\n * Value to use to render the icon for a block type in an editor interface,\n * either a Dashicon slug, an element, a component, or an object describing\n * the icon.\n *\n * @typedef {(WPBlockTypeIconDescriptor|WPBlockTypeIconRender)} WPBlockTypeIcon\n */\n\n/**\n * Named block variation scopes.\n *\n * @typedef {'block'|'inserter'|'transform'} WPBlockVariationScope\n */\n\n/**\n * An object describing a variation defined for the block type.\n *\n * @typedef {Object} WPBlockVariation\n *\n * @property {string}                  name          The unique and machine-readable name.\n * @property {string}                  title         A human-readable variation title.\n * @property {string}                  [description] A detailed variation description.\n * @property {string}                  [category]    Block type category classification,\n *                                                   used in search interfaces to arrange\n *                                                   block types by category.\n * @property {WPIcon}                  [icon]        An icon helping to visualize the variation.\n * @property {boolean}                 [isDefault]   Indicates whether the current variation is\n *                                                   the default one. Defaults to `false`.\n * @property {Object}                  [attributes]  Values which override block attributes.\n * @property {Array[]}                 [innerBlocks] Initial configuration of nested blocks.\n * @property {Object}                  [example]     Example provides structured data for\n *                                                   the block preview. You can set to\n *                                                   `undefined` to disable the preview shown\n *                                                   for the block type.\n * @property {WPBlockVariationScope[]} [scope]       The list of scopes where the variation\n *                                                   is applicable. When not provided, it\n *                                                   assumes all available scopes.\n * @property {string[]}                [keywords]    An array of terms (which can be translated)\n *                                                   that help users discover the variation\n *                                                   while searching.\n * @property {Function|string[]}       [isActive]    This can be a function or an array of block attributes.\n *                                                   Function that accepts a block's attributes and the\n *                                                   variation's attributes and determines if a variation is active.\n *                                                   This function doesn't try to find a match dynamically based\n *                                                   on all block's attributes, as in many cases some attributes are irrelevant.\n *                                                   An example would be for `embed` block where we only care\n *                                                   about `providerNameSlug` attribute's value.\n *                                                   We can also use a `string[]` to tell which attributes\n *                                                   should be compared as a shorthand. Each attributes will\n *                                                   be matched and the variation will be active if all of them are matching.\n */\n\n/**\n * Defined behavior of a block type.\n *\n * @typedef {Object} WPBlock\n *\n * @property {string}             name          Block type's namespaced name.\n * @property {string}             title         Human-readable block type label.\n * @property {string}             [description] A detailed block type description.\n * @property {string}             [category]    Block type category classification,\n *                                              used in search interfaces to arrange\n *                                              block types by category.\n * @property {WPBlockTypeIcon}    [icon]        Block type icon.\n * @property {string[]}           [keywords]    Additional keywords to produce block\n *                                              type as result in search interfaces.\n * @property {Object}             [attributes]  Block type attributes.\n * @property {WPComponent}        [save]        Optional component describing\n *                                              serialized markup structure of a\n *                                              block type.\n * @property {WPComponent}        edit          Component rendering an element to\n *                                              manipulate the attributes of a block\n *                                              in the context of an editor.\n * @property {WPBlockVariation[]} [variations]  The list of block variations.\n * @property {Object}             [example]     Example provides structured data for\n *                                              the block preview. When not defined\n *                                              then no preview is shown.\n */\n\n/**\n * Mapping of legacy category slugs to their latest normal values, used to\n * accommodate updates of the default set of block categories.\n *\n * @type {Record<string,string>}\n */\nconst LEGACY_CATEGORY_MAPPING = {\n\tcommon: 'text',\n\tformatting: 'text',\n\tlayout: 'design',\n};\n\nexport const serverSideBlockDefinitions = {};\n\n/**\n * Sets the server side block definition of blocks.\n *\n * @param {Object} definitions Server-side block definitions\n */\n// eslint-disable-next-line camelcase\nexport function unstable__bootstrapServerSideBlockDefinitions( definitions ) {\n\tfor ( const blockName of Object.keys( definitions ) ) {\n\t\t// Don't overwrite if already set. It covers the case when metadata\n\t\t// was initialized from the server.\n\t\tif ( serverSideBlockDefinitions[ blockName ] ) {\n\t\t\t// We still need to polyfill `apiVersion` for WordPress version\n\t\t\t// lower than 5.7. If it isn't present in the definition shared\n\t\t\t// from the server, we try to fallback to the definition passed.\n\t\t\t// @see https://github.com/WordPress/gutenberg/pull/29279\n\t\t\tif (\n\t\t\t\tserverSideBlockDefinitions[ blockName ].apiVersion ===\n\t\t\t\t\tundefined &&\n\t\t\t\tdefinitions[ blockName ].apiVersion\n\t\t\t) {\n\t\t\t\tserverSideBlockDefinitions[ blockName ].apiVersion =\n\t\t\t\t\tdefinitions[ blockName ].apiVersion;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tserverSideBlockDefinitions[ blockName ] = mapKeys(\n\t\t\tpickBy( definitions[ blockName ], ( value ) => ! isNil( value ) ),\n\t\t\t( value, key ) => camelCase( key )\n\t\t);\n\t}\n}\n\n/**\n * Gets block settings from metadata loaded from `block.json` file.\n *\n * @param {Object} metadata            Block metadata loaded from `block.json`.\n * @param {string} metadata.textdomain Textdomain to use with translations.\n *\n * @return {Object} Block settings.\n */\nfunction getBlockSettingsFromMetadata( { textdomain, ...metadata } ) {\n\tconst allowedFields = [\n\t\t'apiVersion',\n\t\t'title',\n\t\t'category',\n\t\t'parent',\n\t\t'icon',\n\t\t'description',\n\t\t'keywords',\n\t\t'attributes',\n\t\t'providesContext',\n\t\t'usesContext',\n\t\t'supports',\n\t\t'styles',\n\t\t'example',\n\t\t'variations',\n\t];\n\n\tconst settings = pick( metadata, allowedFields );\n\n\tif ( textdomain ) {\n\t\tObject.keys( i18nBlockSchema ).forEach( ( key ) => {\n\t\t\tif ( ! settings[ key ] ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsettings[ key ] = translateBlockSettingUsingI18nSchema(\n\t\t\t\ti18nBlockSchema[ key ],\n\t\t\t\tsettings[ key ],\n\t\t\t\ttextdomain\n\t\t\t);\n\t\t} );\n\t}\n\n\treturn settings;\n}\n\n/**\n * Registers a new block provided a unique name and an object defining its\n * behavior. Once registered, the block is made available as an option to any\n * editor interface where blocks are implemented.\n *\n * @param {string|Object} blockNameOrMetadata Block type name or its metadata.\n * @param {Object}        settings            Block settings.\n *\n * @return {?WPBlock} The block, if it has been successfully registered;\n *                    otherwise `undefined`.\n */\nexport function registerBlockType( blockNameOrMetadata, settings ) {\n\tconst name = isObject( blockNameOrMetadata )\n\t\t? blockNameOrMetadata.name\n\t\t: blockNameOrMetadata;\n\n\tif ( typeof name !== 'string' ) {\n\t\tconsole.error( 'Block names must be strings.' );\n\t\treturn;\n\t}\n\n\tif ( isObject( blockNameOrMetadata ) ) {\n\t\tunstable__bootstrapServerSideBlockDefinitions( {\n\t\t\t[ name ]: getBlockSettingsFromMetadata( blockNameOrMetadata ),\n\t\t} );\n\t}\n\n\tsettings = {\n\t\tname,\n\t\ticon: blockDefault,\n\t\tkeywords: [],\n\t\tattributes: {},\n\t\tprovidesContext: {},\n\t\tusesContext: [],\n\t\tsupports: {},\n\t\tstyles: [],\n\t\tsave: () => null,\n\t\t...serverSideBlockDefinitions?.[ name ],\n\t\t...settings,\n\t};\n\n\tif ( ! /^[a-z][a-z0-9-]*\\/[a-z][a-z0-9-]*$/.test( name ) ) {\n\t\tconsole.error(\n\t\t\t'Block names must contain a namespace prefix, include only lowercase alphanumeric characters or dashes, and start with a letter. Example: my-plugin/my-custom-block'\n\t\t);\n\t\treturn;\n\t}\n\tif ( select( blocksStore ).getBlockType( name ) ) {\n\t\tconsole.error( 'Block \"' + name + '\" is already registered.' );\n\t\treturn;\n\t}\n\n\tconst preFilterSettings = { ...settings };\n\tsettings = applyFilters( 'blocks.registerBlockType', settings, name );\n\n\tif ( settings.deprecated ) {\n\t\tsettings.deprecated = settings.deprecated.map( ( deprecation ) =>\n\t\t\tpick(\n\t\t\t\t// Only keep valid deprecation keys.\n\t\t\t\tapplyFilters(\n\t\t\t\t\t'blocks.registerBlockType',\n\t\t\t\t\t// Merge deprecation keys with pre-filter settings\n\t\t\t\t\t// so that filters that depend on specific keys being\n\t\t\t\t\t// present don't fail.\n\t\t\t\t\t{\n\t\t\t\t\t\t// Omit deprecation keys here so that deprecations\n\t\t\t\t\t\t// can opt out of specific keys like \"supports\".\n\t\t\t\t\t\t...omit( preFilterSettings, DEPRECATED_ENTRY_KEYS ),\n\t\t\t\t\t\t...deprecation,\n\t\t\t\t\t},\n\t\t\t\t\tname\n\t\t\t\t),\n\t\t\t\tDEPRECATED_ENTRY_KEYS\n\t\t\t)\n\t\t);\n\t}\n\n\tif ( ! isPlainObject( settings ) ) {\n\t\tconsole.error( 'Block settings must be a valid object.' );\n\t\treturn;\n\t}\n\n\tif ( ! isFunction( settings.save ) ) {\n\t\tconsole.error( 'The \"save\" property must be a valid function.' );\n\t\treturn;\n\t}\n\tif ( 'edit' in settings && ! isFunction( settings.edit ) ) {\n\t\tconsole.error( 'The \"edit\" property must be a valid function.' );\n\t\treturn;\n\t}\n\n\t// Canonicalize legacy categories to equivalent fallback.\n\tif ( LEGACY_CATEGORY_MAPPING.hasOwnProperty( settings.category ) ) {\n\t\tsettings.category = LEGACY_CATEGORY_MAPPING[ settings.category ];\n\t}\n\n\tif (\n\t\t'category' in settings &&\n\t\t! some( select( blocksStore ).getCategories(), {\n\t\t\tslug: settings.category,\n\t\t} )\n\t) {\n\t\tconsole.warn(\n\t\t\t'The block \"' +\n\t\t\t\tname +\n\t\t\t\t'\" is registered with an invalid category \"' +\n\t\t\t\tsettings.category +\n\t\t\t\t'\".'\n\t\t);\n\t\tdelete settings.category;\n\t}\n\n\tif ( ! ( 'title' in settings ) || settings.title === '' ) {\n\t\tconsole.error( 'The block \"' + name + '\" must have a title.' );\n\t\treturn;\n\t}\n\tif ( typeof settings.title !== 'string' ) {\n\t\tconsole.error( 'Block titles must be strings.' );\n\t\treturn;\n\t}\n\n\tsettings.icon = normalizeIconObject( settings.icon );\n\tif ( ! isValidIcon( settings.icon.src ) ) {\n\t\tconsole.error(\n\t\t\t'The icon passed is invalid. ' +\n\t\t\t\t'The icon should be a string, an element, a function, or an object following the specifications documented in https://developer.wordpress.org/block-editor/developers/block-api/block-registration/#icon-optional'\n\t\t);\n\t\treturn;\n\t}\n\n\tdispatch( blocksStore ).addBlockTypes( settings );\n\n\treturn settings;\n}\n\n/**\n * Translates block settings provided with metadata using the i18n schema.\n *\n * @param {string|string[]|Object[]} i18nSchema   I18n schema for the block setting.\n * @param {string|string[]|Object[]} settingValue Value for the block setting.\n * @param {string}                   textdomain   Textdomain to use with translations.\n *\n * @return {string|string[]|Object[]} Translated setting.\n */\nfunction translateBlockSettingUsingI18nSchema(\n\ti18nSchema,\n\tsettingValue,\n\ttextdomain\n) {\n\tif ( isString( i18nSchema ) && isString( settingValue ) ) {\n\t\t// eslint-disable-next-line @wordpress/i18n-no-variables, @wordpress/i18n-text-domain\n\t\treturn _x( settingValue, i18nSchema, textdomain );\n\t}\n\tif (\n\t\tisArray( i18nSchema ) &&\n\t\t! isEmpty( i18nSchema ) &&\n\t\tisArray( settingValue )\n\t) {\n\t\treturn settingValue.map( ( value ) =>\n\t\t\ttranslateBlockSettingUsingI18nSchema(\n\t\t\t\ti18nSchema[ 0 ],\n\t\t\t\tvalue,\n\t\t\t\ttextdomain\n\t\t\t)\n\t\t);\n\t}\n\tif (\n\t\tisObject( i18nSchema ) &&\n\t\t! isEmpty( i18nSchema ) &&\n\t\tisObject( settingValue )\n\t) {\n\t\treturn Object.keys( settingValue ).reduce( ( accumulator, key ) => {\n\t\t\tif ( ! i18nSchema[ key ] ) {\n\t\t\t\taccumulator[ key ] = settingValue[ key ];\n\t\t\t\treturn accumulator;\n\t\t\t}\n\t\t\taccumulator[ key ] = translateBlockSettingUsingI18nSchema(\n\t\t\t\ti18nSchema[ key ],\n\t\t\t\tsettingValue[ key ],\n\t\t\t\ttextdomain\n\t\t\t);\n\t\t\treturn accumulator;\n\t\t}, {} );\n\t}\n\treturn settingValue;\n}\n\n/**\n * Registers a new block collection to group blocks in the same namespace in the inserter.\n *\n * @param {string} namespace       The namespace to group blocks by in the inserter; corresponds to the block namespace.\n * @param {Object} settings        The block collection settings.\n * @param {string} settings.title  The title to display in the block inserter.\n * @param {Object} [settings.icon] The icon to display in the block inserter.\n */\nexport function registerBlockCollection( namespace, { title, icon } ) {\n\tdispatch( blocksStore ).addBlockCollection( namespace, title, icon );\n}\n\n/**\n * Unregisters a block collection\n *\n * @param {string} namespace The namespace to group blocks by in the inserter; corresponds to the block namespace\n *\n */\nexport function unregisterBlockCollection( namespace ) {\n\tdispatch( blocksStore ).removeBlockCollection( namespace );\n}\n\n/**\n * Unregisters a block.\n *\n * @param {string} name Block name.\n *\n * @return {?WPBlock} The previous block value, if it has been successfully\n *                    unregistered; otherwise `undefined`.\n */\nexport function unregisterBlockType( name ) {\n\tconst oldBlock = select( blocksStore ).getBlockType( name );\n\tif ( ! oldBlock ) {\n\t\tconsole.error( 'Block \"' + name + '\" is not registered.' );\n\t\treturn;\n\t}\n\tdispatch( blocksStore ).removeBlockTypes( name );\n\treturn oldBlock;\n}\n\n/**\n * Assigns name of block for handling non-block content.\n *\n * @param {string} blockName Block name.\n */\nexport function setFreeformContentHandlerName( blockName ) {\n\tdispatch( blocksStore ).setFreeformFallbackBlockName( blockName );\n}\n\n/**\n * Retrieves name of block handling non-block content, or undefined if no\n * handler has been defined.\n *\n * @return {?string} Block name.\n */\nexport function getFreeformContentHandlerName() {\n\treturn select( blocksStore ).getFreeformFallbackBlockName();\n}\n\n/**\n * Retrieves name of block used for handling grouping interactions.\n *\n * @return {?string} Block name.\n */\nexport function getGroupingBlockName() {\n\treturn select( blocksStore ).getGroupingBlockName();\n}\n\n/**\n * Assigns name of block handling unregistered block types.\n *\n * @param {string} blockName Block name.\n */\nexport function setUnregisteredTypeHandlerName( blockName ) {\n\tdispatch( blocksStore ).setUnregisteredFallbackBlockName( blockName );\n}\n\n/**\n * Retrieves name of block handling unregistered block types, or undefined if no\n * handler has been defined.\n *\n * @return {?string} Block name.\n */\nexport function getUnregisteredTypeHandlerName() {\n\treturn select( blocksStore ).getUnregisteredFallbackBlockName();\n}\n\n/**\n * Assigns the default block name.\n *\n * @param {string} name Block name.\n */\nexport function setDefaultBlockName( name ) {\n\tdispatch( blocksStore ).setDefaultBlockName( name );\n}\n\n/**\n * Assigns name of block for handling block grouping interactions.\n *\n * @param {string} name Block name.\n */\nexport function setGroupingBlockName( name ) {\n\tdispatch( blocksStore ).setGroupingBlockName( name );\n}\n\n/**\n * Retrieves the default block name.\n *\n * @return {?string} Block name.\n */\nexport function getDefaultBlockName() {\n\treturn select( blocksStore ).getDefaultBlockName();\n}\n\n/**\n * Returns a registered block type.\n *\n * @param {string} name Block name.\n *\n * @return {?Object} Block type.\n */\nexport function getBlockType( name ) {\n\treturn select( blocksStore ).getBlockType( name );\n}\n\n/**\n * Returns all registered blocks.\n *\n * @return {Array} Block settings.\n */\nexport function getBlockTypes() {\n\treturn select( blocksStore ).getBlockTypes();\n}\n\n/**\n * Returns the block support value for a feature, if defined.\n *\n * @param {(string|Object)} nameOrType      Block name or type object\n * @param {string}          feature         Feature to retrieve\n * @param {*}               defaultSupports Default value to return if not\n *                                          explicitly defined\n *\n * @return {?*} Block support value\n */\nexport function getBlockSupport( nameOrType, feature, defaultSupports ) {\n\treturn select( blocksStore ).getBlockSupport(\n\t\tnameOrType,\n\t\tfeature,\n\t\tdefaultSupports\n\t);\n}\n\n/**\n * Returns true if the block defines support for a feature, or false otherwise.\n *\n * @param {(string|Object)} nameOrType      Block name or type object.\n * @param {string}          feature         Feature to test.\n * @param {boolean}         defaultSupports Whether feature is supported by\n *                                          default if not explicitly defined.\n *\n * @return {boolean} Whether block supports feature.\n */\nexport function hasBlockSupport( nameOrType, feature, defaultSupports ) {\n\treturn select( blocksStore ).hasBlockSupport(\n\t\tnameOrType,\n\t\tfeature,\n\t\tdefaultSupports\n\t);\n}\n\n/**\n * Determines whether or not the given block is a reusable block. This is a\n * special block type that is used to point to a global block stored via the\n * API.\n *\n * @param {Object} blockOrType Block or Block Type to test.\n *\n * @return {boolean} Whether the given block is a reusable block.\n */\nexport function isReusableBlock( blockOrType ) {\n\treturn blockOrType.name === 'core/block';\n}\n\n/**\n * Determines whether or not the given block is a template part. This is a\n * special block type that allows composing a page template out of reusable\n * design elements.\n *\n * @param {Object} blockOrType Block or Block Type to test.\n *\n * @return {boolean} Whether the given block is a template part.\n */\nexport function isTemplatePart( blockOrType ) {\n\treturn blockOrType.name === 'core/template-part';\n}\n\n/**\n * Returns an array with the child blocks of a given block.\n *\n * @param {string} blockName Name of block (example: “latest-posts”).\n *\n * @return {Array} Array of child block names.\n */\nexport const getChildBlockNames = ( blockName ) => {\n\treturn select( blocksStore ).getChildBlockNames( blockName );\n};\n\n/**\n * Returns a boolean indicating if a block has child blocks or not.\n *\n * @param {string} blockName Name of block (example: “latest-posts”).\n *\n * @return {boolean} True if a block contains child blocks and false otherwise.\n */\nexport const hasChildBlocks = ( blockName ) => {\n\treturn select( blocksStore ).hasChildBlocks( blockName );\n};\n\n/**\n * Returns a boolean indicating if a block has at least one child block with inserter support.\n *\n * @param {string} blockName Block type name.\n *\n * @return {boolean} True if a block contains at least one child blocks with inserter support\n *                   and false otherwise.\n */\nexport const hasChildBlocksWithInserterSupport = ( blockName ) => {\n\treturn select( blocksStore ).hasChildBlocksWithInserterSupport( blockName );\n};\n\n/**\n * Registers a new block style variation for the given block.\n *\n * @param {string} blockName      Name of block (example: “core/latest-posts”).\n * @param {Object} styleVariation Object containing `name` which is the class name applied to the block and `label` which identifies the variation to the user.\n */\nexport const registerBlockStyle = ( blockName, styleVariation ) => {\n\tdispatch( blocksStore ).addBlockStyles( blockName, styleVariation );\n};\n\n/**\n * Unregisters a block style variation for the given block.\n *\n * @param {string} blockName          Name of block (example: “core/latest-posts”).\n * @param {string} styleVariationName Name of class applied to the block.\n */\nexport const unregisterBlockStyle = ( blockName, styleVariationName ) => {\n\tdispatch( blocksStore ).removeBlockStyles( blockName, styleVariationName );\n};\n\n/**\n * Returns an array with the variations of a given block type.\n *\n * @param {string}                blockName Name of block (example: “core/columns”).\n * @param {WPBlockVariationScope} [scope]   Block variation scope name.\n *\n * @return {(WPBlockVariation[]|void)} Block variations.\n */\nexport const getBlockVariations = ( blockName, scope ) => {\n\treturn select( blocksStore ).getBlockVariations( blockName, scope );\n};\n\n/**\n * Registers a new block variation for the given block type.\n *\n * @param {string}           blockName Name of the block (example: “core/columns”).\n * @param {WPBlockVariation} variation Object describing a block variation.\n */\nexport const registerBlockVariation = ( blockName, variation ) => {\n\tdispatch( blocksStore ).addBlockVariations( blockName, variation );\n};\n\n/**\n * Unregisters a block variation defined for the given block type.\n *\n * @param {string} blockName     Name of the block (example: “core/columns”).\n * @param {string} variationName Name of the variation defined for the block.\n */\nexport const unregisterBlockVariation = ( blockName, variationName ) => {\n\tdispatch( blocksStore ).removeBlockVariations( blockName, variationName );\n};\n"]}