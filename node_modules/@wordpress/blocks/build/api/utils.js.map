{"version":3,"sources":["@wordpress/blocks/src/api/utils.js"],"names":["ICON_COLORS","isUnmodifiedDefaultBlock","block","defaultBlockName","name","newDefaultBlock","blockType","attributes","value","key","isValidIcon","icon","Component","normalizeIconObject","src","tinyBgColor","background","foreground","includeFallbackColors","level","size","toHexString","shadowColor","setAlpha","toRgbString","normalizeBlockType","blockTypeOrName","getBlockLabel","context","__experimentalLabel","getLabel","title","label","getAccessibleBlockLabel","position","direction","hasPosition","undefined","hasLabel","__experimentalSanitizeBlockAttributes","Error","accumulator","schema","hasOwnProperty","default","indexOf","source","Array","isArray","__experimentalGetBlockAttributesNamesByRole","role","attributesNames","Object","keys","filter","attributeName","__experimentalRole"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { every, has, isFunction, isString, reduce } from 'lodash';\nimport { default as tinycolor, mostReadable } from 'tinycolor2';\n\n/**\n * WordPress dependencies\n */\nimport { Component, isValidElement } from '@wordpress/element';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { __unstableStripHTML as stripHTML } from '@wordpress/dom';\n\n/**\n * Internal dependencies\n */\nimport { getBlockType, getDefaultBlockName } from './registration';\nimport { createBlock } from './factory';\n\n/**\n * Array of icon colors containing a color to be used if the icon color\n * was not explicitly set but the icon background color was.\n *\n * @type {Object}\n */\nconst ICON_COLORS = [ '#191e23', '#f8f9f9' ];\n\n/**\n * Determines whether the block is a default block\n * and its attributes are equal to the default attributes\n * which means the block is unmodified.\n *\n * @param {WPBlock} block Block Object\n *\n * @return {boolean} Whether the block is an unmodified default block\n */\nexport function isUnmodifiedDefaultBlock( block ) {\n\tconst defaultBlockName = getDefaultBlockName();\n\tif ( block.name !== defaultBlockName ) {\n\t\treturn false;\n\t}\n\n\t// Cache a created default block if no cache exists or the default block\n\t// name changed.\n\tif (\n\t\t! isUnmodifiedDefaultBlock.block ||\n\t\tisUnmodifiedDefaultBlock.block.name !== defaultBlockName\n\t) {\n\t\tisUnmodifiedDefaultBlock.block = createBlock( defaultBlockName );\n\t}\n\n\tconst newDefaultBlock = isUnmodifiedDefaultBlock.block;\n\tconst blockType = getBlockType( defaultBlockName );\n\n\treturn every(\n\t\tblockType.attributes,\n\t\t( value, key ) =>\n\t\t\tnewDefaultBlock.attributes[ key ] === block.attributes[ key ]\n\t);\n}\n\n/**\n * Function that checks if the parameter is a valid icon.\n *\n * @param {*} icon Parameter to be checked.\n *\n * @return {boolean} True if the parameter is a valid icon and false otherwise.\n */\n\nexport function isValidIcon( icon ) {\n\treturn (\n\t\t!! icon &&\n\t\t( isString( icon ) ||\n\t\t\tisValidElement( icon ) ||\n\t\t\tisFunction( icon ) ||\n\t\t\ticon instanceof Component )\n\t);\n}\n\n/**\n * Function that receives an icon as set by the blocks during the registration\n * and returns a new icon object that is normalized so we can rely on just on possible icon structure\n * in the codebase.\n *\n * @param {WPBlockTypeIconRender} icon Render behavior of a block type icon;\n *                                     one of a Dashicon slug, an element, or a\n *                                     component.\n *\n * @return {WPBlockTypeIconDescriptor} Object describing the icon.\n */\nexport function normalizeIconObject( icon ) {\n\tif ( isValidIcon( icon ) ) {\n\t\treturn { src: icon };\n\t}\n\n\tif ( has( icon, [ 'background' ] ) ) {\n\t\tconst tinyBgColor = tinycolor( icon.background );\n\n\t\treturn {\n\t\t\t...icon,\n\t\t\tforeground: icon.foreground\n\t\t\t\t? icon.foreground\n\t\t\t\t: mostReadable( tinyBgColor, ICON_COLORS, {\n\t\t\t\t\t\tincludeFallbackColors: true,\n\t\t\t\t\t\tlevel: 'AA',\n\t\t\t\t\t\tsize: 'large',\n\t\t\t\t  } ).toHexString(),\n\t\t\tshadowColor: tinyBgColor.setAlpha( 0.3 ).toRgbString(),\n\t\t};\n\t}\n\n\treturn icon;\n}\n\n/**\n * Normalizes block type passed as param. When string is passed then\n * it converts it to the matching block type object.\n * It passes the original object otherwise.\n *\n * @param {string|Object} blockTypeOrName Block type or name.\n *\n * @return {?Object} Block type.\n */\nexport function normalizeBlockType( blockTypeOrName ) {\n\tif ( isString( blockTypeOrName ) ) {\n\t\treturn getBlockType( blockTypeOrName );\n\t}\n\n\treturn blockTypeOrName;\n}\n\n/**\n * Get the label for the block, usually this is either the block title,\n * or the value of the block's `label` function when that's specified.\n *\n * @param {Object} blockType  The block type.\n * @param {Object} attributes The values of the block's attributes.\n * @param {Object} context    The intended use for the label.\n *\n * @return {string} The block label.\n */\nexport function getBlockLabel( blockType, attributes, context = 'visual' ) {\n\tconst { __experimentalLabel: getLabel, title } = blockType;\n\n\tconst label = getLabel && getLabel( attributes, { context } );\n\n\tif ( ! label ) {\n\t\treturn title;\n\t}\n\n\t// Strip any HTML (i.e. RichText formatting) before returning.\n\treturn stripHTML( label );\n}\n\n/**\n * Get a label for the block for use by screenreaders, this is more descriptive\n * than the visual label and includes the block title and the value of the\n * `getLabel` function if it's specified.\n *\n * @param {Object}  blockType              The block type.\n * @param {Object}  attributes             The values of the block's attributes.\n * @param {?number} position               The position of the block in the block list.\n * @param {string}  [direction='vertical'] The direction of the block layout.\n *\n * @return {string} The block label.\n */\nexport function getAccessibleBlockLabel(\n\tblockType,\n\tattributes,\n\tposition,\n\tdirection = 'vertical'\n) {\n\t// `title` is already localized, `label` is a user-supplied value.\n\tconst { title } = blockType;\n\tconst label = getBlockLabel( blockType, attributes, 'accessibility' );\n\tconst hasPosition = position !== undefined;\n\n\t// getBlockLabel returns the block title as a fallback when there's no label,\n\t// if it did return the title, this function needs to avoid adding the\n\t// title twice within the accessible label. Use this `hasLabel` boolean to\n\t// handle that.\n\tconst hasLabel = label && label !== title;\n\n\tif ( hasPosition && direction === 'vertical' ) {\n\t\tif ( hasLabel ) {\n\t\t\treturn sprintf(\n\t\t\t\t/* translators: accessibility text. 1: The block title. 2: The block row number. 3: The block label.. */\n\t\t\t\t__( '%1$s Block. Row %2$d. %3$s' ),\n\t\t\t\ttitle,\n\t\t\t\tposition,\n\t\t\t\tlabel\n\t\t\t);\n\t\t}\n\n\t\treturn sprintf(\n\t\t\t/* translators: accessibility text. 1: The block title. 2: The block row number. */\n\t\t\t__( '%1$s Block. Row %2$d' ),\n\t\t\ttitle,\n\t\t\tposition\n\t\t);\n\t} else if ( hasPosition && direction === 'horizontal' ) {\n\t\tif ( hasLabel ) {\n\t\t\treturn sprintf(\n\t\t\t\t/* translators: accessibility text. 1: The block title. 2: The block column number. 3: The block label.. */\n\t\t\t\t__( '%1$s Block. Column %2$d. %3$s' ),\n\t\t\t\ttitle,\n\t\t\t\tposition,\n\t\t\t\tlabel\n\t\t\t);\n\t\t}\n\n\t\treturn sprintf(\n\t\t\t/* translators: accessibility text. 1: The block title. 2: The block column number. */\n\t\t\t__( '%1$s Block. Column %2$d' ),\n\t\t\ttitle,\n\t\t\tposition\n\t\t);\n\t}\n\n\tif ( hasLabel ) {\n\t\treturn sprintf(\n\t\t\t/* translators: accessibility text. %1: The block title. %2: The block label. */\n\t\t\t__( '%1$s Block. %2$s' ),\n\t\t\ttitle,\n\t\t\tlabel\n\t\t);\n\t}\n\n\treturn sprintf(\n\t\t/* translators: accessibility text. %s: The block title. */\n\t\t__( '%s Block' ),\n\t\ttitle\n\t);\n}\n\n/**\n * Ensure attributes contains only values defined by block type, and merge\n * default values for missing attributes.\n *\n * @param {string} name       The block's name.\n * @param {Object} attributes The block's attributes.\n * @return {Object} The sanitized attributes.\n */\nexport function __experimentalSanitizeBlockAttributes( name, attributes ) {\n\t// Get the type definition associated with a registered block.\n\tconst blockType = getBlockType( name );\n\n\tif ( undefined === blockType ) {\n\t\tthrow new Error( `Block type '${ name }' is not registered.` );\n\t}\n\n\treturn reduce(\n\t\tblockType.attributes,\n\t\t( accumulator, schema, key ) => {\n\t\t\tconst value = attributes[ key ];\n\n\t\t\tif ( undefined !== value ) {\n\t\t\t\taccumulator[ key ] = value;\n\t\t\t} else if ( schema.hasOwnProperty( 'default' ) ) {\n\t\t\t\taccumulator[ key ] = schema.default;\n\t\t\t}\n\n\t\t\tif ( [ 'node', 'children' ].indexOf( schema.source ) !== -1 ) {\n\t\t\t\t// Ensure value passed is always an array, which we're expecting in\n\t\t\t\t// the RichText component to handle the deprecated value.\n\t\t\t\tif ( typeof accumulator[ key ] === 'string' ) {\n\t\t\t\t\taccumulator[ key ] = [ accumulator[ key ] ];\n\t\t\t\t} else if ( ! Array.isArray( accumulator[ key ] ) ) {\n\t\t\t\t\taccumulator[ key ] = [];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn accumulator;\n\t\t},\n\t\t{}\n\t);\n}\n\n/**\n * Filter block attributes by `role` and return their names.\n *\n * @param {string} name Block attribute's name.\n * @param {string} role The role of a block attribute.\n *\n * @return {string[]} The attribute names that have the provided role.\n */\nexport function __experimentalGetBlockAttributesNamesByRole( name, role ) {\n\tconst attributes = getBlockType( name )?.attributes;\n\tif ( ! attributes ) return [];\n\tconst attributesNames = Object.keys( attributes );\n\tif ( ! role ) return attributesNames;\n\treturn attributesNames.filter(\n\t\t( attributeName ) =>\n\t\t\tattributes[ attributeName ]?.__experimentalRole === role\n\t);\n}\n"]}