{"version":3,"sources":["@wordpress/blocks/src/api/serializer.js"],"names":["getBlockDefaultClassName","blockName","className","replace","getBlockMenuDefaultClassName","blockPropsProvider","getBlockProps","props","blockType","attributes","getSaveElement","blockTypeOrName","innerBlocks","save","prototype","Component","instance","render","bind","element","hasLightBlockWrapper","apiVersion","getSaveContent","getCommentAttributes","accumulator","attributeSchema","key","value","undefined","source","default","serializeAttributes","JSON","stringify","getBlockInnerHTML","block","saveContent","originalContent","isValid","length","name","error","getCommentDelimitedContent","rawBlockName","content","serializedAttributes","slice","serializeBlock","isInnerBlocks","saveAttributes","__unstableSerializeAndClean","blocks","serialize","options","map","join"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { isEmpty, reduce, isObject, castArray, startsWith } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Component, cloneElement, renderToString } from '@wordpress/element';\nimport { hasFilter, applyFilters } from '@wordpress/hooks';\nimport isShallowEqual from '@wordpress/is-shallow-equal';\nimport { removep } from '@wordpress/autop';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetBlockType,\n\tgetFreeformContentHandlerName,\n\tgetUnregisteredTypeHandlerName,\n\thasBlockSupport,\n} from './registration';\nimport { isUnmodifiedDefaultBlock, normalizeBlockType } from './utils';\nimport BlockContentProvider from '../block-content-provider';\n\n/**\n * @typedef {Object} WPBlockSerializationOptions Serialization Options.\n *\n * @property {boolean} isInnerBlocks Whether we are serializing inner blocks.\n */\n\n/**\n * Returns the block's default classname from its name.\n *\n * @param {string} blockName The block name.\n *\n * @return {string} The block's default class.\n */\nexport function getBlockDefaultClassName( blockName ) {\n\t// Generated HTML classes for blocks follow the `wp-block-{name}` nomenclature.\n\t// Blocks provided by WordPress drop the prefixes 'core/' or 'core-' (historically used in 'core-embed/').\n\tconst className =\n\t\t'wp-block-' + blockName.replace( /\\//, '-' ).replace( /^core-/, '' );\n\n\treturn applyFilters(\n\t\t'blocks.getBlockDefaultClassName',\n\t\tclassName,\n\t\tblockName\n\t);\n}\n\n/**\n * Returns the block's default menu item classname from its name.\n *\n * @param {string} blockName The block name.\n *\n * @return {string} The block's default menu item class.\n */\nexport function getBlockMenuDefaultClassName( blockName ) {\n\t// Generated HTML classes for blocks follow the `editor-block-list-item-{name}` nomenclature.\n\t// Blocks provided by WordPress drop the prefixes 'core/' or 'core-' (historically used in 'core-embed/').\n\tconst className =\n\t\t'editor-block-list-item-' +\n\t\tblockName.replace( /\\//, '-' ).replace( /^core-/, '' );\n\n\treturn applyFilters(\n\t\t'blocks.getBlockMenuDefaultClassName',\n\t\tclassName,\n\t\tblockName\n\t);\n}\n\nconst blockPropsProvider = {};\n\n/**\n * Call within a save function to get the props for the block wrapper.\n *\n * @param {Object} props Optional. Props to pass to the element.\n */\nexport function getBlockProps( props = {} ) {\n\tconst { blockType, attributes } = blockPropsProvider;\n\treturn applyFilters(\n\t\t'blocks.getSaveContent.extraProps',\n\t\t{ ...props },\n\t\tblockType,\n\t\tattributes\n\t);\n}\n\n/**\n * Given a block type containing a save render implementation and attributes, returns the\n * enhanced element to be saved or string when raw HTML expected.\n *\n * @param {string|Object} blockTypeOrName Block type or name.\n * @param {Object}        attributes      Block attributes.\n * @param {?Array}        innerBlocks     Nested blocks.\n *\n * @return {Object|string} Save element or raw HTML string.\n */\nexport function getSaveElement(\n\tblockTypeOrName,\n\tattributes,\n\tinnerBlocks = []\n) {\n\tconst blockType = normalizeBlockType( blockTypeOrName );\n\tlet { save } = blockType;\n\n\t// Component classes are unsupported for save since serialization must\n\t// occur synchronously. For improved interoperability with higher-order\n\t// components which often return component class, emulate basic support.\n\tif ( save.prototype instanceof Component ) {\n\t\tconst instance = new save( { attributes } );\n\t\tsave = instance.render.bind( instance );\n\t}\n\n\tblockPropsProvider.blockType = blockType;\n\tblockPropsProvider.attributes = attributes;\n\n\tlet element = save( { attributes, innerBlocks } );\n\n\tconst hasLightBlockWrapper =\n\t\tblockType.apiVersion > 1 ||\n\t\thasBlockSupport( blockType, 'lightBlockWrapper', false );\n\n\tif (\n\t\tisObject( element ) &&\n\t\thasFilter( 'blocks.getSaveContent.extraProps' ) &&\n\t\t! hasLightBlockWrapper\n\t) {\n\t\t/**\n\t\t * Filters the props applied to the block save result element.\n\t\t *\n\t\t * @param {Object}  props      Props applied to save element.\n\t\t * @param {WPBlock} blockType  Block type definition.\n\t\t * @param {Object}  attributes Block attributes.\n\t\t */\n\t\tconst props = applyFilters(\n\t\t\t'blocks.getSaveContent.extraProps',\n\t\t\t{ ...element.props },\n\t\t\tblockType,\n\t\t\tattributes\n\t\t);\n\n\t\tif ( ! isShallowEqual( props, element.props ) ) {\n\t\t\telement = cloneElement( element, props );\n\t\t}\n\t}\n\n\t/**\n\t * Filters the save result of a block during serialization.\n\t *\n\t * @param {WPElement} element    Block save result.\n\t * @param {WPBlock}   blockType  Block type definition.\n\t * @param {Object}    attributes Block attributes.\n\t */\n\telement = applyFilters(\n\t\t'blocks.getSaveElement',\n\t\telement,\n\t\tblockType,\n\t\tattributes\n\t);\n\n\treturn (\n\t\t<BlockContentProvider innerBlocks={ innerBlocks }>\n\t\t\t{ element }\n\t\t</BlockContentProvider>\n\t);\n}\n\n/**\n * Given a block type containing a save render implementation and attributes, returns the\n * static markup to be saved.\n *\n * @param {string|Object} blockTypeOrName Block type or name.\n * @param {Object}        attributes      Block attributes.\n * @param {?Array}        innerBlocks     Nested blocks.\n *\n * @return {string} Save content.\n */\nexport function getSaveContent( blockTypeOrName, attributes, innerBlocks ) {\n\tconst blockType = normalizeBlockType( blockTypeOrName );\n\n\treturn renderToString(\n\t\tgetSaveElement( blockType, attributes, innerBlocks )\n\t);\n}\n\n/**\n * Returns attributes which are to be saved and serialized into the block\n * comment delimiter.\n *\n * When a block exists in memory it contains as its attributes both those\n * parsed the block comment delimiter _and_ those which matched from the\n * contents of the block.\n *\n * This function returns only those attributes which are needed to persist and\n * which cannot be matched from the block content.\n *\n * @param {Object<string,*>} blockType  Block type.\n * @param {Object<string,*>} attributes Attributes from in-memory block data.\n *\n * @return {Object<string,*>} Subset of attributes for comment serialization.\n */\nexport function getCommentAttributes( blockType, attributes ) {\n\treturn reduce(\n\t\tblockType.attributes,\n\t\t( accumulator, attributeSchema, key ) => {\n\t\t\tconst value = attributes[ key ];\n\t\t\t// Ignore undefined values.\n\t\t\tif ( undefined === value ) {\n\t\t\t\treturn accumulator;\n\t\t\t}\n\n\t\t\t// Ignore all attributes but the ones with an \"undefined\" source\n\t\t\t// \"undefined\" source refers to attributes saved in the block comment.\n\t\t\tif ( attributeSchema.source !== undefined ) {\n\t\t\t\treturn accumulator;\n\t\t\t}\n\n\t\t\t// Ignore default value.\n\t\t\tif (\n\t\t\t\t'default' in attributeSchema &&\n\t\t\t\tattributeSchema.default === value\n\t\t\t) {\n\t\t\t\treturn accumulator;\n\t\t\t}\n\n\t\t\t// Otherwise, include in comment set.\n\t\t\taccumulator[ key ] = value;\n\t\t\treturn accumulator;\n\t\t},\n\t\t{}\n\t);\n}\n\n/**\n * Given an attributes object, returns a string in the serialized attributes\n * format prepared for post content.\n *\n * @param {Object} attributes Attributes object.\n *\n * @return {string} Serialized attributes.\n */\nexport function serializeAttributes( attributes ) {\n\treturn (\n\t\tJSON.stringify( attributes )\n\t\t\t// Don't break HTML comments.\n\t\t\t.replace( /--/g, '\\\\u002d\\\\u002d' )\n\n\t\t\t// Don't break non-standard-compliant tools.\n\t\t\t.replace( /</g, '\\\\u003c' )\n\t\t\t.replace( />/g, '\\\\u003e' )\n\t\t\t.replace( /&/g, '\\\\u0026' )\n\n\t\t\t// Bypass server stripslashes behavior which would unescape stringify's\n\t\t\t// escaping of quotation mark.\n\t\t\t//\n\t\t\t// See: https://developer.wordpress.org/reference/functions/wp_kses_stripslashes/\n\t\t\t.replace( /\\\\\"/g, '\\\\u0022' )\n\t);\n}\n\n/**\n * Given a block object, returns the Block's Inner HTML markup.\n *\n * @param {Object} block Block instance.\n *\n * @return {string} HTML.\n */\nexport function getBlockInnerHTML( block ) {\n\t// If block was parsed as invalid or encounters an error while generating\n\t// save content, use original content instead to avoid content loss. If a\n\t// block contains nested content, exempt it from this condition because we\n\t// otherwise have no access to its original content and content loss would\n\t// still occur.\n\tlet saveContent = block.originalContent;\n\tif ( block.isValid || block.innerBlocks.length ) {\n\t\ttry {\n\t\t\tsaveContent = getSaveContent(\n\t\t\t\tblock.name,\n\t\t\t\tblock.attributes,\n\t\t\t\tblock.innerBlocks\n\t\t\t);\n\t\t} catch ( error ) {}\n\t}\n\n\treturn saveContent;\n}\n\n/**\n * Returns the content of a block, including comment delimiters.\n *\n * @param {string} rawBlockName Block name.\n * @param {Object} attributes   Block attributes.\n * @param {string} content      Block save content.\n *\n * @return {string} Comment-delimited block content.\n */\nexport function getCommentDelimitedContent(\n\trawBlockName,\n\tattributes,\n\tcontent\n) {\n\tconst serializedAttributes = ! isEmpty( attributes )\n\t\t? serializeAttributes( attributes ) + ' '\n\t\t: '';\n\n\t// Strip core blocks of their namespace prefix.\n\tconst blockName = startsWith( rawBlockName, 'core/' )\n\t\t? rawBlockName.slice( 5 )\n\t\t: rawBlockName;\n\n\t// @todo make the `wp:` prefix potentially configurable.\n\n\tif ( ! content ) {\n\t\treturn `<!-- wp:${ blockName } ${ serializedAttributes }/-->`;\n\t}\n\n\treturn (\n\t\t`<!-- wp:${ blockName } ${ serializedAttributes }-->\\n` +\n\t\tcontent +\n\t\t`\\n<!-- /wp:${ blockName } -->`\n\t);\n}\n\n/**\n * Returns the content of a block, including comment delimiters, determining\n * serialized attributes and content form from the current state of the block.\n *\n * @param {Object}                      block   Block instance.\n * @param {WPBlockSerializationOptions} options Serialization options.\n *\n * @return {string} Serialized block.\n */\nexport function serializeBlock( block, { isInnerBlocks = false } = {} ) {\n\tconst blockName = block.name;\n\tconst saveContent = getBlockInnerHTML( block );\n\n\tif (\n\t\tblockName === getUnregisteredTypeHandlerName() ||\n\t\t( ! isInnerBlocks && blockName === getFreeformContentHandlerName() )\n\t) {\n\t\treturn saveContent;\n\t}\n\n\tconst blockType = getBlockType( blockName );\n\tconst saveAttributes = getCommentAttributes( blockType, block.attributes );\n\treturn getCommentDelimitedContent( blockName, saveAttributes, saveContent );\n}\n\nexport function __unstableSerializeAndClean( blocks ) {\n\t// A single unmodified default block is assumed to\n\t// be equivalent to an empty post.\n\tif ( blocks.length === 1 && isUnmodifiedDefaultBlock( blocks[ 0 ] ) ) {\n\t\tblocks = [];\n\t}\n\n\tlet content = serialize( blocks );\n\n\t// For compatibility, treat a post consisting of a\n\t// single freeform block as legacy content and apply\n\t// pre-block-editor removep'd content formatting.\n\tif (\n\t\tblocks.length === 1 &&\n\t\tblocks[ 0 ].name === getFreeformContentHandlerName()\n\t) {\n\t\tcontent = removep( content );\n\t}\n\n\treturn content;\n}\n\n/**\n * Takes a block or set of blocks and returns the serialized post content.\n *\n * @param {Array}                       blocks  Block(s) to serialize.\n * @param {WPBlockSerializationOptions} options Serialization options.\n *\n * @return {string} The post content.\n */\nexport default function serialize( blocks, options ) {\n\treturn castArray( blocks )\n\t\t.map( ( block ) => serializeBlock( block, options ) )\n\t\t.join( '\\n\\n' );\n}\n"]}