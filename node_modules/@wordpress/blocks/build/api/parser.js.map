{"version":3,"sources":["@wordpress/blocks/src/api/parser.js"],"names":["STRING_SOURCES","Set","toBooleanAttributeMatcher","matcher","value","undefined","isOfType","type","constructor","Object","Array","isArray","isOfTypes","types","some","isValidByType","isValidByEnum","enumSet","includes","isAmbiguousStringSource","attributeSchema","source","isStringSource","has","isSingleType","matcherFromSource","sourceConfig","selector","attribute","multiline","subMatchers","query","nodeName","toLowerCase","console","error","parseWithAttributeSchema","innerHTML","getBlockAttribute","attributeKey","commentAttributes","enum","default","getBlockAttributes","blockTypeOrName","attributes","blockType","blockAttributes","getMigratedBlock","block","parsedAttributes","name","deprecated","deprecatedDefinitions","length","originalContent","innerBlocks","i","isEligible","stubFalse","isValid","deprecatedBlockType","assign","DEPRECATED_ENTRY_KEYS","migratedAttributes","validationIssues","migratedInnerBlocks","migrate","convertLegacyBlocks","newAttributes","indexOf","service","substring","providerSlug","speaker","polldaddy","providerNameSlug","responsive","createBlockWithFallback","blockNode","blockName","originalName","attrs","innerContent","freeformContentFallbackBlock","unregisteredFallbackBlock","trim","reconstitutedBlockNode","originalUndelimitedContent","serializeBlockNode","isCommentDelimited","map","filter","innerBlock","isFallbackBlock","info","forEach","log","args","options","childIndex","content","item","join","replace","createParse","parseImplementation","reduce","accumulator","push","parseWithGrammar","defaultParse"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { parse as hpqParse } from 'hpq';\nimport { flow, get, castArray, mapValues, omit, stubFalse } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { autop } from '@wordpress/autop';\nimport { applyFilters } from '@wordpress/hooks';\nimport { parse as defaultParse } from '@wordpress/block-serialization-default-parser';\n/**\n * Internal dependencies\n */\nimport {\n\tgetBlockType,\n\tgetFreeformContentHandlerName,\n\tgetUnregisteredTypeHandlerName,\n} from './registration';\nimport { createBlock } from './factory';\nimport { getBlockContentValidationResult } from './validation';\nimport { getCommentDelimitedContent, getSaveContent } from './serializer';\nimport { attr, html, text, query, node, children, prop } from './matchers';\nimport { normalizeBlockType } from './utils';\nimport { DEPRECATED_ENTRY_KEYS } from './constants';\n\n/**\n * Sources which are guaranteed to return a string value.\n *\n * @type {Set}\n */\nconst STRING_SOURCES = new Set( [ 'attribute', 'html', 'text', 'tag' ] );\n\n/**\n * Higher-order hpq matcher which enhances an attribute matcher to return true\n * or false depending on whether the original matcher returns undefined. This\n * is useful for boolean attributes (e.g. disabled) whose attribute values may\n * be technically falsey (empty string), though their mere presence should be\n * enough to infer as true.\n *\n * @param {Function} matcher Original hpq matcher.\n *\n * @return {Function} Enhanced hpq matcher.\n */\nexport const toBooleanAttributeMatcher = ( matcher ) =>\n\tflow( [\n\t\tmatcher,\n\t\t// Expected values from `attr( 'disabled' )`:\n\t\t//\n\t\t// <input>\n\t\t// - Value:       `undefined`\n\t\t// - Transformed: `false`\n\t\t//\n\t\t// <input disabled>\n\t\t// - Value:       `''`\n\t\t// - Transformed: `true`\n\t\t//\n\t\t// <input disabled=\"disabled\">\n\t\t// - Value:       `'disabled'`\n\t\t// - Transformed: `true`\n\t\t( value ) => value !== undefined,\n\t] );\n\n/**\n * Returns true if value is of the given JSON schema type, or false otherwise.\n *\n * @see http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.25\n *\n * @param {*}      value Value to test.\n * @param {string} type  Type to test.\n *\n * @return {boolean} Whether value is of type.\n */\nexport function isOfType( value, type ) {\n\tswitch ( type ) {\n\t\tcase 'string':\n\t\t\treturn typeof value === 'string';\n\n\t\tcase 'boolean':\n\t\t\treturn typeof value === 'boolean';\n\n\t\tcase 'object':\n\t\t\treturn !! value && value.constructor === Object;\n\n\t\tcase 'null':\n\t\t\treturn value === null;\n\n\t\tcase 'array':\n\t\t\treturn Array.isArray( value );\n\n\t\tcase 'integer':\n\t\tcase 'number':\n\t\t\treturn typeof value === 'number';\n\t}\n\n\treturn true;\n}\n\n/**\n * Returns true if value is of an array of given JSON schema types, or false\n * otherwise.\n *\n * @see http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.25\n *\n * @param {*}        value Value to test.\n * @param {string[]} types Types to test.\n *\n * @return {boolean} Whether value is of types.\n */\nexport function isOfTypes( value, types ) {\n\treturn types.some( ( type ) => isOfType( value, type ) );\n}\n\n/**\n * Returns true if value is valid per the given block attribute schema type\n * definition, or false otherwise.\n *\n * @see https://json-schema.org/latest/json-schema-validation.html#rfc.section.6.1.1\n *\n * @param {*}                       value Value to test.\n * @param {?(Array<string>|string)} type  Block attribute schema type.\n *\n * @return {boolean} Whether value is valid.\n */\nexport function isValidByType( value, type ) {\n\treturn type === undefined || isOfTypes( value, castArray( type ) );\n}\n\n/**\n * Returns true if value is valid per the given block attribute schema enum\n * definition, or false otherwise.\n *\n * @see https://json-schema.org/latest/json-schema-validation.html#rfc.section.6.1.2\n *\n * @param {*}      value   Value to test.\n * @param {?Array} enumSet Block attribute schema enum.\n *\n * @return {boolean} Whether value is valid.\n */\nexport function isValidByEnum( value, enumSet ) {\n\treturn ! Array.isArray( enumSet ) || enumSet.includes( value );\n}\n\n/**\n * Returns true if the given attribute schema describes a value which may be\n * an ambiguous string.\n *\n * Some sources are ambiguously serialized as strings, for which value casting\n * is enabled. This is only possible when a singular type is assigned to the\n * attribute schema, since the string ambiguity makes it impossible to know the\n * correct type of multiple to which to cast.\n *\n * @param {Object} attributeSchema Attribute's schema.\n *\n * @return {boolean} Whether attribute schema defines an ambiguous string\n *                   source.\n */\nexport function isAmbiguousStringSource( attributeSchema ) {\n\tconst { source, type } = attributeSchema;\n\n\tconst isStringSource = STRING_SOURCES.has( source );\n\tconst isSingleType = typeof type === 'string';\n\n\treturn isStringSource && isSingleType;\n}\n\n/**\n * Returns an hpq matcher given a source object.\n *\n * @param {Object} sourceConfig Attribute Source object.\n *\n * @return {Function} A hpq Matcher.\n */\nexport function matcherFromSource( sourceConfig ) {\n\tswitch ( sourceConfig.source ) {\n\t\tcase 'attribute':\n\t\t\tlet matcher = attr( sourceConfig.selector, sourceConfig.attribute );\n\t\t\tif ( sourceConfig.type === 'boolean' ) {\n\t\t\t\tmatcher = toBooleanAttributeMatcher( matcher );\n\t\t\t}\n\n\t\t\treturn matcher;\n\t\tcase 'html':\n\t\t\treturn html( sourceConfig.selector, sourceConfig.multiline );\n\t\tcase 'text':\n\t\t\treturn text( sourceConfig.selector );\n\t\tcase 'children':\n\t\t\treturn children( sourceConfig.selector );\n\t\tcase 'node':\n\t\t\treturn node( sourceConfig.selector );\n\t\tcase 'query':\n\t\t\tconst subMatchers = mapValues(\n\t\t\t\tsourceConfig.query,\n\t\t\t\tmatcherFromSource\n\t\t\t);\n\t\t\treturn query( sourceConfig.selector, subMatchers );\n\t\tcase 'tag':\n\t\t\treturn flow( [\n\t\t\t\tprop( sourceConfig.selector, 'nodeName' ),\n\t\t\t\t( nodeName ) =>\n\t\t\t\t\tnodeName ? nodeName.toLowerCase() : undefined,\n\t\t\t] );\n\t\tdefault:\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error( `Unknown source type \"${ sourceConfig.source }\"` );\n\t}\n}\n\n/**\n * Given a block's raw content and an attribute's schema returns the attribute's\n * value depending on its source.\n *\n * @param {string} innerHTML       Block's raw content.\n * @param {Object} attributeSchema Attribute's schema.\n *\n * @return {*} Attribute value.\n */\nexport function parseWithAttributeSchema( innerHTML, attributeSchema ) {\n\treturn hpqParse( innerHTML, matcherFromSource( attributeSchema ) );\n}\n\n/**\n * Given an attribute key, an attribute's schema, a block's raw content and the\n * commentAttributes returns the attribute value depending on its source\n * definition of the given attribute key.\n *\n * @param {string} attributeKey      Attribute key.\n * @param {Object} attributeSchema   Attribute's schema.\n * @param {string} innerHTML         Block's raw content.\n * @param {Object} commentAttributes Block's comment attributes.\n *\n * @return {*} Attribute value.\n */\nexport function getBlockAttribute(\n\tattributeKey,\n\tattributeSchema,\n\tinnerHTML,\n\tcommentAttributes\n) {\n\tconst { type, enum: enumSet } = attributeSchema;\n\tlet value;\n\n\tswitch ( attributeSchema.source ) {\n\t\t// An undefined source means that it's an attribute serialized to the\n\t\t// block's \"comment\".\n\t\tcase undefined:\n\t\t\tvalue = commentAttributes\n\t\t\t\t? commentAttributes[ attributeKey ]\n\t\t\t\t: undefined;\n\t\t\tbreak;\n\t\tcase 'attribute':\n\t\tcase 'property':\n\t\tcase 'html':\n\t\tcase 'text':\n\t\tcase 'children':\n\t\tcase 'node':\n\t\tcase 'query':\n\t\tcase 'tag':\n\t\t\tvalue = parseWithAttributeSchema( innerHTML, attributeSchema );\n\t\t\tbreak;\n\t}\n\n\tif ( ! isValidByType( value, type ) || ! isValidByEnum( value, enumSet ) ) {\n\t\t// Reject the value if it is not valid. Reverting to the undefined\n\t\t// value ensures the default is respected, if applicable.\n\t\tvalue = undefined;\n\t}\n\n\tif ( value === undefined ) {\n\t\treturn attributeSchema.default;\n\t}\n\n\treturn value;\n}\n\n/**\n * Returns the block attributes of a registered block node given its type.\n *\n * @param {string|Object} blockTypeOrName Block type or name.\n * @param {string}        innerHTML       Raw block content.\n * @param {?Object}       attributes      Known block attributes (from delimiters).\n *\n * @return {Object} All block attributes.\n */\nexport function getBlockAttributes(\n\tblockTypeOrName,\n\tinnerHTML,\n\tattributes = {}\n) {\n\tconst blockType = normalizeBlockType( blockTypeOrName );\n\tconst blockAttributes = mapValues(\n\t\tblockType.attributes,\n\t\t( attributeSchema, attributeKey ) => {\n\t\t\treturn getBlockAttribute(\n\t\t\t\tattributeKey,\n\t\t\t\tattributeSchema,\n\t\t\t\tinnerHTML,\n\t\t\t\tattributes\n\t\t\t);\n\t\t}\n\t);\n\n\treturn applyFilters(\n\t\t'blocks.getBlockAttributes',\n\t\tblockAttributes,\n\t\tblockType,\n\t\tinnerHTML,\n\t\tattributes\n\t);\n}\n\n/**\n * Given a block object, returns a new copy of the block with any applicable\n * deprecated migrations applied, or the original block if it was both valid\n * and no eligible migrations exist.\n *\n * @param {WPBlock} block            Original block object.\n * @param {Object}  parsedAttributes Attributes as parsed from the initial\n *                                   block markup.\n *\n * @return {WPBlock} Migrated block object.\n */\nexport function getMigratedBlock( block, parsedAttributes ) {\n\tconst blockType = getBlockType( block.name );\n\n\tconst { deprecated: deprecatedDefinitions } = blockType;\n\t// Bail early if there are no registered deprecations to be handled.\n\tif ( ! deprecatedDefinitions || ! deprecatedDefinitions.length ) {\n\t\treturn block;\n\t}\n\n\tconst { originalContent, innerBlocks } = block;\n\n\t// By design, blocks lack any sort of version tracking. Instead, to process\n\t// outdated content the system operates a queue out of all the defined\n\t// attribute shapes and tries each definition until the input produces a\n\t// valid result. This mechanism seeks to avoid polluting the user-space with\n\t// machine-specific code. An invalid block is thus a block that could not be\n\t// matched successfully with any of the registered deprecation definitions.\n\tfor ( let i = 0; i < deprecatedDefinitions.length; i++ ) {\n\t\t// A block can opt into a migration even if the block is valid by\n\t\t// defining `isEligible` on its deprecation. If the block is both valid\n\t\t// and does not opt to migrate, skip.\n\t\tconst { isEligible = stubFalse } = deprecatedDefinitions[ i ];\n\t\tif ( block.isValid && ! isEligible( parsedAttributes, innerBlocks ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Block type properties which could impact either serialization or\n\t\t// parsing are not considered in the deprecated block type by default,\n\t\t// and must be explicitly provided.\n\t\tconst deprecatedBlockType = Object.assign(\n\t\t\tomit( blockType, DEPRECATED_ENTRY_KEYS ),\n\t\t\tdeprecatedDefinitions[ i ]\n\t\t);\n\n\t\tlet migratedAttributes = getBlockAttributes(\n\t\t\tdeprecatedBlockType,\n\t\t\toriginalContent,\n\t\t\tparsedAttributes\n\t\t);\n\n\t\t// Ignore the deprecation if it produces a block which is not valid.\n\t\tconst { isValid, validationIssues } = getBlockContentValidationResult(\n\t\t\tdeprecatedBlockType,\n\t\t\tmigratedAttributes,\n\t\t\toriginalContent\n\t\t);\n\n\t\t// An invalid block does not imply incorrect HTML but the fact block\n\t\t// source information could be lost on reserialization.\n\t\tif ( ! isValid ) {\n\t\t\tblock = {\n\t\t\t\t...block,\n\t\t\t\tvalidationIssues: [\n\t\t\t\t\t...get( block, 'validationIssues', [] ),\n\t\t\t\t\t...validationIssues,\n\t\t\t\t],\n\t\t\t};\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet migratedInnerBlocks = innerBlocks;\n\n\t\t// A block may provide custom behavior to assign new attributes and/or\n\t\t// inner blocks.\n\t\tconst { migrate } = deprecatedBlockType;\n\t\tif ( migrate ) {\n\t\t\t[\n\t\t\t\tmigratedAttributes = parsedAttributes,\n\t\t\t\tmigratedInnerBlocks = innerBlocks,\n\t\t\t] = castArray( migrate( migratedAttributes, innerBlocks ) );\n\t\t}\n\n\t\tblock = {\n\t\t\t...block,\n\t\t\tattributes: migratedAttributes,\n\t\t\tinnerBlocks: migratedInnerBlocks,\n\t\t\tisValid: true,\n\t\t};\n\t}\n\n\treturn block;\n}\n\n/**\n * Convert legacy blocks to their canonical form. This function is used\n * both in the parser level for previous content and to convert such blocks\n * used in Custom Post Types templates.\n *\n * @param {string} name       The block's name\n * @param {Object} attributes The block's attributes\n *\n * @return {Object} The block's name and attributes, changed accordingly if a match was found\n */\nexport function convertLegacyBlocks( name, attributes ) {\n\tconst newAttributes = { ...attributes };\n\t// Convert 'core/cover-image' block in existing content to 'core/cover'.\n\tif ( 'core/cover-image' === name ) {\n\t\tname = 'core/cover';\n\t}\n\n\t// Convert 'core/text' blocks in existing content to 'core/paragraph'.\n\tif ( 'core/text' === name || 'core/cover-text' === name ) {\n\t\tname = 'core/paragraph';\n\t}\n\n\t// Convert derivative blocks such as 'core/social-link-wordpress' to the\n\t// canonical form 'core/social-link'.\n\tif ( name && name.indexOf( 'core/social-link-' ) === 0 ) {\n\t\t// Capture `social-link-wordpress` into `{\"service\":\"wordpress\"}`\n\t\tnewAttributes.service = name.substring( 17 );\n\t\tname = 'core/social-link';\n\t}\n\n\t// Convert derivative blocks such as 'core-embed/instagram' to the\n\t// canonical form 'core/embed'.\n\tif ( name && name.indexOf( 'core-embed/' ) === 0 ) {\n\t\t// Capture `core-embed/instagram` into `{\"providerNameSlug\":\"instagram\"}`\n\t\tconst providerSlug = name.substring( 11 );\n\t\tconst deprecated = {\n\t\t\tspeaker: 'speaker-deck',\n\t\t\tpolldaddy: 'crowdsignal',\n\t\t};\n\t\tnewAttributes.providerNameSlug =\n\t\t\tproviderSlug in deprecated\n\t\t\t\t? deprecated[ providerSlug ]\n\t\t\t\t: providerSlug;\n\t\t// this is needed as the `responsive` attribute was passed\n\t\t// in a different way before the refactoring to block variations\n\t\tif ( ! [ 'amazon-kindle', 'wordpress' ].includes( providerSlug ) ) {\n\t\t\tnewAttributes.responsive = true;\n\t\t}\n\t\tname = 'core/embed';\n\t}\n\n\t// Convert 'core/query-loop' blocks in existing content to 'core/post-template'.\n\t// TODO: Remove this check when WordPress 5.9 is released.\n\tif ( name === 'core/query-loop' ) {\n\t\tname = 'core/post-template';\n\t}\n\treturn { name, attributes: newAttributes };\n}\n\n/**\n * Creates a block with fallback to the unknown type handler.\n *\n * @param {Object} blockNode Parsed block node.\n *\n * @return {?Object} An initialized block object (if possible).\n */\nexport function createBlockWithFallback( blockNode ) {\n\tconst { blockName: originalName } = blockNode;\n\n\t// The fundamental structure of a blocktype includes its attributes, inner\n\t// blocks, and inner HTML. It is important to distinguish inner blocks from\n\t// the HTML content of the block as only the latter is relevant for block\n\t// validation and edit operations.\n\tlet { attrs: attributes, innerBlocks = [], innerHTML } = blockNode;\n\tconst { innerContent } = blockNode;\n\n\t// Blocks that don't have a registered handler are considered freeform.\n\tconst freeformContentFallbackBlock = getFreeformContentHandlerName();\n\tconst unregisteredFallbackBlock =\n\t\tgetUnregisteredTypeHandlerName() || freeformContentFallbackBlock;\n\n\tattributes = attributes || {};\n\n\t// Trim content to avoid creation of intermediary freeform segments.\n\tinnerHTML = innerHTML.trim();\n\n\t// Use type from block content if available. Otherwise, default to the\n\t// freeform content fallback.\n\tlet name = originalName || freeformContentFallbackBlock;\n\n\t( { name, attributes } = convertLegacyBlocks( name, attributes ) );\n\n\t// Fallback content may be upgraded from classic content expecting implicit\n\t// automatic paragraphs, so preserve them. Assumes wpautop is idempotent,\n\t// meaning there are no negative consequences to repeated autop calls.\n\tif ( name === freeformContentFallbackBlock ) {\n\t\tinnerHTML = autop( innerHTML ).trim();\n\t}\n\n\t// Try finding the type for known block name, else fall back again.\n\tlet blockType = getBlockType( name );\n\n\tif ( ! blockType ) {\n\t\t// Since the constituents of the block node are extracted at the start\n\t\t// of the present function, construct a new object rather than reuse\n\t\t// `blockNode`.\n\t\tconst reconstitutedBlockNode = {\n\t\t\tattrs: attributes,\n\t\t\tblockName: originalName,\n\t\t\tinnerBlocks,\n\t\t\tinnerContent,\n\t\t};\n\n\t\t// Preserve undelimited content for use by the unregistered type\n\t\t// handler. A block node's `innerHTML` isn't enough, as that field only\n\t\t// carries the block's own HTML and not its nested blocks.\n\t\tconst originalUndelimitedContent = serializeBlockNode(\n\t\t\treconstitutedBlockNode,\n\t\t\t{\n\t\t\t\tisCommentDelimited: false,\n\t\t\t}\n\t\t);\n\n\t\t// Preserve full block content for use by the unregistered type\n\t\t// handler, block boundaries included.\n\t\tconst originalContent = serializeBlockNode( reconstitutedBlockNode, {\n\t\t\tisCommentDelimited: true,\n\t\t} );\n\n\t\t// If detected as a block which is not registered, preserve comment\n\t\t// delimiters in content of unregistered type handler.\n\t\tif ( name ) {\n\t\t\tinnerHTML = originalContent;\n\t\t}\n\n\t\tname = unregisteredFallbackBlock;\n\t\tattributes = {\n\t\t\toriginalName,\n\t\t\toriginalContent,\n\t\t\toriginalUndelimitedContent,\n\t\t};\n\t\tblockType = getBlockType( name );\n\t}\n\n\t// Coerce inner blocks from parsed form to canonical form.\n\tinnerBlocks = innerBlocks.map( createBlockWithFallback );\n\n\t// Remove `undefined` innerBlocks.\n\t//\n\t// This is a temporary fix to prevent unrecoverable TypeErrors when handling unexpectedly\n\t// empty freeform block nodes. See https://github.com/WordPress/gutenberg/pull/17164.\n\tinnerBlocks = innerBlocks.filter( ( innerBlock ) => innerBlock );\n\n\tconst isFallbackBlock =\n\t\tname === freeformContentFallbackBlock ||\n\t\tname === unregisteredFallbackBlock;\n\n\t// Include in set only if type was determined.\n\tif ( ! blockType || ( ! innerHTML && isFallbackBlock ) ) {\n\t\treturn;\n\t}\n\n\tlet block = createBlock(\n\t\tname,\n\t\tgetBlockAttributes( blockType, innerHTML, attributes ),\n\t\tinnerBlocks\n\t);\n\n\t// Block validation assumes an idempotent operation from source block to serialized block\n\t// provided there are no changes in attributes. The validation procedure thus compares the\n\t// provided source value with the serialized output before there are any modifications to\n\t// the block. When both match, the block is marked as valid.\n\tif ( ! isFallbackBlock ) {\n\t\tconst { isValid, validationIssues } = getBlockContentValidationResult(\n\t\t\tblockType,\n\t\t\tblock.attributes,\n\t\t\tinnerHTML\n\t\t);\n\t\tblock.isValid = isValid;\n\t\tblock.validationIssues = validationIssues;\n\t}\n\n\t// Preserve original content for future use in case the block is parsed\n\t// as invalid, or future serialization attempt results in an error.\n\tblock.originalContent = block.originalContent || innerHTML;\n\n\t// Ensure all necessary migrations are applied to the block.\n\tblock = getMigratedBlock( block, attributes );\n\n\tif ( block.validationIssues && block.validationIssues.length > 0 ) {\n\t\tif ( block.isValid ) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.info(\n\t\t\t\t'Block successfully updated for `%s` (%o).\\n\\nNew content generated by `save` function:\\n\\n%s\\n\\nContent retrieved from post body:\\n\\n%s',\n\t\t\t\tblockType.name,\n\t\t\t\tblockType,\n\t\t\t\tgetSaveContent( blockType, block.attributes ),\n\t\t\t\tblock.originalContent\n\t\t\t);\n\t\t} else {\n\t\t\tblock.validationIssues.forEach( ( { log, args } ) =>\n\t\t\t\tlog( ...args )\n\t\t\t);\n\t\t}\n\t}\n\n\treturn block;\n}\n\n/**\n * Serializes a block node into the native HTML-comment-powered block format.\n * CAVEAT: This function is intended for reserializing blocks as parsed by\n * valid parsers and skips any validation steps. This is NOT a generic\n * serialization function for in-memory blocks. For most purposes, see the\n * following functions available in the `@wordpress/blocks` package:\n *\n * @see serializeBlock\n * @see serialize\n *\n * For more on the format of block nodes as returned by valid parsers:\n *\n * @see `@wordpress/block-serialization-default-parser` package\n * @see `@wordpress/block-serialization-spec-parser` package\n *\n * @param {Object}   blockNode                  A block node as returned by a valid parser.\n * @param {?Object}  options                    Serialization options.\n * @param {?boolean} options.isCommentDelimited Whether to output HTML comments around blocks.\n *\n * @return {string} An HTML string representing a block.\n */\nexport function serializeBlockNode( blockNode, options = {} ) {\n\tconst { isCommentDelimited = true } = options;\n\tconst {\n\t\tblockName,\n\t\tattrs = {},\n\t\tinnerBlocks = [],\n\t\tinnerContent = [],\n\t} = blockNode;\n\n\tlet childIndex = 0;\n\tconst content = innerContent\n\t\t.map( ( item ) =>\n\t\t\t// `null` denotes a nested block, otherwise we have an HTML fragment.\n\t\t\titem !== null\n\t\t\t\t? item\n\t\t\t\t: serializeBlockNode( innerBlocks[ childIndex++ ], options )\n\t\t)\n\t\t.join( '\\n' )\n\t\t.replace( /\\n+/g, '\\n' )\n\t\t.trim();\n\n\treturn isCommentDelimited\n\t\t? getCommentDelimitedContent( blockName, attrs, content )\n\t\t: content;\n}\n\n/**\n * Creates a parse implementation for the post content which returns a list of blocks.\n *\n * @param {Function} parseImplementation Parse implementation.\n *\n * @return {Function} An implementation which parses the post content.\n */\nconst createParse = ( parseImplementation ) => ( content ) =>\n\tparseImplementation( content ).reduce( ( accumulator, blockNode ) => {\n\t\tconst block = createBlockWithFallback( blockNode );\n\t\tif ( block ) {\n\t\t\taccumulator.push( block );\n\t\t}\n\t\treturn accumulator;\n\t}, [] );\n\n/**\n * Utilizes an optimized token-driven parser based on the Gutenberg grammar spec\n * defined through a parsing expression grammar to take advantage of the regular\n * cadence provided by block delimiters -- composed syntactically through HTML\n * comments -- which, given a general HTML document as an input, returns a block\n * list array representation.\n *\n * This is a recursive-descent parser that scans linearly once through the input\n * document. Instead of directly recursing it utilizes a trampoline mechanism to\n * prevent stack overflow. This initial pass is mainly interested in separating\n * and isolating the blocks serialized in the document and manifestly not in the\n * content within the blocks.\n *\n * @see\n * https://developer.wordpress.org/block-editor/packages/packages-block-serialization-default-parser/\n *\n * @param {string} content The post content.\n *\n * @return {Array} Block list.\n */\nexport const parseWithGrammar = createParse( defaultParse );\n\nexport default parseWithGrammar;\n"]}