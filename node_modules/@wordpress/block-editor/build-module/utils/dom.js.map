{"version":3,"sources":["@wordpress/block-editor/src/utils/dom.js"],"names":["BLOCK_SELECTOR","isInSameBlock","a","b","closest","isInsideRootBlock","blockElement","element","parentBlock","getBlockClientId","node","nodeType","ELEMENT_NODE","parentNode","elementNode","blockNode","id","slice","length"],"mappings":"AAAA,MAAMA,cAAc,GAAG,iCAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA+B;AACrC,SAAOD,CAAC,CAACE,OAAF,CAAWJ,cAAX,MAAgCG,CAAC,CAACC,OAAF,CAAWJ,cAAX,CAAvC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,iBAAT,CAA4BC,YAA5B,EAA0CC,OAA1C,EAAoD;AAC1D,QAAMC,WAAW,GAAGD,OAAO,CAACH,OAAR,CAAiBJ,cAAjB,CAApB;AACA,SAAOQ,WAAW,KAAKF,YAAvB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,gBAAT,CAA2BC,IAA3B,EAAkC;AACxC,SAAQA,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkBD,IAAI,CAACE,YAAvC,EAAsD;AACrDF,IAAAA,IAAI,GAAGA,IAAI,CAACG,UAAZ;AACA;;AAED,MAAK,CAAEH,IAAP,EAAc;AACb;AACA;;AAED,QAAMI,WAAW;AAAG;AAAyBJ,EAAAA,IAA7C;AACA,QAAMK,SAAS,GAAGD,WAAW,CAACV,OAAZ,CAAqBJ,cAArB,CAAlB;;AAEA,MAAK,CAAEe,SAAP,EAAmB;AAClB;AACA;;AAED,SAAOA,SAAS,CAACC,EAAV,CAAaC,KAAb,CAAoB,SAASC,MAA7B,CAAP;AACA","sourcesContent":["const BLOCK_SELECTOR = '.block-editor-block-list__block';\n\n/**\n * Returns true if two elements are contained within the same block.\n *\n * @param {Element} a First element.\n * @param {Element} b Second element.\n *\n * @return {boolean} Whether elements are in the same block.\n */\nexport function isInSameBlock( a, b ) {\n\treturn a.closest( BLOCK_SELECTOR ) === b.closest( BLOCK_SELECTOR );\n}\n\n/**\n * Returns true if an element is considered part of the block and not its\n * children.\n *\n * @param {Element} blockElement Block container element.\n * @param {Element} element      Element.\n *\n * @return {boolean} Whether element is in the block Element but not its\n *                   children.\n */\nexport function isInsideRootBlock( blockElement, element ) {\n\tconst parentBlock = element.closest( BLOCK_SELECTOR );\n\treturn parentBlock === blockElement;\n}\n\n/**\n * Finds the block client ID given any DOM node inside the block.\n *\n * @param {Node?} node DOM node.\n *\n * @return {string|undefined} Client ID or undefined if the node is not part of\n *                            a block.\n */\nexport function getBlockClientId( node ) {\n\twhile ( node && node.nodeType !== node.ELEMENT_NODE ) {\n\t\tnode = node.parentNode;\n\t}\n\n\tif ( ! node ) {\n\t\treturn;\n\t}\n\n\tconst elementNode = /** @type {Element} */ ( node );\n\tconst blockNode = elementNode.closest( BLOCK_SELECTOR );\n\n\tif ( ! blockNode ) {\n\t\treturn;\n\t}\n\n\treturn blockNode.id.slice( 'block-'.length );\n}\n"]}