{"version":3,"sources":["@wordpress/block-editor/src/utils/transform-styles/transforms/url-rewrite.js"],"names":["isRemotePath","filePath","test","isAbsolutePath","isValidURL","meta","value","indexOf","getResourcePath","str","baseURL","URL","toString","processURL","newUrl","before","quote","after","getURLs","reg","match","URLs","exec","source","push","replaceURLs","raw","forEach","item","replace","rewrite","rootURL","node","type","updatedURLs","map"],"mappings":"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","sourcesContent":["/**\n * Return `true` if the given path is http/https.\n *\n * @param {string} filePath path\n *\n * @return {boolean} is remote path.\n */\nfunction isRemotePath( filePath ) {\n\treturn /^(?:https?:)?\\/\\//.test( filePath );\n}\n\n/**\n * Return `true` if the given filePath is an absolute url.\n *\n * @param {string} filePath path\n *\n * @return {boolean} is absolute path.\n */\nfunction isAbsolutePath( filePath ) {\n\treturn /^\\/(?!\\/)/.test( filePath );\n}\n\n/**\n * Whether or not the url should be inluded.\n *\n * @param {Object} meta url meta info\n *\n * @return {boolean} is valid.\n */\nfunction isValidURL( meta ) {\n\t// ignore hashes or data uris\n\tif (\n\t\tmeta.value.indexOf( 'data:' ) === 0 ||\n\t\tmeta.value.indexOf( '#' ) === 0\n\t) {\n\t\treturn false;\n\t}\n\n\tif ( isAbsolutePath( meta.value ) ) {\n\t\treturn false;\n\t}\n\n\t// do not handle the http/https urls if `includeRemote` is false\n\tif ( isRemotePath( meta.value ) ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Get the absolute path of the url, relative to the basePath\n *\n * @param {string} str     the url\n * @param {string} baseURL base URL\n *\n * @return {string} the full path to the file\n */\nfunction getResourcePath( str, baseURL ) {\n\treturn new URL( str, baseURL ).toString();\n}\n\n/**\n * Process the single `url()` pattern\n *\n * @param {string} baseURL the base URL for relative URLs.\n *\n * @return {Promise} the Promise.\n */\nfunction processURL( baseURL ) {\n\treturn ( meta ) => ( {\n\t\t...meta,\n\t\tnewUrl:\n\t\t\t'url(' +\n\t\t\tmeta.before +\n\t\t\tmeta.quote +\n\t\t\tgetResourcePath( meta.value, baseURL ) +\n\t\t\tmeta.quote +\n\t\t\tmeta.after +\n\t\t\t')',\n\t} );\n}\n\n/**\n * Get all `url()`s, and return the meta info\n *\n * @param {string} value decl.value.\n *\n * @return {Array} the urls.\n */\nfunction getURLs( value ) {\n\tconst reg = /url\\((\\s*)(['\"]?)(.+?)\\2(\\s*)\\)/g;\n\tlet match;\n\tconst URLs = [];\n\n\twhile ( ( match = reg.exec( value ) ) !== null ) {\n\t\tconst meta = {\n\t\t\tsource: match[ 0 ],\n\t\t\tbefore: match[ 1 ],\n\t\t\tquote: match[ 2 ],\n\t\t\tvalue: match[ 3 ],\n\t\t\tafter: match[ 4 ],\n\t\t};\n\t\tif ( isValidURL( meta ) ) {\n\t\t\tURLs.push( meta );\n\t\t}\n\t}\n\treturn URLs;\n}\n\n/**\n * Replace the raw value's `url()` segment to the new value\n *\n * @param {string} raw  the raw value.\n * @param {Array}  URLs the URLs to replace.\n *\n * @return {string} the new value.\n */\nfunction replaceURLs( raw, URLs ) {\n\tURLs.forEach( ( item ) => {\n\t\traw = raw.replace( item.source, item.newUrl );\n\t} );\n\n\treturn raw;\n}\n\nconst rewrite = ( rootURL ) => ( node ) => {\n\tif ( node.type === 'declaration' ) {\n\t\tconst updatedURLs = getURLs( node.value ).map( processURL( rootURL ) );\n\t\treturn {\n\t\t\t...node,\n\t\t\tvalue: replaceURLs( node.value, updatedURLs ),\n\t\t};\n\t}\n\n\treturn node;\n};\n\nexport default rewrite;\n"]}