{"version":3,"sources":["@wordpress/block-editor/src/hooks/spacing.js"],"names":["PanelBody","Platform","__","getBlockSupport","InspectorControls","MarginEdit","hasMarginSupport","useIsMarginDisabled","PaddingEdit","hasPaddingSupport","useIsPaddingDisabled","SPACING_SUPPORT_KEY","SpacingPanel","props","isDisabled","useIsSpacingDisabled","isSupported","hasSpacingSupport","name","blockName","OS","paddingDisabled","marginDisabled","useCustomSides","feature","support"],"mappings":";;AAAA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,uBAA1B;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,EAAT,QAAmB,iBAAnB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA;AACA;AACA;;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,mBAAvC,QAAkE,UAAlE;AACA,SACCC,WADD,EAECC,iBAFD,EAGCC,oBAHD,QAIO,WAJP;AAMA,OAAO,MAAMC,mBAAmB,GAAG,SAA5B;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAuBC,KAAvB,EAA+B;AACrC,QAAMC,UAAU,GAAGC,oBAAoB,CAAEF,KAAF,CAAvC;AACA,QAAMG,WAAW,GAAGC,iBAAiB,CAAEJ,KAAK,CAACK,IAAR,CAArC;;AAEA,MAAKJ,UAAU,IAAI,CAAEE,WAArB,EAAmC;AAClC,WAAO,IAAP;AACA;;AAED,SACC,cAAC,iBAAD;AAAmB,IAAA,GAAG,EAAC;AAAvB,KACC,cAAC,SAAD;AAAW,IAAA,KAAK,EAAGd,EAAE,CAAE,SAAF;AAArB,KACC,cAAC,WAAD,EAAkBW,KAAlB,CADD,EAEC,cAAC,UAAD,EAAiBA,KAAjB,CAFD,CADD,CADD;AAQA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,iBAAT,CAA4BE,SAA5B,EAAwC;AAC9C,MAAKlB,QAAQ,CAACmB,EAAT,KAAgB,KAArB,EAA6B;AAC5B,WAAO,KAAP;AACA;;AAED,SAAOX,iBAAiB,CAAEU,SAAF,CAAjB,IAAkCb,gBAAgB,CAAEa,SAAF,CAAzD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMJ,oBAAoB,GAAG,CAAEF,KAAK,GAAG,EAAV,KAAkB;AAC9C,QAAMQ,eAAe,GAAGX,oBAAoB,CAAEG,KAAF,CAA5C;AACA,QAAMS,cAAc,GAAGf,mBAAmB,CAAEM,KAAF,CAA1C;AAEA,SAAOQ,eAAe,IAAIC,cAA1B;AACA,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASC,cAAT,CAAyBJ,SAAzB,EAAoCK,OAApC,EAA8C;AACpD,QAAMC,OAAO,GAAGtB,eAAe,CAAEgB,SAAF,EAAaR,mBAAb,CAA/B,CADoD,CAGpD;;AACA,MAAK,OAAOc,OAAO,CAAED,OAAF,CAAd,KAA8B,SAAnC,EAA+C;AAC9C;AACA;;AAED,SAAOC,OAAO,CAAED,OAAF,CAAd;AACA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { PanelBody } from '@wordpress/components';\nimport { Platform } from '@wordpress/element';\nimport { __ } from '@wordpress/i18n';\nimport { getBlockSupport } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport InspectorControls from '../components/inspector-controls';\nimport { MarginEdit, hasMarginSupport, useIsMarginDisabled } from './margin';\nimport {\n\tPaddingEdit,\n\thasPaddingSupport,\n\tuseIsPaddingDisabled,\n} from './padding';\n\nexport const SPACING_SUPPORT_KEY = 'spacing';\n\n/**\n * Inspector controls for spacing support.\n *\n * @param {Object} props Block props.\n *\n * @return {WPElement} Inspector controls for spacing support features.\n */\nexport function SpacingPanel( props ) {\n\tconst isDisabled = useIsSpacingDisabled( props );\n\tconst isSupported = hasSpacingSupport( props.name );\n\n\tif ( isDisabled || ! isSupported ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<InspectorControls key=\"spacing\">\n\t\t\t<PanelBody title={ __( 'Spacing' ) }>\n\t\t\t\t<PaddingEdit { ...props } />\n\t\t\t\t<MarginEdit { ...props } />\n\t\t\t</PanelBody>\n\t\t</InspectorControls>\n\t);\n}\n\n/**\n * Determine whether there is block support for padding or margins.\n *\n * @param {string} blockName Block name.\n *\n * @return {boolean} Whether there is support.\n */\nexport function hasSpacingSupport( blockName ) {\n\tif ( Platform.OS !== 'web' ) {\n\t\treturn false;\n\t}\n\n\treturn hasPaddingSupport( blockName ) || hasMarginSupport( blockName );\n}\n\n/**\n * Determines whether spacing support has been disabled.\n *\n * @param {Object} props Block properties.\n *\n * @return {boolean} If spacing support is completely disabled.\n */\nconst useIsSpacingDisabled = ( props = {} ) => {\n\tconst paddingDisabled = useIsPaddingDisabled( props );\n\tconst marginDisabled = useIsMarginDisabled( props );\n\n\treturn paddingDisabled && marginDisabled;\n};\n\n/**\n * Custom hook to retrieve which padding/margin is supported\n * e.g. top, right, bottom or left.\n *\n * Sides are opted into by default. It is only if a specific side is set to\n * false that it is omitted.\n *\n * @param {string} blockName Block name.\n * @param {string} feature   The feature custom sides relate to e.g. padding or margins.\n *\n * @return {Object} Sides supporting custom margin.\n */\nexport function useCustomSides( blockName, feature ) {\n\tconst support = getBlockSupport( blockName, SPACING_SUPPORT_KEY );\n\n\t// Skip when setting is boolean as theme isn't setting arbitrary sides.\n\tif ( typeof support[ feature ] === 'boolean' ) {\n\t\treturn;\n\t}\n\n\treturn support[ feature ];\n}\n"]}