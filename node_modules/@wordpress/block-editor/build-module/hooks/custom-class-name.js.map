{"version":3,"sources":["@wordpress/block-editor/src/hooks/custom-class-name.js"],"names":["difference","omit","classnames","addFilter","TextControl","__","hasBlockSupport","parseWithAttributeSchema","getSaveContent","createHigherOrderComponent","InspectorAdvancedControls","addAttribute","settings","attributes","className","type","withInspectorControl","BlockEdit","props","hasCustomClassName","name","isSelected","nextValue","setAttributes","undefined","addSaveProps","extraProps","blockType","getHTMLRootElementClasses","innerHTML","parsed","source","selector","attribute","trim","split","addParsedDifference","blockAttributes","attributesSansClassName","serialized","defaultClasses","actualClasses","customClasses","length","join"],"mappings":";;AAAA;AACA;AACA;AACA,SAASA,UAAT,EAAqBC,IAArB,QAAiC,QAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA;AACA;AACA;;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,EAAT,QAAmB,iBAAnB;AACA,SACCC,eADD,EAECC,wBAFD,EAGCC,cAHD,QAIO,mBAJP;AAKA,SAASC,0BAAT,QAA2C,oBAA3C;AAEA;AACA;AACA;;AACA,SAASC,yBAAT,QAA0C,eAA1C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAuBC,QAAvB,EAAkC;AACxC,MAAKN,eAAe,CAAEM,QAAF,EAAY,iBAAZ,EAA+B,IAA/B,CAApB,EAA4D;AAC3D;AACAA,IAAAA,QAAQ,CAACC,UAAT,GAAsB,EACrB,GAAGD,QAAQ,CAACC,UADS;AAErBC,MAAAA,SAAS,EAAE;AACVC,QAAAA,IAAI,EAAE;AADI;AAFU,KAAtB;AAMA;;AAED,SAAOH,QAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,oBAAoB,GAAGP,0BAA0B,CAC3DQ,SAAF,IAAiB;AAChB,SAASC,KAAF,IAAa;AACnB,UAAMC,kBAAkB,GAAGb,eAAe,CACzCY,KAAK,CAACE,IADmC,EAEzC,iBAFyC,EAGzC,IAHyC,CAA1C;;AAKA,QAAKD,kBAAkB,IAAID,KAAK,CAACG,UAAjC,EAA8C;AAC7C,aACC,8BACC,cAAC,SAAD,EAAgBH,KAAhB,CADD,EAEC,cAAC,yBAAD,QACC,cAAC,WAAD;AACC,QAAA,YAAY,EAAC,KADd;AAEC,QAAA,KAAK,EAAGb,EAAE,CAAE,0BAAF,CAFX;AAGC,QAAA,KAAK,EAAGa,KAAK,CAACL,UAAN,CAAiBC,SAAjB,IAA8B,EAHvC;AAIC,QAAA,QAAQ,EAAKQ,SAAF,IAAiB;AAC3BJ,UAAAA,KAAK,CAACK,aAAN,CAAqB;AACpBT,YAAAA,SAAS,EACRQ,SAAS,KAAK,EAAd,GACGA,SADH,GAEGE;AAJgB,WAArB;AAMA,SAXF;AAYC,QAAA,IAAI,EAAGnB,EAAE,CACR,wCADQ;AAZV,QADD,CAFD,CADD;AAuBA;;AAED,WAAO,cAAC,SAAD,EAAgBa,KAAhB,CAAP;AACA,GAjCD;AAkCA,CApC4D,EAqC7D,sBArC6D,CAAvD;AAwCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASO,YAAT,CAAuBC,UAAvB,EAAmCC,SAAnC,EAA8Cd,UAA9C,EAA2D;AACjE,MACCP,eAAe,CAAEqB,SAAF,EAAa,iBAAb,EAAgC,IAAhC,CAAf,IACAd,UAAU,CAACC,SAFZ,EAGE;AACDY,IAAAA,UAAU,CAACZ,SAAX,GAAuBZ,UAAU,CAChCwB,UAAU,CAACZ,SADqB,EAEhCD,UAAU,CAACC,SAFqB,CAAjC;AAIA;;AAED,SAAOY,UAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,yBAAT,CAAoCC,SAApC,EAAgD;AACtDA,EAAAA,SAAS,GAAI,+BAA+BA,SAAW,QAAvD;AAEA,QAAMC,MAAM,GAAGvB,wBAAwB,CAAEsB,SAAF,EAAa;AACnDd,IAAAA,IAAI,EAAE,QAD6C;AAEnDgB,IAAAA,MAAM,EAAE,WAF2C;AAGnDC,IAAAA,QAAQ,EAAE,8BAHyC;AAInDC,IAAAA,SAAS,EAAE;AAJwC,GAAb,CAAvC;AAOA,SAAOH,MAAM,GAAGA,MAAM,CAACI,IAAP,GAAcC,KAAd,CAAqB,KAArB,CAAH,GAAkC,EAA/C;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA8BC,eAA9B,EAA+CV,SAA/C,EAA0DE,SAA1D,EAAsE;AAC5E,MAAKvB,eAAe,CAAEqB,SAAF,EAAa,iBAAb,EAAgC,IAAhC,CAApB,EAA6D;AAC5D;AACA;AACA;AACA;AACA,UAAMW,uBAAuB,GAAGrC,IAAI,CAAEoC,eAAF,EAAmB,CACtD,WADsD,CAAnB,CAApC;AAGA,UAAME,UAAU,GAAG/B,cAAc,CAAEmB,SAAF,EAAaW,uBAAb,CAAjC;AACA,UAAME,cAAc,GAAGZ,yBAAyB,CAAEW,UAAF,CAAhD;AACA,UAAME,aAAa,GAAGb,yBAAyB,CAAEC,SAAF,CAA/C;AACA,UAAMa,aAAa,GAAG1C,UAAU,CAAEyC,aAAF,EAAiBD,cAAjB,CAAhC;;AAEA,QAAKE,aAAa,CAACC,MAAnB,EAA4B;AAC3BN,MAAAA,eAAe,CAACvB,SAAhB,GAA4B4B,aAAa,CAACE,IAAd,CAAoB,GAApB,CAA5B;AACA,KAFD,MAEO,IAAKL,UAAL,EAAkB;AACxB,aAAOF,eAAe,CAACvB,SAAvB;AACA;AACD;;AAED,SAAOuB,eAAP;AACA;AAEDlC,SAAS,CACR,0BADQ,EAER,kCAFQ,EAGRQ,YAHQ,CAAT;AAKAR,SAAS,CACR,kBADQ,EAER,sDAFQ,EAGRa,oBAHQ,CAAT;AAKAb,SAAS,CACR,kCADQ,EAER,mCAFQ,EAGRsB,YAHQ,CAAT;AAKAtB,SAAS,CACR,2BADQ,EAER,4CAFQ,EAGRiC,mBAHQ,CAAT","sourcesContent":["/**\n * External dependencies\n */\nimport { difference, omit } from 'lodash';\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { addFilter } from '@wordpress/hooks';\nimport { TextControl } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\nimport {\n\thasBlockSupport,\n\tparseWithAttributeSchema,\n\tgetSaveContent,\n} from '@wordpress/blocks';\nimport { createHigherOrderComponent } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { InspectorAdvancedControls } from '../components';\n\n/**\n * Filters registered block settings, extending attributes with anchor using ID\n * of the first node.\n *\n * @param {Object} settings Original block settings.\n *\n * @return {Object} Filtered block settings.\n */\nexport function addAttribute( settings ) {\n\tif ( hasBlockSupport( settings, 'customClassName', true ) ) {\n\t\t// Gracefully handle if settings.attributes is undefined.\n\t\tsettings.attributes = {\n\t\t\t...settings.attributes,\n\t\t\tclassName: {\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t};\n\t}\n\n\treturn settings;\n}\n\n/**\n * Override the default edit UI to include a new block inspector control for\n * assigning the custom class name, if block supports custom class name.\n *\n * @param {WPComponent} BlockEdit Original component.\n *\n * @return {WPComponent} Wrapped component.\n */\nexport const withInspectorControl = createHigherOrderComponent(\n\t( BlockEdit ) => {\n\t\treturn ( props ) => {\n\t\t\tconst hasCustomClassName = hasBlockSupport(\n\t\t\t\tprops.name,\n\t\t\t\t'customClassName',\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tif ( hasCustomClassName && props.isSelected ) {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<BlockEdit { ...props } />\n\t\t\t\t\t\t<InspectorAdvancedControls>\n\t\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\t\t\tlabel={ __( 'Additional CSS class(es)' ) }\n\t\t\t\t\t\t\t\tvalue={ props.attributes.className || '' }\n\t\t\t\t\t\t\t\tonChange={ ( nextValue ) => {\n\t\t\t\t\t\t\t\t\tprops.setAttributes( {\n\t\t\t\t\t\t\t\t\t\tclassName:\n\t\t\t\t\t\t\t\t\t\t\tnextValue !== ''\n\t\t\t\t\t\t\t\t\t\t\t\t? nextValue\n\t\t\t\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t\thelp={ __(\n\t\t\t\t\t\t\t\t\t'Separate multiple classes with spaces.'\n\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</InspectorAdvancedControls>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn <BlockEdit { ...props } />;\n\t\t};\n\t},\n\t'withInspectorControl'\n);\n\n/**\n * Override props assigned to save component to inject anchor ID, if block\n * supports anchor. This is only applied if the block's save result is an\n * element and not a markup string.\n *\n * @param {Object} extraProps Additional props applied to save element.\n * @param {Object} blockType  Block type.\n * @param {Object} attributes Current block attributes.\n *\n * @return {Object} Filtered props applied to save element.\n */\nexport function addSaveProps( extraProps, blockType, attributes ) {\n\tif (\n\t\thasBlockSupport( blockType, 'customClassName', true ) &&\n\t\tattributes.className\n\t) {\n\t\textraProps.className = classnames(\n\t\t\textraProps.className,\n\t\t\tattributes.className\n\t\t);\n\t}\n\n\treturn extraProps;\n}\n\n/**\n * Given an HTML string, returns an array of class names assigned to the root\n * element in the markup.\n *\n * @param {string} innerHTML Markup string from which to extract classes.\n *\n * @return {string[]} Array of class names assigned to the root element.\n */\nexport function getHTMLRootElementClasses( innerHTML ) {\n\tinnerHTML = `<div data-custom-class-name>${ innerHTML }</div>`;\n\n\tconst parsed = parseWithAttributeSchema( innerHTML, {\n\t\ttype: 'string',\n\t\tsource: 'attribute',\n\t\tselector: '[data-custom-class-name] > *',\n\t\tattribute: 'class',\n\t} );\n\n\treturn parsed ? parsed.trim().split( /\\s+/ ) : [];\n}\n\n/**\n * Given a parsed set of block attributes, if the block supports custom class\n * names and an unknown class (per the block's serialization behavior) is\n * found, the unknown classes are treated as custom classes. This prevents the\n * block from being considered as invalid.\n *\n * @param {Object} blockAttributes Original block attributes.\n * @param {Object} blockType       Block type settings.\n * @param {string} innerHTML       Original block markup.\n *\n * @return {Object} Filtered block attributes.\n */\nexport function addParsedDifference( blockAttributes, blockType, innerHTML ) {\n\tif ( hasBlockSupport( blockType, 'customClassName', true ) ) {\n\t\t// To determine difference, serialize block given the known set of\n\t\t// attributes, with the exception of `className`. This will determine\n\t\t// the default set of classes. From there, any difference in innerHTML\n\t\t// can be considered as custom classes.\n\t\tconst attributesSansClassName = omit( blockAttributes, [\n\t\t\t'className',\n\t\t] );\n\t\tconst serialized = getSaveContent( blockType, attributesSansClassName );\n\t\tconst defaultClasses = getHTMLRootElementClasses( serialized );\n\t\tconst actualClasses = getHTMLRootElementClasses( innerHTML );\n\t\tconst customClasses = difference( actualClasses, defaultClasses );\n\n\t\tif ( customClasses.length ) {\n\t\t\tblockAttributes.className = customClasses.join( ' ' );\n\t\t} else if ( serialized ) {\n\t\t\tdelete blockAttributes.className;\n\t\t}\n\t}\n\n\treturn blockAttributes;\n}\n\naddFilter(\n\t'blocks.registerBlockType',\n\t'core/custom-class-name/attribute',\n\taddAttribute\n);\naddFilter(\n\t'editor.BlockEdit',\n\t'core/editor/custom-class-name/with-inspector-control',\n\twithInspectorControl\n);\naddFilter(\n\t'blocks.getSaveContent.extraProps',\n\t'core/custom-class-name/save-props',\n\taddSaveProps\n);\naddFilter(\n\t'blocks.getBlockAttributes',\n\t'core/custom-class-name/addParsedDifference',\n\taddParsedDifference\n);\n"]}