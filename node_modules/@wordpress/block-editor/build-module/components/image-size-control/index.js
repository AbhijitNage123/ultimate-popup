import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import { isEmpty, noop } from 'lodash';
/**
 * WordPress dependencies
 */

import { Button, ButtonGroup, SelectControl, TextControl } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import useDimensionHandler from './use-dimension-handler';
const IMAGE_SIZE_PRESETS = [25, 50, 75, 100];
export default function ImageSizeControl({
  imageWidth,
  imageHeight,
  imageSizeOptions = [],
  isResizable = true,
  slug,
  width,
  height,
  onChange,
  onChangeImage = noop
}) {
  const {
    currentHeight,
    currentWidth,
    updateDimension,
    updateDimensions
  } = useDimensionHandler(height, width, imageHeight, imageWidth, onChange);
  return createElement(Fragment, null, !isEmpty(imageSizeOptions) && createElement(SelectControl, {
    label: __('Image size'),
    value: slug,
    options: imageSizeOptions,
    onChange: onChangeImage
  }), isResizable && createElement("div", {
    className: "block-editor-image-size-control"
  }, createElement("p", {
    className: "block-editor-image-size-control__row"
  }, __('Image dimensions')), createElement("div", {
    className: "block-editor-image-size-control__row"
  }, createElement(TextControl, {
    type: "number",
    className: "block-editor-image-size-control__width",
    label: __('Width'),
    value: currentWidth,
    min: 1,
    onChange: value => updateDimension('width', value)
  }), createElement(TextControl, {
    type: "number",
    className: "block-editor-image-size-control__height",
    label: __('Height'),
    value: currentHeight,
    min: 1,
    onChange: value => updateDimension('height', value)
  })), createElement("div", {
    className: "block-editor-image-size-control__row"
  }, createElement(ButtonGroup, {
    "aria-label": __('Image size presets')
  }, IMAGE_SIZE_PRESETS.map(scale => {
    const scaledWidth = Math.round(imageWidth * (scale / 100));
    const scaledHeight = Math.round(imageHeight * (scale / 100));
    const isCurrent = currentWidth === scaledWidth && currentHeight === scaledHeight;
    return createElement(Button, {
      key: scale,
      isSmall: true,
      variant: isCurrent ? 'primary' : undefined,
      isPressed: isCurrent,
      onClick: () => updateDimensions(scaledHeight, scaledWidth)
    }, scale, "%");
  })), createElement(Button, {
    isSmall: true,
    onClick: () => updateDimensions()
  }, __('Reset')))));
}
//# sourceMappingURL=index.js.map