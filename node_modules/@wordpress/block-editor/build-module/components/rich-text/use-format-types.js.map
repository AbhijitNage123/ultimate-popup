{"version":3,"sources":["@wordpress/block-editor/src/components/rich-text/use-format-types.js"],"names":["useMemo","useSelect","useDispatch","store","richTextStore","formatTypesSelector","select","getFormatTypes","interactiveContentTags","Set","useFormatTypes","clientId","identifier","withoutInteractiveFormatting","allowedFormats","allFormatTypes","formatTypes","filter","name","tagName","includes","has","keyedSelected","reduce","accumulator","type","__experimentalGetPropsForEditableTreePreparation","richTextIdentifier","blockClientId","dispatch","prepareHandlers","valueHandlers","changeHandlers","dependencies","forEach","__experimentalCreatePrepareEditableTree","selected","handler","__experimentalCreateOnChangeEditableValue","push","key","dispatchers","__experimentalGetPropsForEditableTreeChangeHandler"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useMemo } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store as richTextStore } from '@wordpress/rich-text';\n\nfunction formatTypesSelector( select ) {\n\treturn select( richTextStore ).getFormatTypes();\n}\n\n/**\n * Set of all interactive content tags.\n *\n * @see https://html.spec.whatwg.org/multipage/dom.html#interactive-content\n */\nconst interactiveContentTags = new Set( [\n\t'a',\n\t'audio',\n\t'button',\n\t'details',\n\t'embed',\n\t'iframe',\n\t'input',\n\t'label',\n\t'select',\n\t'textarea',\n\t'video',\n] );\n\n/**\n * This hook provides RichText with the `formatTypes` and its derived props from\n * experimental format type settings.\n *\n * @param {Object}  $0                              Options\n * @param {string}  $0.clientId                     Block client ID.\n * @param {string}  $0.identifier                   Block attribute.\n * @param {boolean} $0.withoutInteractiveFormatting Whether to clean the interactive formattings or not.\n * @param {Array}   $0.allowedFormats               Allowed formats\n */\nexport function useFormatTypes( {\n\tclientId,\n\tidentifier,\n\twithoutInteractiveFormatting,\n\tallowedFormats,\n} ) {\n\tconst allFormatTypes = useSelect( formatTypesSelector, [] );\n\tconst formatTypes = useMemo( () => {\n\t\treturn allFormatTypes.filter( ( { name, tagName } ) => {\n\t\t\tif ( allowedFormats && ! allowedFormats.includes( name ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\twithoutInteractiveFormatting &&\n\t\t\t\tinteractiveContentTags.has( tagName )\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} );\n\t}, [ allFormatTypes, allowedFormats, interactiveContentTags ] );\n\tconst keyedSelected = useSelect(\n\t\t( select ) =>\n\t\t\tformatTypes.reduce( ( accumulator, type ) => {\n\t\t\t\tif ( type.__experimentalGetPropsForEditableTreePreparation ) {\n\t\t\t\t\taccumulator[\n\t\t\t\t\t\ttype.name\n\t\t\t\t\t] = type.__experimentalGetPropsForEditableTreePreparation(\n\t\t\t\t\t\tselect,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trichTextIdentifier: identifier,\n\t\t\t\t\t\t\tblockClientId: clientId,\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn accumulator;\n\t\t\t}, {} ),\n\t\t[ formatTypes, clientId, identifier ]\n\t);\n\tconst dispatch = useDispatch();\n\tconst prepareHandlers = [];\n\tconst valueHandlers = [];\n\tconst changeHandlers = [];\n\tconst dependencies = [];\n\n\tformatTypes.forEach( ( type ) => {\n\t\tif ( type.__experimentalCreatePrepareEditableTree ) {\n\t\t\tconst selected = keyedSelected[ type.name ];\n\t\t\tconst handler = type.__experimentalCreatePrepareEditableTree(\n\t\t\t\tselected,\n\t\t\t\t{\n\t\t\t\t\trichTextIdentifier: identifier,\n\t\t\t\t\tblockClientId: clientId,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif ( type.__experimentalCreateOnChangeEditableValue ) {\n\t\t\t\tvalueHandlers.push( handler );\n\t\t\t} else {\n\t\t\t\tprepareHandlers.push( handler );\n\t\t\t}\n\n\t\t\tfor ( const key in selected ) {\n\t\t\t\tdependencies.push( selected[ key ] );\n\t\t\t}\n\t\t}\n\n\t\tif ( type.__experimentalCreateOnChangeEditableValue ) {\n\t\t\tlet dispatchers = {};\n\n\t\t\tif ( type.__experimentalGetPropsForEditableTreeChangeHandler ) {\n\t\t\t\tdispatchers = type.__experimentalGetPropsForEditableTreeChangeHandler(\n\t\t\t\t\tdispatch,\n\t\t\t\t\t{\n\t\t\t\t\t\trichTextIdentifier: identifier,\n\t\t\t\t\t\tblockClientId: clientId,\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tchangeHandlers.push(\n\t\t\t\ttype.__experimentalCreateOnChangeEditableValue(\n\t\t\t\t\t{\n\t\t\t\t\t\t...( keyedSelected[ type.name ] || {} ),\n\t\t\t\t\t\t...dispatchers,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\trichTextIdentifier: identifier,\n\t\t\t\t\t\tblockClientId: clientId,\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t} );\n\n\treturn {\n\t\tformatTypes,\n\t\tprepareHandlers,\n\t\tvalueHandlers,\n\t\tchangeHandlers,\n\t\tdependencies,\n\t};\n}\n"]}