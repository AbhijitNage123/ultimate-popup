{"version":3,"sources":["@wordpress/block-editor/src/components/rich-text/use-mark-persistent.js"],"names":["useLayoutEffect","useRef","useDispatch","store","blockEditorStore","useMarkPersistent","html","value","previousText","hasActiveFormats","activeFormats","length","__unstableMarkLastChangeAsPersistent","current","text","timeout","window","setTimeout","clearTimeout"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,eAAT,EAA0BC,MAA1B,QAAwC,oBAAxC;AACA,SAASC,WAAT,QAA4B,iBAA5B;AAEA;AACA;AACA;;AACA,SAASC,KAAK,IAAIC,gBAAlB,QAA0C,aAA1C;AAEA,OAAO,SAASC,iBAAT,CAA4B;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAA5B,EAA8C;AACpD,QAAMC,YAAY,GAAGP,MAAM,EAA3B;AACA,QAAMQ,gBAAgB,GACrBF,KAAK,CAACG,aAAN,IAAuB,CAAC,CAAEH,KAAK,CAACG,aAAN,CAAoBC,MAD/C;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAA2CV,WAAW,CAC3DE,gBAD2D,CAA5D,CAJoD,CAQpD;;AACAJ,EAAAA,eAAe,CAAE,MAAM;AACtB;AACA,QAAK,CAAEQ,YAAY,CAACK,OAApB,EAA8B;AAC7BL,MAAAA,YAAY,CAACK,OAAb,GAAuBN,KAAK,CAACO,IAA7B;AACA;AACA,KALqB,CAOtB;AACA;;;AACA,QAAKN,YAAY,CAACK,OAAb,KAAyBN,KAAK,CAACO,IAApC,EAA2C;AAC1C,YAAMC,OAAO,GAAGC,MAAM,CAACC,UAAP,CAAmB,MAAM;AACxCL,QAAAA,oCAAoC;AACpC,OAFe,EAEb,IAFa,CAAhB;AAGAJ,MAAAA,YAAY,CAACK,OAAb,GAAuBN,KAAK,CAACO,IAA7B;AACA,aAAO,MAAM;AACZE,QAAAA,MAAM,CAACE,YAAP,CAAqBH,OAArB;AACA,OAFD;AAGA;;AAEDH,IAAAA,oCAAoC;AACpC,GApBc,EAoBZ,CAAEN,IAAF,EAAQG,gBAAR,CApBY,CAAf;AAqBA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useLayoutEffect, useRef } from '@wordpress/element';\nimport { useDispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\n\nexport function useMarkPersistent( { html, value } ) {\n\tconst previousText = useRef();\n\tconst hasActiveFormats =\n\t\tvalue.activeFormats && !! value.activeFormats.length;\n\tconst { __unstableMarkLastChangeAsPersistent } = useDispatch(\n\t\tblockEditorStore\n\t);\n\n\t// Must be set synchronously to make sure it applies to the last change.\n\tuseLayoutEffect( () => {\n\t\t// Ignore mount.\n\t\tif ( ! previousText.current ) {\n\t\t\tpreviousText.current = value.text;\n\t\t\treturn;\n\t\t}\n\n\t\t// Text input, so don't create an undo level for every character.\n\t\t// Create an undo level after 1 second of no input.\n\t\tif ( previousText.current !== value.text ) {\n\t\t\tconst timeout = window.setTimeout( () => {\n\t\t\t\t__unstableMarkLastChangeAsPersistent();\n\t\t\t}, 1000 );\n\t\t\tpreviousText.current = value.text;\n\t\t\treturn () => {\n\t\t\t\twindow.clearTimeout( timeout );\n\t\t\t};\n\t\t}\n\n\t\t__unstableMarkLastChangeAsPersistent();\n\t}, [ html, hasActiveFormats ] );\n}\n"]}