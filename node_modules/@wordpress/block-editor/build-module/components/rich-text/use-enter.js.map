{"version":3,"sources":["@wordpress/block-editor/src/components/rich-text/use-enter.js"],"names":["useRef","useRefEffect","ENTER","insert","__unstableIsEmptyLine","isEmptyLine","__unstableInsertLineSeparator","insertLineSeparator","getBlockTransforms","findTransform","useDispatch","store","blockEditorStore","splitValue","useEnter","props","__unstableMarkAutomaticChange","propsRef","current","element","onKeyDown","event","defaultPrevented","removeEditorOnlyFormats","value","onReplace","onSplit","onSplitMiddle","multilineTag","onChange","disableLineBreaks","onSplitAtEnd","keyCode","preventDefault","_value","formats","canSplit","transforms","filter","type","transformation","item","regExp","test","text","transform","content","shiftKey","start","end","canSplitAtEnd","length","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\n/**\n * WordPress dependencies\n */\nimport { useRef } from '@wordpress/element';\nimport { useRefEffect } from '@wordpress/compose';\nimport { ENTER } from '@wordpress/keycodes';\nimport {\n\tinsert,\n\t__unstableIsEmptyLine as isEmptyLine,\n\t__unstableInsertLineSeparator as insertLineSeparator,\n} from '@wordpress/rich-text';\nimport { getBlockTransforms, findTransform } from '@wordpress/blocks';\nimport { useDispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\nimport { splitValue } from './split-value';\n\nexport function useEnter( props ) {\n\tconst { __unstableMarkAutomaticChange } = useDispatch( blockEditorStore );\n\tconst propsRef = useRef( props );\n\tpropsRef.current = props;\n\treturn useRefEffect( ( element ) => {\n\t\tfunction onKeyDown( event ) {\n\t\t\tif ( event.defaultPrevented ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst {\n\t\t\t\tremoveEditorOnlyFormats,\n\t\t\t\tvalue,\n\t\t\t\tonReplace,\n\t\t\t\tonSplit,\n\t\t\t\tonSplitMiddle,\n\t\t\t\tmultilineTag,\n\t\t\t\tonChange,\n\t\t\t\tdisableLineBreaks,\n\t\t\t\tonSplitAtEnd,\n\t\t\t} = propsRef.current;\n\n\t\t\tif ( event.keyCode !== ENTER ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconst _value = { ...value };\n\t\t\t_value.formats = removeEditorOnlyFormats( value );\n\t\t\tconst canSplit = onReplace && onSplit;\n\n\t\t\tif ( onReplace ) {\n\t\t\t\tconst transforms = getBlockTransforms( 'from' ).filter(\n\t\t\t\t\t( { type } ) => type === 'enter'\n\t\t\t\t);\n\t\t\t\tconst transformation = findTransform( transforms, ( item ) => {\n\t\t\t\t\treturn item.regExp.test( _value.text );\n\t\t\t\t} );\n\n\t\t\t\tif ( transformation ) {\n\t\t\t\t\tonReplace( [\n\t\t\t\t\t\ttransformation.transform( {\n\t\t\t\t\t\t\tcontent: _value.text,\n\t\t\t\t\t\t} ),\n\t\t\t\t\t] );\n\t\t\t\t\t__unstableMarkAutomaticChange();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( multilineTag ) {\n\t\t\t\tif ( event.shiftKey ) {\n\t\t\t\t\tif ( ! disableLineBreaks ) {\n\t\t\t\t\t\tonChange( insert( _value, '\\n' ) );\n\t\t\t\t\t}\n\t\t\t\t} else if ( canSplit && isEmptyLine( _value ) ) {\n\t\t\t\t\tsplitValue( {\n\t\t\t\t\t\tvalue: _value,\n\t\t\t\t\t\tonReplace,\n\t\t\t\t\t\tonSplit,\n\t\t\t\t\t\tonSplitMiddle,\n\t\t\t\t\t\tmultilineTag,\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tonChange( insertLineSeparator( _value ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst { text, start, end } = _value;\n\t\t\t\tconst canSplitAtEnd =\n\t\t\t\t\tonSplitAtEnd && start === end && end === text.length;\n\n\t\t\t\tif ( event.shiftKey || ( ! canSplit && ! canSplitAtEnd ) ) {\n\t\t\t\t\tif ( ! disableLineBreaks ) {\n\t\t\t\t\t\tonChange( insert( _value, '\\n' ) );\n\t\t\t\t\t}\n\t\t\t\t} else if ( ! canSplit && canSplitAtEnd ) {\n\t\t\t\t\tonSplitAtEnd();\n\t\t\t\t} else if ( canSplit ) {\n\t\t\t\t\tsplitValue( {\n\t\t\t\t\t\tvalue: _value,\n\t\t\t\t\t\tonReplace,\n\t\t\t\t\t\tonSplit,\n\t\t\t\t\t\tonSplitMiddle,\n\t\t\t\t\t\tmultilineTag,\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\telement.addEventListener( 'keydown', onKeyDown );\n\t\treturn () => {\n\t\t\telement.removeEventListener( 'keydown', onKeyDown );\n\t\t};\n\t}, [] );\n}\n"]}