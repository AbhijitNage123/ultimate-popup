import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { InspectorControls, useSetting } from '@wordpress/block-editor';
import { BottomSheet, ColorSettings, FocalPointSettingsPanel, LinkPickerScreen } from '@wordpress/components';
import { compose } from '@wordpress/compose';
import { withDispatch, withSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import styles from './container.native.scss';
import { store as blockEditorStore } from '../../store';
export const blockSettingsScreens = {
  settings: 'Settings',
  color: 'Color',
  focalPoint: 'FocalPoint',
  linkPicker: 'linkPicker'
};

function BottomSheetSettings({
  editorSidebarOpened,
  closeGeneralSidebar,
  settings,
  ...props
}) {
  const colorSettings = {
    colors: useSetting('color.palette') || settings.colors,
    gradients: useSetting('color.gradients') || settings.gradients
  };
  return createElement(BottomSheet, _extends({
    isVisible: editorSidebarOpened,
    onClose: closeGeneralSidebar,
    hideHeader: true,
    contentStyle: styles.content,
    hasNavigation: true
  }, props), createElement(BottomSheet.NavigationContainer, {
    animate: true,
    main: true
  }, createElement(BottomSheet.NavigationScreen, {
    name: blockSettingsScreens.settings
  }, createElement(InspectorControls.Slot, null)), createElement(BottomSheet.NavigationScreen, {
    name: BottomSheet.SubSheet.screenName
  }, createElement(BottomSheet.SubSheet.Slot, null)), createElement(BottomSheet.NavigationScreen, {
    name: blockSettingsScreens.color
  }, createElement(ColorSettings, {
    defaultSettings: colorSettings
  })), createElement(BottomSheet.NavigationScreen, {
    name: blockSettingsScreens.focalPoint,
    fullScreen: true
  }, createElement(FocalPointSettingsPanel, null)), createElement(BottomSheet.NavigationScreen, {
    name: blockSettingsScreens.linkPicker,
    fullScreen: true,
    isScrollable: true
  }, createElement(LinkPickerScreen, {
    returnScreenName: blockSettingsScreens.settings
  }))));
}

export default compose([withSelect(select => {
  const {
    isEditorSidebarOpened
  } = select('core/edit-post');
  const {
    getSettings
  } = select(blockEditorStore);
  return {
    settings: getSettings(),
    editorSidebarOpened: isEditorSidebarOpened()
  };
}), withDispatch(dispatch => {
  const {
    closeGeneralSidebar
  } = dispatch('core/edit-post');
  return {
    closeGeneralSidebar
  };
})])(BottomSheetSettings);
//# sourceMappingURL=container.native.js.map