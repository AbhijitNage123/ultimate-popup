{"version":3,"sources":["@wordpress/block-editor/src/components/block-list/index.js"],"names":["classnames","AsyncModeProvider","useSelect","useViewportMatch","useMergeRefs","createContext","useState","useMemo","BlockListBlock","BlockListAppender","useBlockDropZone","useInBetweenInserter","store","blockEditorStore","usePreParsePatterns","LayoutProvider","defaultLayout","BlockToolsBackCompat","useBlockSelectionClearer","Head","IntersectionObserver","Root","className","children","isLargeViewport","isOutlineMode","isFocusMode","isNavigationMode","select","getSettings","_isNavigationMode","outlineMode","focusMode","BlockList","props","Items","placeholder","rootClientId","renderAppender","__experimentalAppenderTagName","__experimentalLayout","layout","intersectingBlocks","setIntersectingBlocks","Set","intersectionObserver","Observer","window","entries","oldIntersectingBlocks","newIntersectingBlocks","entry","clientId","target","getAttribute","action","isIntersecting","order","selectedBlocks","getBlockOrder","getSelectedBlockClientIds","map","has","includes","length","BlockListItems"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { AsyncModeProvider, useSelect } from '@wordpress/data';\nimport { useViewportMatch, useMergeRefs } from '@wordpress/compose';\nimport { createContext, useState, useMemo } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport BlockListBlock from './block';\nimport BlockListAppender from '../block-list-appender';\nimport useBlockDropZone from '../use-block-drop-zone';\nimport { useInBetweenInserter } from './use-in-between-inserter';\nimport { store as blockEditorStore } from '../../store';\nimport { usePreParsePatterns } from '../../utils/pre-parse-patterns';\nimport { LayoutProvider, defaultLayout } from './layout';\nimport BlockToolsBackCompat from '../block-tools/back-compat';\nimport { useBlockSelectionClearer } from '../block-selection-clearer';\nimport { Head } from './head';\n\nexport const IntersectionObserver = createContext();\n\nfunction Root( { className, children } ) {\n\tconst isLargeViewport = useViewportMatch( 'medium' );\n\tconst { isOutlineMode, isFocusMode, isNavigationMode } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getSettings, isNavigationMode: _isNavigationMode } = select(\n\t\t\t\tblockEditorStore\n\t\t\t);\n\t\t\tconst { outlineMode, focusMode } = getSettings();\n\t\t\treturn {\n\t\t\t\tisOutlineMode: outlineMode,\n\t\t\t\tisFocusMode: focusMode,\n\t\t\t\tisNavigationMode: _isNavigationMode(),\n\t\t\t};\n\t\t},\n\t\t[]\n\t);\n\treturn (\n\t\t<Head>\n\t\t\t<div\n\t\t\t\tref={ useMergeRefs( [\n\t\t\t\t\tuseBlockSelectionClearer(),\n\t\t\t\t\tuseBlockDropZone(),\n\t\t\t\t\tuseInBetweenInserter(),\n\t\t\t\t] ) }\n\t\t\t\tclassName={ classnames(\n\t\t\t\t\t'block-editor-block-list__layout is-root-container',\n\t\t\t\t\tclassName,\n\t\t\t\t\t{\n\t\t\t\t\t\t'is-outline-mode': isOutlineMode,\n\t\t\t\t\t\t'is-focus-mode': isFocusMode && isLargeViewport,\n\t\t\t\t\t\t'is-navigate-mode': isNavigationMode,\n\t\t\t\t\t}\n\t\t\t\t) }\n\t\t\t>\n\t\t\t\t{ children }\n\t\t\t</div>\n\t\t</Head>\n\t);\n}\n\nexport default function BlockList( { className, ...props } ) {\n\tusePreParsePatterns();\n\treturn (\n\t\t<BlockToolsBackCompat>\n\t\t\t<Root className={ className }>\n\t\t\t\t<BlockListItems { ...props } />\n\t\t\t</Root>\n\t\t</BlockToolsBackCompat>\n\t);\n}\n\nfunction Items( {\n\tplaceholder,\n\trootClientId,\n\trenderAppender,\n\t__experimentalAppenderTagName,\n\t__experimentalLayout: layout = defaultLayout,\n} ) {\n\tconst [ intersectingBlocks, setIntersectingBlocks ] = useState( new Set() );\n\tconst intersectionObserver = useMemo( () => {\n\t\tconst { IntersectionObserver: Observer } = window;\n\n\t\tif ( ! Observer ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn new Observer( ( entries ) => {\n\t\t\tsetIntersectingBlocks( ( oldIntersectingBlocks ) => {\n\t\t\t\tconst newIntersectingBlocks = new Set( oldIntersectingBlocks );\n\t\t\t\tfor ( const entry of entries ) {\n\t\t\t\t\tconst clientId = entry.target.getAttribute( 'data-block' );\n\t\t\t\t\tconst action = entry.isIntersecting ? 'add' : 'delete';\n\t\t\t\t\tnewIntersectingBlocks[ action ]( clientId );\n\t\t\t\t}\n\t\t\t\treturn newIntersectingBlocks;\n\t\t\t} );\n\t\t} );\n\t}, [ setIntersectingBlocks ] );\n\tconst { order, selectedBlocks } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getBlockOrder, getSelectedBlockClientIds } = select(\n\t\t\t\tblockEditorStore\n\t\t\t);\n\t\t\treturn {\n\t\t\t\torder: getBlockOrder( rootClientId ),\n\t\t\t\tselectedBlocks: getSelectedBlockClientIds(),\n\t\t\t};\n\t\t},\n\t\t[ rootClientId ]\n\t);\n\n\treturn (\n\t\t<LayoutProvider value={ layout }>\n\t\t\t<IntersectionObserver.Provider value={ intersectionObserver }>\n\t\t\t\t{ order.map( ( clientId ) => (\n\t\t\t\t\t<AsyncModeProvider\n\t\t\t\t\t\tkey={ clientId }\n\t\t\t\t\t\tvalue={\n\t\t\t\t\t\t\t// Only provide data asynchronously if the block is\n\t\t\t\t\t\t\t// not visible and not selected.\n\t\t\t\t\t\t\t! intersectingBlocks.has( clientId ) &&\n\t\t\t\t\t\t\t! selectedBlocks.includes( clientId )\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t<BlockListBlock\n\t\t\t\t\t\t\trootClientId={ rootClientId }\n\t\t\t\t\t\t\tclientId={ clientId }\n\t\t\t\t\t\t/>\n\t\t\t\t\t</AsyncModeProvider>\n\t\t\t\t) ) }\n\t\t\t</IntersectionObserver.Provider>\n\t\t\t{ order.length < 1 && placeholder }\n\t\t\t<BlockListAppender\n\t\t\t\ttagName={ __experimentalAppenderTagName }\n\t\t\t\trootClientId={ rootClientId }\n\t\t\t\trenderAppender={ renderAppender }\n\t\t\t/>\n\t\t</LayoutProvider>\n\t);\n}\n\nexport function BlockListItems( props ) {\n\t// This component needs to always be synchronous as it's the one changing\n\t// the async mode depending on the block selection.\n\treturn (\n\t\t<AsyncModeProvider value={ false }>\n\t\t\t<Items { ...props } />\n\t\t</AsyncModeProvider>\n\t);\n}\n"]}