{"version":3,"sources":["@wordpress/block-editor/src/components/block-list/use-block-props/use-block-refs.js"],"names":["useContext","useLayoutEffect","useMemo","useRef","useState","useRefEffect","BlockRefs","useBlockRefProvider","clientId","refs","callbacks","ref","set","delete","element","current","forEach","id","setElement","useBlockRef","freshClientId","entries","useBlockElement","__unstableUseBlockRef","__unstableUseBlockElement"],"mappings":"AAAA;AACA;AACA;AACA,SACCA,UADD,EAECC,eAFD,EAGCC,OAHD,EAICC,MAJD,EAKCC,QALD,QAMO,oBANP;AAOA,SAASC,YAAT,QAA6B,oBAA7B;AAEA;AACA;AACA;;AACA,SAASC,SAAT,QAA0B,oCAA1B;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA8BC,QAA9B,EAAyC;AAC/C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAsBV,UAAU,CAAEM,SAAF,CAAtC;AACA,QAAMK,GAAG,GAAGR,MAAM,EAAlB;AACAF,EAAAA,eAAe,CAAE,MAAM;AACtBQ,IAAAA,IAAI,CAACG,GAAL,CAAUD,GAAV,EAAeH,QAAf;AACA,WAAO,MAAM;AACZC,MAAAA,IAAI,CAACI,MAAL,CAAaF,GAAb;AACA,KAFD;AAGA,GALc,EAKZ,CAAEH,QAAF,CALY,CAAf;AAMA,SAAOH,YAAY,CAChBS,OAAF,IAAe;AACd;AACAH,IAAAA,GAAG,CAACI,OAAJ,GAAcD,OAAd,CAFc,CAGd;;AACAJ,IAAAA,SAAS,CAACM,OAAV,CAAmB,CAAEC,EAAF,EAAMC,UAAN,KAAsB;AACxC,UAAKV,QAAQ,KAAKS,EAAlB,EAAuB;AACtBC,QAAAA,UAAU,CAAEJ,OAAF,CAAV;AACA;AACD,KAJD;AAKA,GAViB,EAWlB,CAAEN,QAAF,CAXkB,CAAnB;AAaA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASW,WAAT,CAAsBX,QAAtB,EAAiC;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAWT,UAAU,CAAEM,SAAF,CAA3B;AACA,QAAMc,aAAa,GAAGjB,MAAM,EAA5B;AACAiB,EAAAA,aAAa,CAACL,OAAd,GAAwBP,QAAxB,CAHgC,CAIhC;AACA;;AACA,SAAON,OAAO,CACb,OAAQ;AACP,QAAIa,OAAJ,GAAc;AACb,UAAID,OAAO,GAAG,IAAd,CADa,CAGb;AACA;;AACA,WAAM,MAAM,CAAEH,GAAF,EAAOM,EAAP,CAAZ,IAA2BR,IAAI,CAACY,OAAL,EAA3B,EAA4C;AAC3C,YAAKJ,EAAE,KAAKG,aAAa,CAACL,OAArB,IAAgCJ,GAAG,CAACI,OAAzC,EAAmD;AAClDD,UAAAA,OAAO,GAAGH,GAAG,CAACI,OAAd;AACA;AACD;;AAED,aAAOD,OAAP;AACA;;AAbM,GAAR,CADa,EAgBb,EAhBa,CAAd;AAkBA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,eAAT,CAA0Bd,QAA1B,EAAqC;AACpC,QAAM;AAAEE,IAAAA;AAAF,MAAgBV,UAAU,CAAEM,SAAF,CAAhC;AACA,QAAMK,GAAG,GAAGQ,WAAW,CAAEX,QAAF,CAAvB;AACA,QAAM,CAAEM,OAAF,EAAWI,UAAX,IAA0Bd,QAAQ,CAAE,IAAF,CAAxC;AAEAH,EAAAA,eAAe,CAAE,MAAM;AACtB,QAAK,CAAEO,QAAP,EAAkB;AACjB;AACA;;AAEDE,IAAAA,SAAS,CAACE,GAAV,CAAeM,UAAf,EAA2BV,QAA3B;AACA,WAAO,MAAM;AACZE,MAAAA,SAAS,CAACG,MAAV,CAAkBK,UAAlB;AACA,KAFD;AAGA,GATc,EASZ,CAAEV,QAAF,CATY,CAAf;AAWA,SAAOG,GAAG,CAACI,OAAJ,IAAeD,OAAtB;AACA;;AAED,SAASK,WAAW,IAAII,qBAAxB;AACA,SAASD,eAAe,IAAIE,yBAA5B","sourcesContent":["/**\n * WordPress dependencies\n */\nimport {\n\tuseContext,\n\tuseLayoutEffect,\n\tuseMemo,\n\tuseRef,\n\tuseState,\n} from '@wordpress/element';\nimport { useRefEffect } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { BlockRefs } from '../../provider/block-refs-provider';\n\n/** @typedef {import('@wordpress/element').RefCallback} RefCallback */\n/** @typedef {import('@wordpress/element').RefObject} RefObject */\n\n/**\n * Provides a ref to the BlockRefs context.\n *\n * @param {string} clientId The client ID of the element ref.\n *\n * @return {RefCallback} Ref callback.\n */\nexport function useBlockRefProvider( clientId ) {\n\tconst { refs, callbacks } = useContext( BlockRefs );\n\tconst ref = useRef();\n\tuseLayoutEffect( () => {\n\t\trefs.set( ref, clientId );\n\t\treturn () => {\n\t\t\trefs.delete( ref );\n\t\t};\n\t}, [ clientId ] );\n\treturn useRefEffect(\n\t\t( element ) => {\n\t\t\t// Update the ref in the provider.\n\t\t\tref.current = element;\n\t\t\t// Call any update functions.\n\t\t\tcallbacks.forEach( ( id, setElement ) => {\n\t\t\t\tif ( clientId === id ) {\n\t\t\t\t\tsetElement( element );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\t\t[ clientId ]\n\t);\n}\n\n/**\n * Gets a ref pointing to the current block element. Continues to return a\n * stable ref even if the block client ID changes.\n *\n * @param {string} clientId The client ID to get a ref for.\n *\n * @return {RefObject} A ref containing the element.\n */\nfunction useBlockRef( clientId ) {\n\tconst { refs } = useContext( BlockRefs );\n\tconst freshClientId = useRef();\n\tfreshClientId.current = clientId;\n\t// Always return an object, even if no ref exists for a given client ID, so\n\t// that `current` works at a later point.\n\treturn useMemo(\n\t\t() => ( {\n\t\t\tget current() {\n\t\t\t\tlet element = null;\n\n\t\t\t\t// Multiple refs may be created for a single block. Find the\n\t\t\t\t// first that has an element set.\n\t\t\t\tfor ( const [ ref, id ] of refs.entries() ) {\n\t\t\t\t\tif ( id === freshClientId.current && ref.current ) {\n\t\t\t\t\t\telement = ref.current;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn element;\n\t\t\t},\n\t\t} ),\n\t\t[]\n\t);\n}\n\n/**\n * Return the element for a given client ID. Updates whenever the element\n * changes, becomes available, or disappears.\n *\n * @param {string} clientId The client ID to an element for.\n *\n * @return {Element|null} The block's wrapper element.\n */\nfunction useBlockElement( clientId ) {\n\tconst { callbacks } = useContext( BlockRefs );\n\tconst ref = useBlockRef( clientId );\n\tconst [ element, setElement ] = useState( null );\n\n\tuseLayoutEffect( () => {\n\t\tif ( ! clientId ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcallbacks.set( setElement, clientId );\n\t\treturn () => {\n\t\t\tcallbacks.delete( setElement );\n\t\t};\n\t}, [ clientId ] );\n\n\treturn ref.current || element;\n}\n\nexport { useBlockRef as __unstableUseBlockRef };\nexport { useBlockElement as __unstableUseBlockElement };\n"]}