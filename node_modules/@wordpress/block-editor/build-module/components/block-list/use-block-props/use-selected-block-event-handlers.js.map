{"version":3,"sources":["@wordpress/block-editor/src/components/block-list/use-block-props/use-selected-block-event-handlers.js"],"names":["isTextField","ENTER","BACKSPACE","DELETE","useSelect","useDispatch","useRefEffect","store","blockEditorStore","useEventHandlers","clientId","isSelected","select","isBlockSelected","getBlockRootClientId","getBlockIndex","insertDefaultBlock","removeBlock","node","onKeyDown","event","keyCode","target","preventDefault","onDragStart","addEventListener","removeEventListener"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,WAAT,QAA4B,gBAA5B;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,qBAAzC;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,iBAAvC;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA;AACA;AACA;;AACA,SAASC,KAAK,IAAIC,gBAAlB,QAA0C,gBAA1C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA2BC,QAA3B,EAAsC;AAC5C,QAAMC,UAAU,GAAGP,SAAS,CACzBQ,MAAF,IAAcA,MAAM,CAAEJ,gBAAF,CAAN,CAA2BK,eAA3B,CAA4CH,QAA5C,CADa,EAE3B,CAAEA,QAAF,CAF2B,CAA5B;AAIA,QAAM;AAAEI,IAAAA,oBAAF;AAAwBC,IAAAA;AAAxB,MAA0CX,SAAS,CACxDI,gBADwD,CAAzD;AAGA,QAAM;AAAEQ,IAAAA,kBAAF;AAAsBC,IAAAA;AAAtB,MAAsCZ,WAAW,CAAEG,gBAAF,CAAvD;AAEA,SAAOF,YAAY,CAChBY,IAAF,IAAY;AACX,QAAK,CAAEP,UAAP,EAAoB;AACnB;AACA;AAED;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACG,aAASQ,SAAT,CAAoBC,KAApB,EAA4B;AAC3B,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAsBF,KAA5B;;AAEA,UACCC,OAAO,KAAKpB,KAAZ,IACAoB,OAAO,KAAKnB,SADZ,IAEAmB,OAAO,KAAKlB,MAHb,EAIE;AACD;AACA;;AAED,UAAKmB,MAAM,KAAKJ,IAAX,IAAmBlB,WAAW,CAAEsB,MAAF,CAAnC,EAAgD;AAC/C;AACA;;AAEDF,MAAAA,KAAK,CAACG,cAAN;;AAEA,UAAKF,OAAO,KAAKpB,KAAjB,EAAyB;AACxBe,QAAAA,kBAAkB,CACjB,EADiB,EAEjBF,oBAAoB,CAAEJ,QAAF,CAFH,EAGjBK,aAAa,CAAEL,QAAF,CAAb,GAA4B,CAHX,CAAlB;AAKA,OAND,MAMO;AACNO,QAAAA,WAAW,CAAEP,QAAF,CAAX;AACA;AACD;AAED;AACH;AACA;AACA;AACA;AACA;;;AACG,aAASc,WAAT,CAAsBJ,KAAtB,EAA8B;AAC7BA,MAAAA,KAAK,CAACG,cAAN;AACA;;AAEDL,IAAAA,IAAI,CAACO,gBAAL,CAAuB,SAAvB,EAAkCN,SAAlC;AACAD,IAAAA,IAAI,CAACO,gBAAL,CAAuB,WAAvB,EAAoCD,WAApC;AAEA,WAAO,MAAM;AACZN,MAAAA,IAAI,CAACQ,mBAAL,CAA0B,SAA1B,EAAqCP,SAArC;AACAD,MAAAA,IAAI,CAACQ,mBAAL,CAA0B,WAA1B,EAAuCF,WAAvC;AACA,KAHD;AAIA,GA5DiB,EA6DlB,CACCd,QADD,EAECC,UAFD,EAGCG,oBAHD,EAICC,aAJD,EAKCC,kBALD,EAMCC,WAND,CA7DkB,CAAnB;AAsEA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { isTextField } from '@wordpress/dom';\nimport { ENTER, BACKSPACE, DELETE } from '@wordpress/keycodes';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { useRefEffect } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../../store';\n\n/**\n * Adds block behaviour:\n *   - Removes the block on BACKSPACE.\n *   - Inserts a default block on ENTER.\n *   - Disables dragging of block contents.\n *\n * @param {string} clientId Block client ID.\n */\nexport function useEventHandlers( clientId ) {\n\tconst isSelected = useSelect(\n\t\t( select ) => select( blockEditorStore ).isBlockSelected( clientId ),\n\t\t[ clientId ]\n\t);\n\tconst { getBlockRootClientId, getBlockIndex } = useSelect(\n\t\tblockEditorStore\n\t);\n\tconst { insertDefaultBlock, removeBlock } = useDispatch( blockEditorStore );\n\n\treturn useRefEffect(\n\t\t( node ) => {\n\t\t\tif ( ! isSelected ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Interprets keydown event intent to remove or insert after block if\n\t\t\t * key event occurs on wrapper node. This can occur when the block has\n\t\t\t * no text fields of its own, particularly after initial insertion, to\n\t\t\t * allow for easy deletion and continuous writing flow to add additional\n\t\t\t * content.\n\t\t\t *\n\t\t\t * @param {KeyboardEvent} event Keydown event.\n\t\t\t */\n\t\t\tfunction onKeyDown( event ) {\n\t\t\t\tconst { keyCode, target } = event;\n\n\t\t\t\tif (\n\t\t\t\t\tkeyCode !== ENTER &&\n\t\t\t\t\tkeyCode !== BACKSPACE &&\n\t\t\t\t\tkeyCode !== DELETE\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( target !== node || isTextField( target ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\tif ( keyCode === ENTER ) {\n\t\t\t\t\tinsertDefaultBlock(\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tgetBlockRootClientId( clientId ),\n\t\t\t\t\t\tgetBlockIndex( clientId ) + 1\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tremoveBlock( clientId );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Prevents default dragging behavior within a block. To do: we must\n\t\t\t * handle this in the future and clean up the drag target.\n\t\t\t *\n\t\t\t * @param {DragEvent} event Drag event.\n\t\t\t */\n\t\t\tfunction onDragStart( event ) {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\n\t\t\tnode.addEventListener( 'keydown', onKeyDown );\n\t\t\tnode.addEventListener( 'dragstart', onDragStart );\n\n\t\t\treturn () => {\n\t\t\t\tnode.removeEventListener( 'keydown', onKeyDown );\n\t\t\t\tnode.removeEventListener( 'dragstart', onDragStart );\n\t\t\t};\n\t\t},\n\t\t[\n\t\t\tclientId,\n\t\t\tisSelected,\n\t\t\tgetBlockRootClientId,\n\t\t\tgetBlockIndex,\n\t\t\tinsertDefaultBlock,\n\t\t\tremoveBlock,\n\t\t]\n\t);\n}\n"]}