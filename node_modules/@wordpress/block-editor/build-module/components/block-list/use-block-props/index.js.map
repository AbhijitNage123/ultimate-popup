{"version":3,"sources":["@wordpress/block-editor/src/components/block-list/use-block-props/index.js"],"names":["classnames","useContext","__","sprintf","__unstableGetBlockProps","getBlockProps","getBlockType","hasBlockSupport","useMergeRefs","useSelect","warning","useMovingAnimation","BlockListBlockContext","useFocusFirstElement","useIsHovered","useBlockEditContext","useBlockClassNames","useBlockDefaultClassName","useBlockCustomClassName","useBlockMovingModeClassNames","useFocusHandler","useEventHandlers","useNavModeExit","useScrollIntoView","useBlockRefProvider","useMultiSelection","useIntersectionObserver","store","blockEditorStore","BLOCK_ANIMATION_THRESHOLD","useBlockProps","props","__unstableIsHtml","clientId","className","wrapperProps","isAligned","index","mode","name","blockTitle","isPartOfSelection","adjustScrolling","enableAnimation","lightBlockWrapper","select","getBlockRootClientId","getBlockIndex","getBlockMode","getBlockName","isTyping","getGlobalBlockCount","isBlockSelected","isBlockMultiSelected","isAncestorMultiSelected","isFirstMultiSelectedBlock","isSelected","isPartOfMultiSelection","blockName","rootClientId","blockType","title","apiVersion","blockLabel","htmlSuffix","mergedRefs","ref","triggerAnimationOnChange","blockEditContext","id","tabIndex","role","style","save"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { useContext } from '@wordpress/element';\nimport { __, sprintf } from '@wordpress/i18n';\nimport {\n\t__unstableGetBlockProps as getBlockProps,\n\tgetBlockType,\n\thasBlockSupport,\n} from '@wordpress/blocks';\nimport { useMergeRefs } from '@wordpress/compose';\nimport { useSelect } from '@wordpress/data';\nimport warning from '@wordpress/warning';\n\n/**\n * Internal dependencies\n */\nimport useMovingAnimation from '../../use-moving-animation';\nimport { BlockListBlockContext } from '../block';\nimport { useFocusFirstElement } from './use-focus-first-element';\nimport { useIsHovered } from './use-is-hovered';\nimport { useBlockEditContext } from '../../block-edit/context';\nimport { useBlockClassNames } from './use-block-class-names';\nimport { useBlockDefaultClassName } from './use-block-default-class-name';\nimport { useBlockCustomClassName } from './use-block-custom-class-name';\nimport { useBlockMovingModeClassNames } from './use-block-moving-mode-class-names';\nimport { useFocusHandler } from './use-focus-handler';\nimport { useEventHandlers } from './use-selected-block-event-handlers';\nimport { useNavModeExit } from './use-nav-mode-exit';\nimport { useScrollIntoView } from './use-scroll-into-view';\nimport { useBlockRefProvider } from './use-block-refs';\nimport { useMultiSelection } from './use-multi-selection';\nimport { useIntersectionObserver } from './use-intersection-observer';\nimport { store as blockEditorStore } from '../../../store';\n\n/**\n * If the block count exceeds the threshold, we disable the reordering animation\n * to avoid laginess.\n */\nconst BLOCK_ANIMATION_THRESHOLD = 200;\n\n/**\n * This hook is used to lightly mark an element as a block element. The element\n * should be the outermost element of a block. Call this hook and pass the\n * returned props to the element to mark as a block. If you define a ref for the\n * element, it is important to pass the ref to this hook, which the hook in turn\n * will pass to the component through the props it returns. Optionally, you can\n * also pass any other props through this hook, and they will be merged and\n * returned.\n *\n * @param {Object}  props                    Optional. Props to pass to the element. Must contain\n *                                           the ref if one is defined.\n * @param {Object}  options                  Options for internal use only.\n * @param {boolean} options.__unstableIsHtml\n *\n * @return {Object} Props to pass to the element to mark as a block.\n */\nexport function useBlockProps( props = {}, { __unstableIsHtml } = {} ) {\n\tconst { clientId, className, wrapperProps = {}, isAligned } = useContext(\n\t\tBlockListBlockContext\n\t);\n\tconst {\n\t\tindex,\n\t\tmode,\n\t\tname,\n\t\tblockTitle,\n\t\tisPartOfSelection,\n\t\tadjustScrolling,\n\t\tenableAnimation,\n\t\tlightBlockWrapper,\n\t} = useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\tgetBlockRootClientId,\n\t\t\t\tgetBlockIndex,\n\t\t\t\tgetBlockMode,\n\t\t\t\tgetBlockName,\n\t\t\t\tisTyping,\n\t\t\t\tgetGlobalBlockCount,\n\t\t\t\tisBlockSelected,\n\t\t\t\tisBlockMultiSelected,\n\t\t\t\tisAncestorMultiSelected,\n\t\t\t\tisFirstMultiSelectedBlock,\n\t\t\t} = select( blockEditorStore );\n\t\t\tconst isSelected = isBlockSelected( clientId );\n\t\t\tconst isPartOfMultiSelection =\n\t\t\t\tisBlockMultiSelected( clientId ) ||\n\t\t\t\tisAncestorMultiSelected( clientId );\n\t\t\tconst blockName = getBlockName( clientId );\n\t\t\tconst rootClientId = getBlockRootClientId( clientId );\n\t\t\tconst blockType = getBlockType( blockName );\n\n\t\t\treturn {\n\t\t\t\tindex: getBlockIndex( clientId, rootClientId ),\n\t\t\t\tmode: getBlockMode( clientId ),\n\t\t\t\tname: blockName,\n\t\t\t\tblockTitle: blockType.title,\n\t\t\t\tisPartOfSelection: isSelected || isPartOfMultiSelection,\n\t\t\t\tadjustScrolling:\n\t\t\t\t\tisSelected || isFirstMultiSelectedBlock( clientId ),\n\t\t\t\tenableAnimation:\n\t\t\t\t\t! isTyping() &&\n\t\t\t\t\tgetGlobalBlockCount() <= BLOCK_ANIMATION_THRESHOLD,\n\t\t\t\tlightBlockWrapper:\n\t\t\t\t\tblockType.apiVersion > 1 ||\n\t\t\t\t\thasBlockSupport( blockType, 'lightBlockWrapper', false ),\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\t// translators: %s: Type of block (i.e. Text, Image etc)\n\tconst blockLabel = sprintf( __( 'Block: %s' ), blockTitle );\n\tconst htmlSuffix = mode === 'html' && ! __unstableIsHtml ? '-visual' : '';\n\tconst mergedRefs = useMergeRefs( [\n\t\tprops.ref,\n\t\tuseFocusFirstElement( clientId ),\n\t\t// Must happen after focus because we check for focus in the block.\n\t\tuseScrollIntoView( clientId ),\n\t\tuseBlockRefProvider( clientId ),\n\t\tuseFocusHandler( clientId ),\n\t\tuseMultiSelection( clientId ),\n\t\tuseEventHandlers( clientId ),\n\t\tuseNavModeExit( clientId ),\n\t\tuseIsHovered(),\n\t\tuseIntersectionObserver(),\n\t\tuseMovingAnimation( {\n\t\t\tisSelected: isPartOfSelection,\n\t\t\tadjustScrolling,\n\t\t\tenableAnimation,\n\t\t\ttriggerAnimationOnChange: index,\n\t\t} ),\n\t] );\n\n\tconst blockEditContext = useBlockEditContext();\n\t// Ensures it warns only inside the `edit` implementation for the block.\n\tif ( ! lightBlockWrapper && clientId === blockEditContext.clientId ) {\n\t\twarning(\n\t\t\t`Block type \"${ name }\" must support API version 2 or higher to work correctly with \"useBlockProps\" method.`\n\t\t);\n\t}\n\n\treturn {\n\t\t...wrapperProps,\n\t\t...props,\n\t\tref: mergedRefs,\n\t\tid: `block-${ clientId }${ htmlSuffix }`,\n\t\ttabIndex: 0,\n\t\trole: 'group',\n\t\t'aria-label': blockLabel,\n\t\t'data-block': clientId,\n\t\t'data-type': name,\n\t\t'data-title': blockTitle,\n\t\tclassName: classnames(\n\t\t\t// The wp-block className is important for editor styles.\n\t\t\tclassnames( 'block-editor-block-list__block', {\n\t\t\t\t'wp-block': ! isAligned,\n\t\t\t} ),\n\t\t\tclassName,\n\t\t\tprops.className,\n\t\t\twrapperProps.className,\n\t\t\tuseBlockClassNames( clientId ),\n\t\t\tuseBlockDefaultClassName( clientId ),\n\t\t\tuseBlockCustomClassName( clientId ),\n\t\t\tuseBlockMovingModeClassNames( clientId )\n\t\t),\n\t\tstyle: { ...wrapperProps.style, ...props.style },\n\t};\n}\n\n/**\n * Call within a save function to get the props for the block wrapper.\n *\n * @param {Object} props Optional. Props to pass to the element.\n */\nuseBlockProps.save = getBlockProps;\n"]}