{"version":3,"sources":["@wordpress/block-editor/src/components/block-list/block-html.js"],"names":["TextareaAutosize","useEffect","useState","useSelect","useDispatch","getBlockAttributes","getBlockContent","getBlockType","isValidBlockContent","getSaveContent","store","blockEditorStore","BlockHTML","clientId","html","setHtml","block","select","getBlock","updateBlock","onChange","blockType","name","attributes","content","isValid","originalContent","event","target","value"],"mappings":";;AAAA;AACA;AACA;AACA,OAAOA,gBAAP,MAA6B,yBAA7B;AAEA;AACA;AACA;;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,oBAApC;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,iBAAvC;AACA,SACCC,kBADD,EAECC,eAFD,EAGCC,YAHD,EAICC,mBAJD,EAKCC,cALD,QAMO,mBANP;AAQA;AACA;AACA;;AACA,SAASC,KAAK,IAAIC,gBAAlB,QAA0C,aAA1C;;AAEA,SAASC,SAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAmC;AAClC,QAAM,CAAEC,IAAF,EAAQC,OAAR,IAAoBb,QAAQ,CAAE,EAAF,CAAlC;AACA,QAAMc,KAAK,GAAGb,SAAS,CACpBc,MAAF,IAAcA,MAAM,CAAEN,gBAAF,CAAN,CAA2BO,QAA3B,CAAqCL,QAArC,CADQ,EAEtB,CAAEA,QAAF,CAFsB,CAAvB;AAIA,QAAM;AAAEM,IAAAA;AAAF,MAAkBf,WAAW,CAAEO,gBAAF,CAAnC;;AACA,QAAMS,QAAQ,GAAG,MAAM;AACtB,UAAMC,SAAS,GAAGd,YAAY,CAAES,KAAK,CAACM,IAAR,CAA9B;AACA,UAAMC,UAAU,GAAGlB,kBAAkB,CACpCgB,SADoC,EAEpCP,IAFoC,EAGpCE,KAAK,CAACO,UAH8B,CAArC,CAFsB,CAQtB;;AACA,UAAMC,OAAO,GAAGV,IAAI,GAAGA,IAAH,GAAUL,cAAc,CAAEY,SAAF,EAAaE,UAAb,CAA5C;AACA,UAAME,OAAO,GAAGX,IAAI,GACjBN,mBAAmB,CAAEa,SAAF,EAAaE,UAAb,EAAyBC,OAAzB,CADF,GAEjB,IAFH;AAIAL,IAAAA,WAAW,CAAEN,QAAF,EAAY;AACtBU,MAAAA,UADsB;AAEtBG,MAAAA,eAAe,EAAEF,OAFK;AAGtBC,MAAAA;AAHsB,KAAZ,CAAX,CAdsB,CAoBtB;;AACA,QAAK,CAAEX,IAAP,EAAc;AACbC,MAAAA,OAAO,CAAE;AAAES,QAAAA;AAAF,OAAF,CAAP;AACA;AACD,GAxBD;;AA0BAvB,EAAAA,SAAS,CAAE,MAAM;AAChBc,IAAAA,OAAO,CAAET,eAAe,CAAEU,KAAF,CAAjB,CAAP;AACA,GAFQ,EAEN,CAAEA,KAAF,CAFM,CAAT;AAIA,SACC,cAAC,gBAAD;AACC,IAAA,SAAS,EAAC,8CADX;AAEC,IAAA,KAAK,EAAGF,IAFT;AAGC,IAAA,MAAM,EAAGM,QAHV;AAIC,IAAA,QAAQ,EAAKO,KAAF,IAAaZ,OAAO,CAAEY,KAAK,CAACC,MAAN,CAAaC,KAAf;AAJhC,IADD;AAQA;;AAED,eAAejB,SAAf","sourcesContent":["/**\n * External dependencies\n */\nimport TextareaAutosize from 'react-autosize-textarea';\n\n/**\n * WordPress dependencies\n */\nimport { useEffect, useState } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport {\n\tgetBlockAttributes,\n\tgetBlockContent,\n\tgetBlockType,\n\tisValidBlockContent,\n\tgetSaveContent,\n} from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\n\nfunction BlockHTML( { clientId } ) {\n\tconst [ html, setHtml ] = useState( '' );\n\tconst block = useSelect(\n\t\t( select ) => select( blockEditorStore ).getBlock( clientId ),\n\t\t[ clientId ]\n\t);\n\tconst { updateBlock } = useDispatch( blockEditorStore );\n\tconst onChange = () => {\n\t\tconst blockType = getBlockType( block.name );\n\t\tconst attributes = getBlockAttributes(\n\t\t\tblockType,\n\t\t\thtml,\n\t\t\tblock.attributes\n\t\t);\n\n\t\t// If html is empty  we reset the block to the default HTML and mark it as valid to avoid triggering an error\n\t\tconst content = html ? html : getSaveContent( blockType, attributes );\n\t\tconst isValid = html\n\t\t\t? isValidBlockContent( blockType, attributes, content )\n\t\t\t: true;\n\n\t\tupdateBlock( clientId, {\n\t\t\tattributes,\n\t\t\toriginalContent: content,\n\t\t\tisValid,\n\t\t} );\n\n\t\t// Ensure the state is updated if we reset so it displays the default content\n\t\tif ( ! html ) {\n\t\t\tsetHtml( { content } );\n\t\t}\n\t};\n\n\tuseEffect( () => {\n\t\tsetHtml( getBlockContent( block ) );\n\t}, [ block ] );\n\n\treturn (\n\t\t<TextareaAutosize\n\t\t\tclassName=\"block-editor-block-list__block-html-textarea\"\n\t\t\tvalue={ html }\n\t\t\tonBlur={ onChange }\n\t\t\tonChange={ ( event ) => setHtml( event.target.value ) }\n\t\t/>\n\t);\n}\n\nexport default BlockHTML;\n"]}