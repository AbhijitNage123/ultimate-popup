{"version":3,"sources":["@wordpress/block-editor/src/store/selectors.js"],"names":["castArray","flatMap","first","isArray","isBoolean","last","map","reduce","some","find","filter","mapKeys","orderBy","createSelector","getBlockType","getBlockTypes","hasBlockSupport","getPossibleBlockTransformations","parse","SVG","Rect","G","Path","Platform","MILLISECONDS_PER_HOUR","MILLISECONDS_PER_DAY","MILLISECONDS_PER_WEEK","templateIcon","EMPTY_ARRAY","getBlockName","state","clientId","block","blocks","byClientId","socialLinkName","OS","name","attributes","service","isBlockValid","isValid","getBlockAttributes","getBlock","innerBlocks","areInnerBlocksControlled","getBlocks","cache","__unstableGetBlockWithoutInnerBlocks","rootClientId","getBlockOrder","order","id","__unstableGetBlockWithBlockTree","__unstableGetBlockTree","__unstableGetClientIdWithClientIdsTree","__unstableGetClientIdsTree","getClientIdsOfDescendants","clientIds","descendants","getClientIdsWithDescendants","topLevelIds","getGlobalBlockCount","blockName","length","accumulator","getBlocksByClientId","getBlockCount","getSelectionStart","selection","selectionStart","getSelectionEnd","selectionEnd","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","multiSelectedBlockCount","getMultiSelectedBlockClientIds","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","parents","undefined","getBlockParents","ascending","current","push","reverse","getBlockParentsByBlockName","Array","includes","getBlockHierarchyRootClientId","parent","getLowestCommonAncestorWithSelectedBlock","selectedId","clientParents","selectedParents","lowestCommonAncestor","maxDepth","Math","min","index","getAdjacentBlockClientId","startClientId","modifier","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","orderSet","indexOf","nextIndex","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","initialPosition","getSelectedBlockClientIds","blockOrder","startIndex","endIndex","slice","getMultiSelectedBlocks","multiSelectedBlockClientIds","getDependants","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","ancestorClientId","isMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","deep","innerClientId","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","blocksMode","isTyping","isDraggingBlocks","draggedBlocks","getDraggedBlockClientIds","isBlockBeingDragged","isAncestorBeingDragged","parentClientId","isCaretWithinFormattedText","getBlockInsertionPoint","insertionPoint","isBlockInsertionPointVisible","isValidTemplate","template","getTemplate","settings","getTemplateLock","templateLock","blockListSettings","getBlockListSettings","checkAllowList","list","item","defaultResult","canInsertBlockTypeUnmemoized","blockType","allowedBlockTypes","getSettings","isBlockAllowedInEditor","isLocked","parentBlockListSettings","parentAllowedBlocks","allowedBlocks","hasParentAllowedBlock","blockAllowedParentBlocks","parentName","hasBlockAllowedParent","canInsertBlockType","canInsertBlocks","every","getInsertUsage","preferences","insertUsage","canIncludeBlockTypeInInserter","getItemFromVariation","variation","variationId","time","count","icon","title","description","category","example","hasOwnProperty","initialAttributes","keywords","frecency","calculateFrecency","duration","Date","now","buildBlockTypeItem","buildScope","isDisabled","blockItemBase","inserterVariations","variations","scope","utility","getInserterItems","buildBlockTypeInserterItem","buildReusableBlockInserterItem","reusableBlock","referencedBlocks","__experimentalGetParsedReusableBlock","referencedBlockType","ref","raw","blockTypeInserterItems","reusableBlockInserterItems","getReusableBlocks","visibleBlockTypeInserterItems","isDefault","blockVariations","variationMapper","prioritizeCoreBlocks","a","b","coreBlockNamePrefix","firstIsCoreBlock","startsWith","secondIsCoreBlock","sortedBlockTypes","sort","getBlockTransformItems","buildBlockTypeTransformItem","blockTypeTransformItems","itemsByName","possibleTransforms","possibleBlockTransformations","hasInserterItems","hasBlockType","hasReusableBlock","__experimentalGetAllowedBlocks","checkAllowListRecursive","blocksQueue","shift","isAllowed","forEach","innerBlock","__experimentalGetParsedPattern","patternName","patterns","__experimentalBlockPatterns","pattern","content","getAllAllowedPatterns","parsedPatterns","allowedPatterns","__experimentalGetAllowedPatterns","availableParsedPatterns","patternsAllowed","__experimentalGetPatternsByBlockTypes","blockNames","normalizedBlockNames","blockTypes","__experimentalGetPatternTransformItems","selectedBlockNames","from","Set","isLastBlockChangePersistent","isPersistentChange","__experimentalGetBlockListSettingsForBlocks","blockListSettingsForBlocks","__experimentalGetReusableBlockTitle","__unstableIsLastBlockChangeIgnored","isIgnoredChange","__experimentalGetLastBlockAttributeChanges","lastBlockAttributesChange","__experimentalReusableBlocks","isNavigationMode","hasBlockMovingClientId","didAutomaticChange","automaticChangeStatus","isBlockHighlighted","highlightedBlock","controlledInnerBlocks","__experimentalGetActiveBlockIdByBlockNames","validBlockNames","selectedBlockClientId","entityAreaParents","wasBlockJustInserted","source","lastBlockInserted"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tcastArray,\n\tflatMap,\n\tfirst,\n\tisArray,\n\tisBoolean,\n\tlast,\n\tmap,\n\treduce,\n\tsome,\n\tfind,\n\tfilter,\n\tmapKeys,\n\torderBy,\n} from 'lodash';\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetBlockType,\n\tgetBlockTypes,\n\thasBlockSupport,\n\tgetPossibleBlockTransformations,\n\tparse,\n} from '@wordpress/blocks';\nimport { SVG, Rect, G, Path } from '@wordpress/components';\nimport { Platform } from '@wordpress/element';\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value. See `wp.richText.create`.\n */\n\n// Module constants\nconst MILLISECONDS_PER_HOUR = 3600 * 1000;\nconst MILLISECONDS_PER_DAY = 24 * 3600 * 1000;\nconst MILLISECONDS_PER_WEEK = 7 * 24 * 3600 * 1000;\nconst templateIcon = (\n\t<SVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n\t\t<Rect x=\"0\" fill=\"none\" width=\"24\" height=\"24\" />\n\t\t<G>\n\t\t\t<Path d=\"M19 3H5c-1.105 0-2 .895-2 2v14c0 1.105.895 2 2 2h14c1.105 0 2-.895 2-2V5c0-1.105-.895-2-2-2zM6 6h5v5H6V6zm4.5 13C9.12 19 8 17.88 8 16.5S9.12 14 10.5 14s2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5zm3-6l3-5 3 5h-6z\" />\n\t\t</G>\n\t</SVG>\n);\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Array}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Returns a block's name given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {string} Block name.\n */\nexport function getBlockName( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\tconst socialLinkName = 'core/social-link';\n\n\tif ( Platform.OS !== 'web' && block?.name === socialLinkName ) {\n\t\tconst attributes = state.blocks.attributes[ clientId ];\n\t\tconst { service } = attributes;\n\n\t\treturn service ? `${ socialLinkName }-${ service }` : socialLinkName;\n\t}\n\treturn block ? block.name : null;\n}\n\n/**\n * Returns whether a block is valid or not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Is Valid.\n */\nexport function isBlockValid( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\treturn !! block && block.isValid;\n}\n\n/**\n * Returns a block's attributes given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object?} Block attributes.\n */\nexport function getBlockAttributes( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\tif ( ! block ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.attributes[ clientId ];\n}\n\n/**\n * Returns a block given its client ID. This is a parsed copy of the block,\n * containing its `blockName`, `clientId`, and current `attributes` state. This\n * is not the block's registration settings, which must be retrieved from the\n * blocks module registration store.\n *\n * getBlock recurses through its inner blocks until all its children blocks have\n * been retrieved. Note that getBlock will not return the child inner blocks of\n * an inner block controller. This is because an inner block controller syncs\n * itself with its own entity, and should therefore not be included with the\n * blocks of a different entity. For example, say you call `getBlocks( TP )` to\n * get the blocks of a template part. If another template part is a child of TP,\n * then the nested template part's child blocks will not be returned. This way,\n * the template block itself is considered part of the parent, but the children\n * are not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Parsed block object.\n */\nexport const getBlock = createSelector(\n\t( state, clientId ) => {\n\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t\tinnerBlocks: areInnerBlocksControlled( state, clientId )\n\t\t\t\t? EMPTY_ARRAY\n\t\t\t\t: getBlocks( state, clientId ),\n\t\t};\n\t},\n\t( state, clientId ) => [\n\t\t// Normally, we'd have both `getBlockAttributes` dependencies and\n\t\t// `getBlocks` (children) dependencies here but for performance reasons\n\t\t// we use a denormalized cache key computed in the reducer that takes both\n\t\t// the attributes and inner blocks into account. The value of the cache key\n\t\t// is being changed whenever one of these dependencies is out of date.\n\t\tstate.blocks.cache[ clientId ],\n\t]\n);\n\nexport const __unstableGetBlockWithoutInnerBlocks = createSelector(\n\t( state, clientId ) => {\n\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t};\n\t},\n\t( state, clientId ) => [\n\t\tstate.blocks.byClientId[ clientId ],\n\t\tstate.blocks.attributes[ clientId ],\n\t]\n);\n\n/**\n * Returns all block objects for the current post being edited as an array in\n * the order they appear in the post. Note that this will exclude child blocks\n * of nested inner block controllers.\n *\n * Note: It's important to memoize this selector to avoid return a new instance\n * on each call. We use the block cache state for each top-level block of the\n * given clientID. This way, the selector only refreshes on changes to blocks\n * associated with the given entity, and does not refresh when changes are made\n * to blocks which are part of different inner block controllers.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Post blocks.\n */\nexport const getBlocks = createSelector(\n\t( state, rootClientId ) => {\n\t\treturn map( getBlockOrder( state, rootClientId ), ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t);\n\t},\n\t( state, rootClientId ) =>\n\t\tmap(\n\t\t\tstate.blocks.order[ rootClientId || '' ],\n\t\t\t( id ) => state.blocks.cache[ id ]\n\t\t)\n);\n\n/**\n * Similar to getBlock, except it will include the entire nested block tree as\n * inner blocks. The normal getBlock selector will exclude sections of the block\n * tree which belong to different entities.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Client ID of the block to get.\n *\n * @return {Object} The block with all\n */\nexport const __unstableGetBlockWithBlockTree = createSelector(\n\t( state, clientId ) => {\n\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t\tinnerBlocks: __unstableGetBlockTree( state, clientId ),\n\t\t};\n\t},\n\t( state ) => [\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Similar to getBlocks, except this selector returns the entire block tree\n * represented in the block-editor store from the given root regardless of any\n * inner block controllers.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Post blocks.\n */\nexport const __unstableGetBlockTree = createSelector(\n\t( state, rootClientId = '' ) =>\n\t\tmap( getBlockOrder( state, rootClientId ), ( clientId ) =>\n\t\t\t__unstableGetBlockWithBlockTree( state, clientId )\n\t\t),\n\t( state ) => [\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns a stripped down block object containing only its client ID,\n * and its inner blocks' client IDs.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Client ID of the block to get.\n *\n * @return {Object} Client IDs of the post blocks.\n */\nexport const __unstableGetClientIdWithClientIdsTree = createSelector(\n\t( state, clientId ) => ( {\n\t\tclientId,\n\t\tinnerBlocks: __unstableGetClientIdsTree( state, clientId ),\n\t} ),\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the block tree represented in the block-editor store from the\n * given root, consisting of stripped down block objects containing only\n * their client IDs, and their inner blocks' client IDs.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Client IDs of the post blocks.\n */\nexport const __unstableGetClientIdsTree = createSelector(\n\t( state, rootClientId = '' ) =>\n\t\tmap( getBlockOrder( state, rootClientId ), ( clientId ) =>\n\t\t\t__unstableGetClientIdWithClientIdsTree( state, clientId )\n\t\t),\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns an array containing the clientIds of all descendants\n * of the blocks given.\n *\n * @param {Object} state     Global application state.\n * @param {Array}  clientIds Array of blocks to inspect.\n *\n * @return {Array} ids of descendants.\n */\nexport const getClientIdsOfDescendants = ( state, clientIds ) =>\n\tflatMap( clientIds, ( clientId ) => {\n\t\tconst descendants = getBlockOrder( state, clientId );\n\t\treturn [\n\t\t\t...descendants,\n\t\t\t...getClientIdsOfDescendants( state, descendants ),\n\t\t];\n\t} );\n\n/**\n * Returns an array containing the clientIds of the top-level blocks\n * and their descendants of any depth (for nested blocks).\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} ids of top-level and descendant blocks.\n */\nexport const getClientIdsWithDescendants = createSelector(\n\t( state ) => {\n\t\tconst topLevelIds = getBlockOrder( state );\n\t\treturn [\n\t\t\t...topLevelIds,\n\t\t\t...getClientIdsOfDescendants( state, topLevelIds ),\n\t\t];\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the total number of blocks, or the total number of blocks with a specific name in a post.\n * The number returned includes nested blocks.\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if specified only blocks of that type will be counted.\n *\n * @return {number} Number of blocks in the post, or number of blocks with name equal to blockName.\n */\nexport const getGlobalBlockCount = createSelector(\n\t( state, blockName ) => {\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tif ( ! blockName ) {\n\t\t\treturn clientIds.length;\n\t\t}\n\t\treturn reduce(\n\t\t\tclientIds,\n\t\t\t( accumulator, clientId ) => {\n\t\t\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\t\t\treturn block.name === blockName ? accumulator + 1 : accumulator;\n\t\t\t},\n\t\t\t0\n\t\t);\n\t},\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\n);\n\n/**\n * Given an array of block client IDs, returns the corresponding array of block\n * objects.\n *\n * @param {Object}   state     Editor state.\n * @param {string[]} clientIds Client IDs for which blocks are to be returned.\n *\n * @return {WPBlock[]} Block objects.\n */\nexport const getBlocksByClientId = createSelector(\n\t( state, clientIds ) =>\n\t\tmap( castArray( clientIds ), ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t),\n\t( state ) => [\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns the number of blocks currently present in the post.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Number of blocks in the post.\n */\nexport function getBlockCount( state, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).length;\n}\n\n/**\n * Returns the current selection start block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection start information.\n */\nexport function getSelectionStart( state ) {\n\treturn state.selection.selectionStart;\n}\n\n/**\n * Returns the current selection end block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection end information.\n */\nexport function getSelectionEnd( state ) {\n\treturn state.selection.selectionEnd;\n}\n\n/**\n * Returns the current block selection start. This value may be null, and it\n * may represent either a singular block selection or multi-selection start.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection start.\n */\nexport function getBlockSelectionStart( state ) {\n\treturn state.selection.selectionStart.clientId;\n}\n\n/**\n * Returns the current block selection end. This value may be null, and it\n * may represent either a singular block selection or multi-selection end.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection end.\n */\nexport function getBlockSelectionEnd( state ) {\n\treturn state.selection.selectionEnd.clientId;\n}\n\n/**\n * Returns the number of blocks currently selected in the post.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of blocks selected in the post.\n */\nexport function getSelectedBlockCount( state ) {\n\tconst multiSelectedBlockCount = getMultiSelectedBlockClientIds( state )\n\t\t.length;\n\n\tif ( multiSelectedBlockCount ) {\n\t\treturn multiSelectedBlockCount;\n\t}\n\n\treturn state.selection.selectionStart.clientId ? 1 : 0;\n}\n\n/**\n * Returns true if there is a single selected block, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether a single block is selected.\n */\nexport function hasSelectedBlock( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\treturn (\n\t\t!! selectionStart.clientId &&\n\t\tselectionStart.clientId === selectionEnd.clientId\n\t);\n}\n\n/**\n * Returns the currently selected block client ID, or null if there is no\n * selected block.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Selected block client ID.\n */\nexport function getSelectedBlockClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\tconst { clientId } = selectionStart;\n\n\tif ( ! clientId || clientId !== selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn clientId;\n}\n\n/**\n * Returns the currently selected block, or null if there is no selected block.\n *\n * @param {Object} state Global application state.\n *\n * @return {?Object} Selected block.\n */\nexport function getSelectedBlock( state ) {\n\tconst clientId = getSelectedBlockClientId( state );\n\treturn clientId ? getBlock( state, clientId ) : null;\n}\n\n/**\n * Given a block client ID, returns the root block from which the block is\n * nested, an empty string for top-level blocks, or null if the block does not\n * exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {?string} Root client ID, if exists\n */\nexport function getBlockRootClientId( state, clientId ) {\n\treturn state.blocks.parents[ clientId ] !== undefined\n\t\t? state.blocks.parents[ clientId ]\n\t\t: null;\n}\n\n/**\n * Given a block client ID, returns the list of all its parents from top to bottom.\n *\n * @param {Object}  state     Editor state.\n * @param {string}  clientId  Block from which to find root client ID.\n * @param {boolean} ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParents = createSelector(\n\t( state, clientId, ascending = false ) => {\n\t\tconst parents = [];\n\t\tlet current = clientId;\n\t\twhile ( !! state.blocks.parents[ current ] ) {\n\t\t\tcurrent = state.blocks.parents[ current ];\n\t\t\tparents.push( current );\n\t\t}\n\n\t\treturn ascending ? parents : parents.reverse();\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID and a block name, returns the list of all its parents\n * from top to bottom, filtered by the given name(s). For example, if passed\n * 'core/group' as the blockName, it will only return parents which are group\n * blocks. If passed `[ 'core/group', 'core/cover']`, as the blockName, it will\n * return parents which are group blocks and parents which are cover blocks.\n *\n * @param {Object}          state     Editor state.\n * @param {string}          clientId  Block from which to find root client ID.\n * @param {string|string[]} blockName Block name(s) to filter.\n * @param {boolean}         ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParentsByBlockName = createSelector(\n\t( state, clientId, blockName, ascending = false ) => {\n\t\tconst parents = getBlockParents( state, clientId, ascending );\n\t\treturn map(\n\t\t\tfilter(\n\t\t\t\tmap( parents, ( id ) => ( {\n\t\t\t\t\tid,\n\t\t\t\t\tname: getBlockName( state, id ),\n\t\t\t\t} ) ),\n\t\t\t\t( { name } ) => {\n\t\t\t\t\tif ( Array.isArray( blockName ) ) {\n\t\t\t\t\t\treturn blockName.includes( name );\n\t\t\t\t\t}\n\t\t\t\t\treturn name === blockName;\n\t\t\t\t}\n\t\t\t),\n\t\t\t( { id } ) => id\n\t\t);\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID, returns the root of the hierarchy from which the block is nested, return the block itself for root level blocks.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {string} Root client ID\n */\nexport function getBlockHierarchyRootClientId( state, clientId ) {\n\tlet current = clientId;\n\tlet parent;\n\tdo {\n\t\tparent = current;\n\t\tcurrent = state.blocks.parents[ current ];\n\t} while ( current );\n\treturn parent;\n}\n\n/**\n * Given a block client ID, returns the lowest common ancestor with selected client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find common ancestor client ID.\n *\n * @return {string} Common ancestor client ID or undefined\n */\nexport function getLowestCommonAncestorWithSelectedBlock( state, clientId ) {\n\tconst selectedId = getSelectedBlockClientId( state );\n\tconst clientParents = [ ...getBlockParents( state, clientId ), clientId ];\n\tconst selectedParents = [\n\t\t...getBlockParents( state, selectedId ),\n\t\tselectedId,\n\t];\n\n\tlet lowestCommonAncestor;\n\n\tconst maxDepth = Math.min( clientParents.length, selectedParents.length );\n\tfor ( let index = 0; index < maxDepth; index++ ) {\n\t\tif ( clientParents[ index ] === selectedParents[ index ] ) {\n\t\t\tlowestCommonAncestor = clientParents[ index ];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn lowestCommonAncestor;\n}\n\n/**\n * Returns the client ID of the block adjacent one at the given reference\n * startClientId and modifier directionality. Defaults start startClientId to\n * the selected block, and direction as next block. Returns null if there is no\n * adjacent block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n * @param {?number} modifier      Directionality multiplier (1 next, -1\n *                                previous).\n *\n * @return {?string} Return the client ID of the block, or null if none exists.\n */\nexport function getAdjacentBlockClientId( state, startClientId, modifier = 1 ) {\n\t// Default to selected block.\n\tif ( startClientId === undefined ) {\n\t\tstartClientId = getSelectedBlockClientId( state );\n\t}\n\n\t// Try multi-selection starting at extent based on modifier.\n\tif ( startClientId === undefined ) {\n\t\tif ( modifier < 0 ) {\n\t\t\tstartClientId = getFirstMultiSelectedBlockClientId( state );\n\t\t} else {\n\t\t\tstartClientId = getLastMultiSelectedBlockClientId( state );\n\t\t}\n\t}\n\n\t// Validate working start client ID.\n\tif ( ! startClientId ) {\n\t\treturn null;\n\t}\n\n\t// Retrieve start block root client ID, being careful to allow the falsey\n\t// empty string top-level root by explicitly testing against null.\n\tconst rootClientId = getBlockRootClientId( state, startClientId );\n\tif ( rootClientId === null ) {\n\t\treturn null;\n\t}\n\n\tconst { order } = state.blocks;\n\tconst orderSet = order[ rootClientId ];\n\tconst index = orderSet.indexOf( startClientId );\n\tconst nextIndex = index + 1 * modifier;\n\n\t// Block was first in set and we're attempting to get previous.\n\tif ( nextIndex < 0 ) {\n\t\treturn null;\n\t}\n\n\t// Block was last in set and we're attempting to get next.\n\tif ( nextIndex === orderSet.length ) {\n\t\treturn null;\n\t}\n\n\t// Assume incremented index is within the set.\n\treturn orderSet[ nextIndex ];\n}\n\n/**\n * Returns the previous block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no previous\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getPreviousBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, -1 );\n}\n\n/**\n * Returns the next block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no next\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getNextBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, 1 );\n}\n\n/**\n * Returns the initial caret position for the selected block.\n * This position is to used to position the caret properly when the selected block changes.\n * If the current block is not a RichText, having initial position set to 0 means \"focus block\"\n *\n * @param {Object} state Global application state.\n *\n * @return {0|-1|null} Initial position.\n */\nexport function getSelectedBlocksInitialCaretPosition( state ) {\n\treturn state.initialPosition;\n}\n\n/**\n * Returns the current selection set of block client IDs (multiselection or single selection).\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport const getSelectedBlockClientIds = createSelector(\n\t( state ) => {\n\t\tconst { selectionStart, selectionEnd } = state.selection;\n\n\t\tif (\n\t\t\tselectionStart.clientId === undefined ||\n\t\t\tselectionEnd.clientId === undefined\n\t\t) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\t\treturn [ selectionStart.clientId ];\n\t\t}\n\n\t\t// Retrieve root client ID to aid in retrieving relevant nested block\n\t\t// order, being careful to allow the falsey empty string top-level root\n\t\t// by explicitly testing against null.\n\t\tconst rootClientId = getBlockRootClientId(\n\t\t\tstate,\n\t\t\tselectionStart.clientId\n\t\t);\n\t\tif ( rootClientId === null ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tconst blockOrder = getBlockOrder( state, rootClientId );\n\t\tconst startIndex = blockOrder.indexOf( selectionStart.clientId );\n\t\tconst endIndex = blockOrder.indexOf( selectionEnd.clientId );\n\n\t\tif ( startIndex > endIndex ) {\n\t\t\treturn blockOrder.slice( endIndex, startIndex + 1 );\n\t\t}\n\n\t\treturn blockOrder.slice( startIndex, endIndex + 1 );\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t]\n);\n\n/**\n * Returns the current multi-selection set of block client IDs, or an empty\n * array if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport function getMultiSelectedBlockClientIds( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\treturn getSelectedBlockClientIds( state );\n}\n\n/**\n * Returns the current multi-selection set of blocks, or an empty array if\n * there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block objects.\n */\nexport const getMultiSelectedBlocks = createSelector(\n\t( state ) => {\n\t\tconst multiSelectedBlockClientIds = getMultiSelectedBlockClientIds(\n\t\t\tstate\n\t\t);\n\t\tif ( ! multiSelectedBlockClientIds.length ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\treturn multiSelectedBlockClientIds.map( ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t);\n\t},\n\t( state ) => [\n\t\t...getSelectedBlockClientIds.getDependants( state ),\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns the client ID of the first block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} First block client ID in the multi-selection set.\n */\nexport function getFirstMultiSelectedBlockClientId( state ) {\n\treturn first( getMultiSelectedBlockClientIds( state ) ) || null;\n}\n\n/**\n * Returns the client ID of the last block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Last block client ID in the multi-selection set.\n */\nexport function getLastMultiSelectedBlockClientId( state ) {\n\treturn last( getMultiSelectedBlockClientIds( state ) ) || null;\n}\n\n/**\n * Returns true if a multi-selection exists, and the block corresponding to the\n * specified client ID is the first block of the multi-selection set, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is first in multi-selection.\n */\nexport function isFirstMultiSelectedBlock( state, clientId ) {\n\treturn getFirstMultiSelectedBlockClientId( state ) === clientId;\n}\n\n/**\n * Returns true if the client ID occurs within the block multi-selection, or\n * false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is in multi-selection set.\n */\nexport function isBlockMultiSelected( state, clientId ) {\n\treturn getMultiSelectedBlockClientIds( state ).indexOf( clientId ) !== -1;\n}\n\n/**\n * Returns true if an ancestor of the block is multi-selected, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether an ancestor of the block is in multi-selection\n *                   set.\n */\nexport const isAncestorMultiSelected = createSelector(\n\t( state, clientId ) => {\n\t\tlet ancestorClientId = clientId;\n\t\tlet isMultiSelected = false;\n\t\twhile ( ancestorClientId && ! isMultiSelected ) {\n\t\t\tancestorClientId = getBlockRootClientId( state, ancestorClientId );\n\t\t\tisMultiSelected = isBlockMultiSelected( state, ancestorClientId );\n\t\t}\n\t\treturn isMultiSelected;\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t]\n);\n/**\n * Returns the client ID of the block which begins the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the first client ID in the selection.\n *\n * @see getFirstMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block beginning multi-selection.\n */\nexport function getMultiSelectedBlocksStartClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionStart.clientId || null;\n}\n\n/**\n * Returns the client ID of the block which ends the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the last client ID in the selection.\n *\n * @see getLastMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block ending multi-selection.\n */\nexport function getMultiSelectedBlocksEndClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionEnd.clientId || null;\n}\n\n/**\n * Returns an array containing all block client IDs in the editor in the order\n * they appear. Optionally accepts a root client ID of the block list for which\n * the order should be returned, defaulting to the top-level block order.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array} Ordered client IDs of editor blocks.\n */\nexport function getBlockOrder( state, rootClientId ) {\n\treturn state.blocks.order[ rootClientId || '' ] || EMPTY_ARRAY;\n}\n\n/**\n * Returns the index at which the block corresponding to the specified client\n * ID occurs within the block order, or `-1` if the block does not exist.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     Block client ID.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Index at which block exists in order.\n */\nexport function getBlockIndex( state, clientId, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).indexOf( clientId );\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected and no multi-selection exists, or false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and multi-selection exists.\n */\nexport function isBlockSelected( state, clientId ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId !== selectionEnd.clientId ) {\n\t\treturn false;\n\t}\n\n\treturn selectionStart.clientId === clientId;\n}\n\n/**\n * Returns true if one of the block's inner blocks is selected.\n *\n * @param {Object}  state    Editor state.\n * @param {string}  clientId Block client ID.\n * @param {boolean} deep     Perform a deep check.\n *\n * @return {boolean} Whether the block as an inner block selected\n */\nexport function hasSelectedInnerBlock( state, clientId, deep = false ) {\n\treturn some(\n\t\tgetBlockOrder( state, clientId ),\n\t\t( innerClientId ) =>\n\t\t\tisBlockSelected( state, innerClientId ) ||\n\t\t\tisBlockMultiSelected( state, innerClientId ) ||\n\t\t\t( deep && hasSelectedInnerBlock( state, innerClientId, deep ) )\n\t);\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected but isn't the last of the selected blocks. Here \"last\"\n * refers to the block sequence in the document, _not_ the sequence of\n * multi-selection, which is why `state.selectionEnd` isn't used.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and not the last in the\n *                   selection.\n */\nexport function isBlockWithinSelection( state, clientId ) {\n\tif ( ! clientId ) {\n\t\treturn false;\n\t}\n\n\tconst clientIds = getMultiSelectedBlockClientIds( state );\n\tconst index = clientIds.indexOf( clientId );\n\treturn index > -1 && index < clientIds.length - 1;\n}\n\n/**\n * Returns true if a multi-selection has been made, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether multi-selection has been made.\n */\nexport function hasMultiSelection( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\treturn selectionStart.clientId !== selectionEnd.clientId;\n}\n\n/**\n * Whether in the process of multi-selecting or not. This flag is only true\n * while the multi-selection is being selected (by mouse move), and is false\n * once the multi-selection has been settled.\n *\n * @see hasMultiSelection\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if multi-selecting, false if not.\n */\nexport function isMultiSelecting( state ) {\n\treturn state.isMultiSelecting;\n}\n\n/**\n * Selector that returns if multi-selection is enabled or not.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if it should be possible to multi-select blocks, false if multi-selection is disabled.\n */\nexport function isSelectionEnabled( state ) {\n\treturn state.isSelectionEnabled;\n}\n\n/**\n * Returns the block's editing mode, defaulting to \"visual\" if not explicitly\n * assigned.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Block editing mode.\n */\nexport function getBlockMode( state, clientId ) {\n\treturn state.blocksMode[ clientId ] || 'visual';\n}\n\n/**\n * Returns true if the user is typing, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is typing.\n */\nexport function isTyping( state ) {\n\treturn state.isTyping;\n}\n\n/**\n * Returns true if the user is dragging blocks, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is dragging blocks.\n */\nexport function isDraggingBlocks( state ) {\n\treturn !! state.draggedBlocks.length;\n}\n\n/**\n * Returns the client ids of any blocks being directly dragged.\n *\n * This does not include children of a parent being dragged.\n *\n * @param {Object} state Global application state.\n *\n * @return {string[]} Array of dragged block client ids.\n */\nexport function getDraggedBlockClientIds( state ) {\n\treturn state.draggedBlocks;\n}\n\n/**\n * Returns whether the block is being dragged.\n *\n * Only returns true if the block is being directly dragged,\n * not if the block is a child of a parent being dragged.\n * See `isAncestorBeingDragged` for child blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block is being dragged.\n */\nexport function isBlockBeingDragged( state, clientId ) {\n\treturn state.draggedBlocks.includes( clientId );\n}\n\n/**\n * Returns whether a parent/ancestor of the block is being dragged.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block's ancestor is being dragged.\n */\nexport function isAncestorBeingDragged( state, clientId ) {\n\t// Return early if no blocks are being dragged rather than\n\t// the more expensive check for parents.\n\tif ( ! isDraggingBlocks( state ) ) {\n\t\treturn false;\n\t}\n\n\tconst parents = getBlockParents( state, clientId );\n\treturn some( parents, ( parentClientId ) =>\n\t\tisBlockBeingDragged( state, parentClientId )\n\t);\n}\n\n/**\n * Returns true if the caret is within formatted text, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the caret is within formatted text.\n */\nexport function isCaretWithinFormattedText( state ) {\n\treturn state.isCaretWithinFormattedText;\n}\n\n/**\n * Returns the insertion point, the index at which the new inserted block would\n * be placed. Defaults to the last index.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} Insertion point object with `rootClientId`, `index`.\n */\nexport function getBlockInsertionPoint( state ) {\n\tlet rootClientId, index;\n\n\tconst {\n\t\tinsertionPoint,\n\t\tselection: { selectionEnd },\n\t} = state;\n\tif ( insertionPoint !== null ) {\n\t\treturn insertionPoint;\n\t}\n\n\tconst { clientId } = selectionEnd;\n\n\tif ( clientId ) {\n\t\trootClientId = getBlockRootClientId( state, clientId ) || undefined;\n\t\tindex = getBlockIndex( state, selectionEnd.clientId, rootClientId ) + 1;\n\t} else {\n\t\tindex = getBlockOrder( state ).length;\n\t}\n\n\treturn { rootClientId, index };\n}\n\n/**\n * Returns true if we should show the block insertion point.\n *\n * @param {Object} state Global application state.\n *\n * @return {?boolean} Whether the insertion point is visible or not.\n */\nexport function isBlockInsertionPointVisible( state ) {\n\treturn state.insertionPoint !== null;\n}\n\n/**\n * Returns whether the blocks matches the template or not.\n *\n * @param {boolean} state\n * @return {?boolean} Whether the template is valid or not.\n */\nexport function isValidTemplate( state ) {\n\treturn state.template.isValid;\n}\n\n/**\n * Returns the defined block template\n *\n * @param {boolean} state\n *\n * @return {?Array} Block Template.\n */\nexport function getTemplate( state ) {\n\treturn state.settings.template;\n}\n\n/**\n * Returns the defined block template lock. Optionally accepts a root block\n * client ID as context, otherwise defaulting to the global context.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional block root client ID.\n *\n * @return {?string} Block Template Lock\n */\nexport function getTemplateLock( state, rootClientId ) {\n\tif ( ! rootClientId ) {\n\t\treturn state.settings.templateLock;\n\t}\n\n\tconst blockListSettings = getBlockListSettings( state, rootClientId );\n\tif ( ! blockListSettings ) {\n\t\treturn null;\n\t}\n\n\treturn blockListSettings.templateLock;\n}\n\nconst checkAllowList = ( list, item, defaultResult = null ) => {\n\tif ( isBoolean( list ) ) {\n\t\treturn list;\n\t}\n\tif ( isArray( list ) ) {\n\t\t// TODO: when there is a canonical way to detect that we are editing a post\n\t\t// the following check should be changed to something like:\n\t\t// if ( list.includes( 'core/post-content' ) && getEditorMode() === 'post-content' && item === null )\n\t\tif ( list.includes( 'core/post-content' ) && item === null ) {\n\t\t\treturn true;\n\t\t}\n\t\treturn list.includes( item );\n\t}\n\treturn defaultResult;\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n * This function is not exported and not memoized because using a memoized selector\n * inside another memoized selector is just a waste of time.\n *\n * @param {Object}        state        Editor state.\n * @param {string|Object} blockName    The block type object, e.g., the response\n *                                     from the block directory; or a string name of\n *                                     an installed block type, e.g.' core/paragraph'.\n * @param {?string}       rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nconst canInsertBlockTypeUnmemoized = (\n\tstate,\n\tblockName,\n\trootClientId = null\n) => {\n\tlet blockType;\n\tif ( blockName && 'object' === typeof blockName ) {\n\t\tblockType = blockName;\n\t\tblockName = blockType.name;\n\t} else {\n\t\tblockType = getBlockType( blockName );\n\t}\n\tif ( ! blockType ) {\n\t\treturn false;\n\t}\n\n\tconst { allowedBlockTypes } = getSettings( state );\n\n\tconst isBlockAllowedInEditor = checkAllowList(\n\t\tallowedBlockTypes,\n\t\tblockName,\n\t\ttrue\n\t);\n\tif ( ! isBlockAllowedInEditor ) {\n\t\treturn false;\n\t}\n\n\tconst isLocked = !! getTemplateLock( state, rootClientId );\n\tif ( isLocked ) {\n\t\treturn false;\n\t}\n\n\tconst parentBlockListSettings = getBlockListSettings( state, rootClientId );\n\n\t// The parent block doesn't have settings indicating it doesn't support\n\t// inner blocks, return false.\n\tif ( rootClientId && parentBlockListSettings === undefined ) {\n\t\treturn false;\n\t}\n\n\tconst parentAllowedBlocks = parentBlockListSettings?.allowedBlocks;\n\tconst hasParentAllowedBlock = checkAllowList(\n\t\tparentAllowedBlocks,\n\t\tblockName\n\t);\n\n\tconst blockAllowedParentBlocks = blockType.parent;\n\tconst parentName = getBlockName( state, rootClientId );\n\tconst hasBlockAllowedParent = checkAllowList(\n\t\tblockAllowedParentBlocks,\n\t\tparentName\n\t);\n\n\tif ( hasParentAllowedBlock !== null && hasBlockAllowedParent !== null ) {\n\t\treturn hasParentAllowedBlock || hasBlockAllowedParent;\n\t} else if ( hasParentAllowedBlock !== null ) {\n\t\treturn hasParentAllowedBlock;\n\t} else if ( hasBlockAllowedParent !== null ) {\n\t\treturn hasBlockAllowedParent;\n\t}\n\n\treturn true;\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  blockName    The name of the block type, e.g.' core/paragraph'.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nexport const canInsertBlockType = createSelector(\n\tcanInsertBlockTypeUnmemoized,\n\t( state, blockName, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId[ rootClientId ],\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t]\n);\n\n/**\n * Determines if the given blocks are allowed to be inserted into the block\n * list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be inserted.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be inserted.\n */\nexport function canInsertBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( id ) =>\n\t\tcanInsertBlockType( state, getBlockName( state, id ), rootClientId )\n\t);\n}\n\n/**\n * Returns information about how recently and frequently a block has been inserted.\n *\n * @param {Object} state Global application state.\n * @param {string} id    A string which identifies the insert, e.g. 'core/block/12'\n *\n * @return {?{ time: number, count: number }} An object containing `time` which is when the last\n *                                            insert occurred as a UNIX epoch, and `count` which is\n *                                            the number of inserts that have occurred.\n */\nfunction getInsertUsage( state, id ) {\n\treturn state.preferences.insertUsage?.[ id ] ?? null;\n}\n\n/**\n * Returns whether we can show a block type in the inserter\n *\n * @param {Object}  state        Global State\n * @param {Object}  blockType    BlockType\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be shown in the inserter.\n */\nconst canIncludeBlockTypeInInserter = ( state, blockType, rootClientId ) => {\n\tif ( ! hasBlockSupport( blockType, 'inserter', true ) ) {\n\t\treturn false;\n\t}\n\n\treturn canInsertBlockTypeUnmemoized( state, blockType.name, rootClientId );\n};\n\n/**\n * Return a function to be used to tranform a block variation to an inserter item\n *\n * @param {Object} state Global State\n * @param {Object} item  Denormalized inserter item\n * @return {Function} Function to transform a block variation to inserter item\n */\nconst getItemFromVariation = ( state, item ) => ( variation ) => {\n\tconst variationId = `${ item.id }/${ variation.name }`;\n\tconst { time, count = 0 } = getInsertUsage( state, variationId ) || {};\n\treturn {\n\t\t...item,\n\t\tid: variationId,\n\t\ticon: variation.icon || item.icon,\n\t\ttitle: variation.title || item.title,\n\t\tdescription: variation.description || item.description,\n\t\tcategory: variation.category || item.category,\n\t\t// If `example` is explicitly undefined for the variation, the preview will not be shown.\n\t\texample: variation.hasOwnProperty( 'example' )\n\t\t\t? variation.example\n\t\t\t: item.example,\n\t\tinitialAttributes: {\n\t\t\t...item.initialAttributes,\n\t\t\t...variation.attributes,\n\t\t},\n\t\tinnerBlocks: variation.innerBlocks,\n\t\tkeywords: variation.keywords || item.keywords,\n\t\tfrecency: calculateFrecency( time, count ),\n\t};\n};\n\n/**\n * Returns the calculated frecency.\n *\n * 'frecency' is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * @param {number} time  When the last insert occurred as a UNIX epoch\n * @param {number} count The number of inserts that have occurred.\n *\n * @return {number} The calculated frecency.\n */\nconst calculateFrecency = ( time, count ) => {\n\tif ( ! time ) {\n\t\treturn count;\n\t}\n\t// The selector is cached, which means Date.now() is the last time that the\n\t// relevant state changed. This suits our needs.\n\tconst duration = Date.now() - time;\n\tswitch ( true ) {\n\t\tcase duration < MILLISECONDS_PER_HOUR:\n\t\t\treturn count * 4;\n\t\tcase duration < MILLISECONDS_PER_DAY:\n\t\t\treturn count * 2;\n\t\tcase duration < MILLISECONDS_PER_WEEK:\n\t\t\treturn count / 2;\n\t\tdefault:\n\t\t\treturn count / 4;\n\t}\n};\n\n/**\n * Returns a function that accepts a block type and builds an item to be shown\n * in a specific context. It's used for building items for Inserter and available\n * block Transfroms list.\n *\n * @param {Object} state              Editor state.\n * @param {Object} options            Options object for handling the building of a block type.\n * @param {string} options.buildScope The scope for which the item is going to be used.\n * @return {Function} Function returns an item to be shown in a specific context (Inserter|Transforms list).\n */\nconst buildBlockTypeItem = ( state, { buildScope = 'inserter' } ) => (\n\tblockType\n) => {\n\tconst id = blockType.name;\n\n\tlet isDisabled = false;\n\tif ( ! hasBlockSupport( blockType.name, 'multiple', true ) ) {\n\t\tisDisabled = some(\n\t\t\tgetBlocksByClientId( state, getClientIdsWithDescendants( state ) ),\n\t\t\t{ name: blockType.name }\n\t\t);\n\t}\n\n\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\tconst blockItemBase = {\n\t\tid,\n\t\tname: blockType.name,\n\t\ttitle: blockType.title,\n\t\ticon: blockType.icon,\n\t\tisDisabled,\n\t\tfrecency: calculateFrecency( time, count ),\n\t};\n\tif ( buildScope === 'transform' ) return blockItemBase;\n\n\tconst inserterVariations = blockType.variations.filter(\n\t\t( { scope } ) => ! scope || scope.includes( 'inserter' )\n\t);\n\treturn {\n\t\t...blockItemBase,\n\t\tinitialAttributes: {},\n\t\tdescription: blockType.description,\n\t\tcategory: blockType.category,\n\t\tkeywords: blockType.keywords,\n\t\tvariations: inserterVariations,\n\t\texample: blockType.example,\n\t\tutility: 1, // deprecated\n\t};\n};\n\n/**\n * Determines the items that appear in the inserter. Includes both static\n * items (e.g. a regular block type) and dynamic items (e.g. a reusable block).\n *\n * Each item object contains what's necessary to display a button in the\n * inserter and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'utility' and 'frecency'.\n *\n * @param    {Object}   state             Editor state.\n * @param    {?string}  rootClientId      Optional root client ID of block list.\n *\n * @return {WPEditorInserterItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorInserterItem\n * @property {string}   id                Unique identifier for the item.\n * @property {string}   name              The type of block to create.\n * @property {Object}   initialAttributes Attributes to pass to the newly created block.\n * @property {string}   title             Title of the item, as it appears in the inserter.\n * @property {string}   icon              Dashicon for the item, as it appears in the inserter.\n * @property {string}   category          Block category that the item is associated with.\n * @property {string[]} keywords          Keywords that can be searched to find this item.\n * @property {boolean}  isDisabled        Whether or not the user should be prevented from inserting\n *                                        this item.\n * @property {number}   frecency          Heuristic that combines frequency and recency.\n */\nexport const getInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst buildBlockTypeInserterItem = buildBlockTypeItem( state, {\n\t\t\tbuildScope: 'inserter',\n\t\t} );\n\n\t\tconst buildReusableBlockInserterItem = ( reusableBlock ) => {\n\t\t\tconst id = `core/block/${ reusableBlock.id }`;\n\n\t\t\tconst referencedBlocks = __experimentalGetParsedReusableBlock(\n\t\t\t\tstate,\n\t\t\t\treusableBlock.id\n\t\t\t);\n\t\t\tlet referencedBlockType;\n\t\t\tif ( referencedBlocks.length === 1 ) {\n\t\t\t\treferencedBlockType = getBlockType(\n\t\t\t\t\treferencedBlocks[ 0 ].name\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\t\tconst frecency = calculateFrecency( time, count );\n\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tname: 'core/block',\n\t\t\t\tinitialAttributes: { ref: reusableBlock.id },\n\t\t\t\ttitle: reusableBlock.title.raw,\n\t\t\t\ticon: referencedBlockType\n\t\t\t\t\t? referencedBlockType.icon\n\t\t\t\t\t: templateIcon,\n\t\t\t\tcategory: 'reusable',\n\t\t\t\tkeywords: [],\n\t\t\t\tisDisabled: false,\n\t\t\t\tutility: 1, // deprecated\n\t\t\t\tfrecency,\n\t\t\t};\n\t\t};\n\n\t\tconst blockTypeInserterItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeInserterItem );\n\n\t\tconst reusableBlockInserterItems = canInsertBlockTypeUnmemoized(\n\t\t\tstate,\n\t\t\t'core/block',\n\t\t\trootClientId\n\t\t)\n\t\t\t? getReusableBlocks( state ).map( buildReusableBlockInserterItem )\n\t\t\t: [];\n\n\t\t// Exclude any block type item that is to be replaced by a default\n\t\t// variation.\n\t\tconst visibleBlockTypeInserterItems = blockTypeInserterItems.filter(\n\t\t\t( { variations = [] } ) =>\n\t\t\t\t! variations.some( ( { isDefault } ) => isDefault )\n\t\t);\n\n\t\tconst blockVariations = [];\n\t\t// Show all available blocks with variations\n\t\tfor ( const item of blockTypeInserterItems ) {\n\t\t\tconst { variations = [] } = item;\n\t\t\tif ( variations.length ) {\n\t\t\t\tconst variationMapper = getItemFromVariation( state, item );\n\t\t\t\tblockVariations.push( ...variations.map( variationMapper ) );\n\t\t\t}\n\t\t}\n\t\t// Prioritize core blocks's display in inserter.\n\t\tconst prioritizeCoreBlocks = ( a, b ) => {\n\t\t\tconst coreBlockNamePrefix = 'core/';\n\t\t\tconst firstIsCoreBlock = a.name.startsWith( coreBlockNamePrefix );\n\t\t\tconst secondIsCoreBlock = b.name.startsWith( coreBlockNamePrefix );\n\t\t\tif ( firstIsCoreBlock && secondIsCoreBlock ) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn firstIsCoreBlock && ! secondIsCoreBlock ? -1 : 1;\n\t\t};\n\t\t// Ensure core blocks are prioritized in the returned results,\n\t\t// because third party blocks can be registered earlier than\n\t\t// the core blocks (usually by using the `init` action),\n\t\t// thus affecting the display order.\n\t\t// We don't sort reusable blocks as they are handled differently.\n\t\tconst sortedBlockTypes = [\n\t\t\t...visibleBlockTypeInserterItems,\n\t\t\t...blockVariations,\n\t\t].sort( prioritizeCoreBlocks );\n\t\treturn [ ...sortedBlockTypes, ...reusableBlockInserterItems ];\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Determines the items that appear in the available block transforms list.\n *\n * Each item object contains what's necessary to display a menu item in the\n * transform list and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'frecency'.\n *\n * @param    {Object}  state        Editor state.\n * @param    {?string} rootClientId Optional root client ID of block list.\n *\n * @return {WPEditorTransformItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorTransformItem\n * @property {string}  id           Unique identifier for the item.\n * @property {string}  name         The type of block to create.\n * @property {string}  title        Title of the item, as it appears in the inserter.\n * @property {string}  icon         Dashicon for the item, as it appears in the inserter.\n * @property {boolean} isDisabled   Whether or not the user should be prevented from inserting\n *                                  this item.\n * @property {number}  frecency     Heuristic that combines frequency and recency.\n */\nexport const getBlockTransformItems = createSelector(\n\t( state, blocks, rootClientId = null ) => {\n\t\tconst buildBlockTypeTransformItem = buildBlockTypeItem( state, {\n\t\t\tbuildScope: 'transform',\n\t\t} );\n\t\tconst blockTypeTransformItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeTransformItem );\n\n\t\tconst itemsByName = mapKeys(\n\t\t\tblockTypeTransformItems,\n\t\t\t( { name } ) => name\n\t\t);\n\t\tconst possibleTransforms = getPossibleBlockTransformations(\n\t\t\tblocks\n\t\t).reduce( ( accumulator, block ) => {\n\t\t\tif ( itemsByName[ block?.name ] ) {\n\t\t\t\taccumulator.push( itemsByName[ block.name ] );\n\t\t\t}\n\t\t\treturn accumulator;\n\t\t}, [] );\n\t\tconst possibleBlockTransformations = orderBy(\n\t\t\tpossibleTransforms,\n\t\t\t( block ) => itemsByName[ block.name ].frecency,\n\t\t\t'desc'\n\t\t);\n\t\treturn possibleBlockTransformations;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Determines whether there are items to show in the inserter.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Items that appear in inserter.\n */\nexport const hasInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst hasBlockType = some( getBlockTypes(), ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t\tif ( hasBlockType ) {\n\t\t\treturn true;\n\t\t}\n\t\tconst hasReusableBlock =\n\t\t\tcanInsertBlockTypeUnmemoized( state, 'core/block', rootClientId ) &&\n\t\t\tgetReusableBlocks( state ).length > 0;\n\n\t\treturn hasReusableBlock;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Returns the list of allowed inserter blocks for inner blocks children\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array?} The list of allowed block types.\n */\nexport const __experimentalGetAllowedBlocks = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tif ( ! rootClientId ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn filter( getBlockTypes(), ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetBlockTypes(),\n\t]\n);\n\nconst checkAllowListRecursive = ( blocks, allowedBlockTypes ) => {\n\tif ( isBoolean( allowedBlockTypes ) ) {\n\t\treturn allowedBlockTypes;\n\t}\n\n\tconst blocksQueue = [ ...blocks ];\n\twhile ( blocksQueue.length > 0 ) {\n\t\tconst block = blocksQueue.shift();\n\n\t\tconst isAllowed = checkAllowList(\n\t\t\tallowedBlockTypes,\n\t\t\tblock.name || block.blockName,\n\t\t\ttrue\n\t\t);\n\t\tif ( ! isAllowed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tblock.innerBlocks?.forEach( ( innerBlock ) => {\n\t\t\tblocksQueue.push( innerBlock );\n\t\t} );\n\t}\n\n\treturn true;\n};\n\nexport const __experimentalGetParsedPattern = createSelector(\n\t( state, patternName ) => {\n\t\tconst patterns = state.settings.__experimentalBlockPatterns;\n\t\tconst pattern = patterns.find( ( { name } ) => name === patternName );\n\t\tif ( ! pattern ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\t...pattern,\n\t\t\tblocks: parse( pattern.content ),\n\t\t};\n\t},\n\t( state ) => [ state.settings.__experimentalBlockPatterns ]\n);\n\nconst getAllAllowedPatterns = createSelector(\n\t( state ) => {\n\t\tconst patterns = state.settings.__experimentalBlockPatterns;\n\t\tconst { allowedBlockTypes } = getSettings( state );\n\t\tconst parsedPatterns = patterns.map( ( { name } ) =>\n\t\t\t__experimentalGetParsedPattern( state, name )\n\t\t);\n\t\tconst allowedPatterns = parsedPatterns.filter( ( { blocks } ) =>\n\t\t\tcheckAllowListRecursive( blocks, allowedBlockTypes )\n\t\t);\n\t\treturn allowedPatterns;\n\t},\n\t( state ) => [\n\t\tstate.settings.__experimentalBlockPatterns,\n\t\tstate.settings.allowedBlockTypes,\n\t]\n);\n\n/**\n * Returns the list of allowed patterns for inner blocks children.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional target root client ID.\n *\n * @return {Array?} The list of allowed patterns.\n */\nexport const __experimentalGetAllowedPatterns = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst availableParsedPatterns = getAllAllowedPatterns( state );\n\t\tconst patternsAllowed = filter(\n\t\t\tavailableParsedPatterns,\n\t\t\t( { blocks } ) =>\n\t\t\t\tblocks.every( ( { name } ) =>\n\t\t\t\t\tcanInsertBlockType( state, name, rootClientId )\n\t\t\t\t)\n\t\t);\n\n\t\treturn patternsAllowed;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.settings.__experimentalBlockPatterns,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId[ rootClientId ],\n\t]\n);\n\n/**\n * Returns the list of patterns based on their declared `blockTypes`\n * and a block's name.\n * Patterns can use `blockTypes` to integrate in work flows like\n * suggesting appropriate patterns in a Placeholder state(during insertion)\n * or blocks transformations.\n *\n * @param {Object}          state        Editor state.\n * @param {string|string[]} blockNames   Block's name or array of block names to find matching pattens.\n * @param {?string}         rootClientId Optional target root client ID.\n *\n * @return {Array} The list of matched block patterns based on declared `blockTypes` and block name.\n */\nexport const __experimentalGetPatternsByBlockTypes = createSelector(\n\t( state, blockNames, rootClientId = null ) => {\n\t\tif ( ! blockNames ) return EMPTY_ARRAY;\n\t\tconst patterns = __experimentalGetAllowedPatterns(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t);\n\t\tconst normalizedBlockNames = Array.isArray( blockNames )\n\t\t\t? blockNames\n\t\t\t: [ blockNames ];\n\t\treturn patterns.filter( ( pattern ) =>\n\t\t\tpattern?.blockTypes?.some?.( ( blockName ) =>\n\t\t\t\tnormalizedBlockNames.includes( blockName )\n\t\t\t)\n\t\t);\n\t},\n\t( state, rootClientId ) => [\n\t\t...__experimentalGetAllowedPatterns.getDependants(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t),\n\t]\n);\n\n/**\n * Determines the items that appear in the available pattern transforms list.\n *\n * For now we only handle blocks without InnerBlocks and take into account\n * the `__experimentalRole` property of blocks' attributes for the transformation.\n *\n * We return the first set of possible eligible block patterns,\n * by checking the `blockTypes` property. We still have to recurse through\n * block pattern's blocks and try to find matches from the selected blocks.\n * Now this happens in the consumer to avoid heavy operations in the selector.\n *\n * @param {Object}   state        Editor state.\n * @param {Object[]} blocks       The selected blocks.\n * @param {?string}  rootClientId Optional root client ID of block list.\n *\n * @return {WPBlockPattern[]} Items that are eligible for a pattern transformation.\n */\nexport const __experimentalGetPatternTransformItems = createSelector(\n\t( state, blocks, rootClientId = null ) => {\n\t\tif ( ! blocks ) return EMPTY_ARRAY;\n\t\t/**\n\t\t * For now we only handle blocks without InnerBlocks and take into account\n\t\t * the `__experimentalRole` property of blocks' attributes for the transformation.\n\t\t * Note that the blocks have been retrieved through `getBlock`, which doesn't\n\t\t * return the inner blocks of an inner block controller, so we still need\n\t\t * to check for this case too.\n\t\t */\n\t\tif (\n\t\t\tblocks.some(\n\t\t\t\t( { clientId, innerBlocks } ) =>\n\t\t\t\t\tinnerBlocks.length ||\n\t\t\t\t\tareInnerBlocksControlled( state, clientId )\n\t\t\t)\n\t\t) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\t// Create a Set of the selected block names that is used in patterns filtering.\n\t\tconst selectedBlockNames = Array.from(\n\t\t\tnew Set( blocks.map( ( { name } ) => name ) )\n\t\t);\n\t\t/**\n\t\t * Here we will return first set of possible eligible block patterns,\n\t\t * by checking the `blockTypes` property. We still have to recurse through\n\t\t * block pattern's blocks and try to find matches from the selected blocks.\n\t\t * Now this happens in the consumer to avoid heavy operations in the selector.\n\t\t */\n\t\treturn __experimentalGetPatternsByBlockTypes(\n\t\t\tstate,\n\t\t\tselectedBlockNames,\n\t\t\trootClientId\n\t\t);\n\t},\n\t( state, rootClientId ) => [\n\t\t...__experimentalGetPatternsByBlockTypes.getDependants(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t),\n\t]\n);\n\n/**\n * Returns the Block List settings of a block, if any exist.\n *\n * @param {Object}  state    Editor state.\n * @param {?string} clientId Block client ID.\n *\n * @return {?Object} Block settings of the block if set.\n */\nexport function getBlockListSettings( state, clientId ) {\n\treturn state.blockListSettings[ clientId ];\n}\n\n/**\n * Returns the editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getSettings( state ) {\n\treturn state.settings;\n}\n\n/**\n * Returns true if the most recent block change is be considered persistent, or\n * false otherwise. A persistent change is one committed by BlockEditorProvider\n * via its `onChange` callback, in addition to `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was persistent.\n */\nexport function isLastBlockChangePersistent( state ) {\n\treturn state.blocks.isPersistentChange;\n}\n\n/**\n * Returns the block list settings for an array of blocks, if any exist.\n *\n * @param {Object} state     Editor state.\n * @param {Array}  clientIds Block client IDs.\n *\n * @return {Object} An object where the keys are client ids and the values are\n *                  a block list setting object.\n */\nexport const __experimentalGetBlockListSettingsForBlocks = createSelector(\n\t( state, clientIds = [] ) => {\n\t\treturn clientIds.reduce( ( blockListSettingsForBlocks, clientId ) => {\n\t\t\tif ( ! state.blockListSettings[ clientId ] ) {\n\t\t\t\treturn blockListSettingsForBlocks;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...blockListSettingsForBlocks,\n\t\t\t\t[ clientId ]: state.blockListSettings[ clientId ],\n\t\t\t};\n\t\t}, {} );\n\t},\n\t( state ) => [ state.blockListSettings ]\n);\n\n/**\n * Returns the parsed block saved as shared block with the given ID.\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The shared block's ID.\n *\n * @return {Object} The parsed block.\n */\nexport const __experimentalGetParsedReusableBlock = createSelector(\n\t( state, ref ) => {\n\t\tconst reusableBlock = find(\n\t\t\tgetReusableBlocks( state ),\n\t\t\t( block ) => block.id === ref\n\t\t);\n\t\tif ( ! reusableBlock ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Only reusableBlock.content.raw should be used here, `reusableBlock.content` is a\n\t\t// workaround until #22127 is fixed.\n\t\treturn parse(\n\t\t\ttypeof reusableBlock.content.raw === 'string'\n\t\t\t\t? reusableBlock.content.raw\n\t\t\t\t: reusableBlock.content\n\t\t);\n\t},\n\t( state ) => [ getReusableBlocks( state ) ]\n);\n\n/**\n * Returns the title of a given reusable block\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The shared block's ID.\n *\n * @return {string} The reusable block saved title.\n */\nexport const __experimentalGetReusableBlockTitle = createSelector(\n\t( state, ref ) => {\n\t\tconst reusableBlock = find(\n\t\t\tgetReusableBlocks( state ),\n\t\t\t( block ) => block.id === ref\n\t\t);\n\t\tif ( ! reusableBlock ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn reusableBlock.title?.raw;\n\t},\n\t( state ) => [ getReusableBlocks( state ) ]\n);\n\n/**\n * Returns true if the most recent block change is be considered ignored, or\n * false otherwise. An ignored change is one not to be committed by\n * BlockEditorProvider, neither via `onChange` nor `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was ignored.\n */\nexport function __unstableIsLastBlockChangeIgnored( state ) {\n\t// TODO: Removal Plan: Changes incurred by RECEIVE_BLOCKS should not be\n\t// ignored if in-fact they result in a change in blocks state. The current\n\t// need to ignore changes not a result of user interaction should be\n\t// accounted for in the refactoring of reusable blocks as occurring within\n\t// their own separate block editor / state (#7119).\n\treturn state.blocks.isIgnoredChange;\n}\n\n/**\n * Returns the block attributes changed as a result of the last dispatched\n * action.\n *\n * @param {Object} state Block editor state.\n *\n * @return {Object<string,Object>} Subsets of block attributes changed, keyed\n *                                 by block client ID.\n */\nexport function __experimentalGetLastBlockAttributeChanges( state ) {\n\treturn state.lastBlockAttributesChange;\n}\n\n/**\n * Returns the available reusable blocks\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} Reusable blocks\n */\nfunction getReusableBlocks( state ) {\n\treturn state?.settings?.__experimentalReusableBlocks ?? EMPTY_ARRAY;\n}\n\n/**\n * Returns whether the navigation mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Is navigation mode enabled.\n */\nexport function isNavigationMode( state ) {\n\treturn state.isNavigationMode;\n}\n\n/**\n * Returns whether block moving mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {string} Client Id of moving block.\n */\nexport function hasBlockMovingClientId( state ) {\n\treturn state.hasBlockMovingClientId;\n}\n\n/**\n * Returns true if the last change was an automatic change, false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the last change was automatic.\n */\nexport function didAutomaticChange( state ) {\n\treturn !! state.automaticChangeStatus;\n}\n\n/**\n * Returns true if the current highlighted block matches the block clientId.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} Whether the block is currently highlighted.\n */\nexport function isBlockHighlighted( state, clientId ) {\n\treturn state.highlightedBlock === clientId;\n}\n\n/**\n * Checks if a given block has controlled inner blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} True if the block has controlled inner blocks.\n */\nexport function areInnerBlocksControlled( state, clientId ) {\n\treturn !! state.blocks.controlledInnerBlocks[ clientId ];\n}\n\n/**\n * Returns the clientId for the first 'active' block of a given array of block names.\n * A block is 'active' if it (or a child) is the selected block.\n * Returns the first match moving up the DOM from the selected block.\n *\n * @param {Object}   state            Global application state.\n * @param {string[]} validBlocksNames The names of block types to check for.\n *\n * @return {string} The matching block's clientId.\n */\nexport const __experimentalGetActiveBlockIdByBlockNames = createSelector(\n\t( state, validBlockNames ) => {\n\t\tif ( ! validBlockNames.length ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Check if selected block is a valid entity area.\n\t\tconst selectedBlockClientId = getSelectedBlockClientId( state );\n\t\tif (\n\t\t\tvalidBlockNames.includes(\n\t\t\t\tgetBlockName( state, selectedBlockClientId )\n\t\t\t)\n\t\t) {\n\t\t\treturn selectedBlockClientId;\n\t\t}\n\t\t// Check if first selected block is a child of a valid entity area.\n\t\tconst multiSelectedBlockClientIds = getMultiSelectedBlockClientIds(\n\t\t\tstate\n\t\t);\n\t\tconst entityAreaParents = getBlockParentsByBlockName(\n\t\t\tstate,\n\t\t\tselectedBlockClientId || multiSelectedBlockClientIds[ 0 ],\n\t\t\tvalidBlockNames\n\t\t);\n\t\tif ( entityAreaParents ) {\n\t\t\t// Last parent closest/most interior.\n\t\t\treturn last( entityAreaParents );\n\t\t}\n\t\treturn null;\n\t},\n\t( state, validBlockNames ) => [\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t\tvalidBlockNames,\n\t]\n);\n\n/**\n * Tells if the block with the passed clientId was just inserted.\n *\n * @param {Object}  state    Global application state.\n * @param {Object}  clientId Client Id of the block.\n * @param {?string} source   Optional insertion source of the block.\n * @return {boolean} True if the block matches the last block inserted from the specified source.\n */\nexport function wasBlockJustInserted( state, clientId, source ) {\n\tconst { lastBlockInserted } = state;\n\treturn (\n\t\tlastBlockInserted.clientId === clientId &&\n\t\tlastBlockInserted.source === source\n\t);\n}\n"]}