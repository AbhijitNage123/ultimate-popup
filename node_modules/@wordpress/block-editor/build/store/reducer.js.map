{"version":3,"sources":["@wordpress/block-editor/src/store/reducer.js"],"names":["mapBlockOrder","blocks","rootClientId","result","forEach","block","clientId","innerBlocks","push","Object","assign","mapBlockParents","reduce","flattenBlocks","transform","identity","stack","length","shift","getFlattenedBlocksWithoutAttributes","getFlattenedBlockAttributes","attributes","getNestedBlockClientIds","blocksOrder","controlledInnerBlocks","getMutateSafeObject","original","working","hasSameKeys","a","b","isUpdatingSameBlockAttribute","action","lastAction","type","undefined","clientIds","fillKeysWithEmptyObject","objectKeys","key","withBlockCache","reducer","state","newState","cache","getBlocksWithParentsClientIds","current","parents","updatedBlockUids","parentClientIds","replacedClientIds","removedClientIds","fromRootClientId","toRootClientId","byClientId","name","ref","updatedId","withPersistentBlockChange","markNextChangeAsNotPersistent","nextState","isExplicitPersistentChange","nextIsPersistentChange","isPersistentChange","withIgnoredBlockChange","IGNORED_ACTION_TYPES","Set","isIgnoredChange","has","withInnerBlocksRemoveCascade","getAllChildren","i","order","keepControlledInnerBlocks","withBlockReset","visibleClientIds","keys","withReplaceInnerBlocks","nestedControllers","stateAfterBlocksRemoval","stateAfterInsert","index","value","withSaveReusableBlock","id","combineReducers","changes","updates","every","next","accumulator","uniqueByBlock","subState","mappedBlocks","fromIndex","indexOf","firstClientId","firstIndex","lastClientId","hasControlledInnerBlocks","isTyping","draggedBlocks","isCaretWithinFormattedText","selectionHelper","updateSelection","indexToSelect","blockToSelect","selection","selectionStart","attributeKey","offset","startOffset","selectionEnd","endOffset","start","end","startClientId","endClientId","some","isMultiSelecting","isSelectionEnabled","initialPosition","includes","blocksMode","insertionPoint","__unstableWithInserter","template","isValid","settings","SETTINGS_DEFAULTS","preferences","PREFERENCES_DEFAULTS","prevState","blockName","match","blocksStore","getActiveBlockVariation","insert","insertUsage","time","count","blockListSettings","hasOwnProperty","isNavigationMode","hasBlockMovingClientId","lastBlockAttributesChange","automaticChangeStatus","highlightedBlock","isHighlighted","lastBlockInserted","source","meta"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tflow,\n\treduce,\n\tfirst,\n\tlast,\n\tomit,\n\twithout,\n\tmapValues,\n\tkeys,\n\tisEqual,\n\tisEmpty,\n\tidentity,\n\tdifference,\n\tomitBy,\n\tpickBy,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { combineReducers, select } from '@wordpress/data';\nimport { store as blocksStore } from '@wordpress/blocks';\n/**\n * Internal dependencies\n */\nimport { PREFERENCES_DEFAULTS, SETTINGS_DEFAULTS } from './defaults';\nimport { insertAt, moveTo } from './array';\n\n/**\n * Given an array of blocks, returns an object where each key is a nesting\n * context, the value of which is an array of block client IDs existing within\n * that nesting context.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockOrder( blocks, rootClientId = '' ) {\n\tconst result = { [ rootClientId ]: [] };\n\n\tblocks.forEach( ( block ) => {\n\t\tconst { clientId, innerBlocks } = block;\n\n\t\tresult[ rootClientId ].push( clientId );\n\n\t\tObject.assign( result, mapBlockOrder( innerBlocks, clientId ) );\n\t} );\n\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object where each key contains\n * the clientId of the block and the value is the parent of the block.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockParents( blocks, rootClientId = '' ) {\n\treturn blocks.reduce(\n\t\t( result, block ) =>\n\t\t\tObject.assign(\n\t\t\t\tresult,\n\t\t\t\t{ [ block.clientId ]: rootClientId },\n\t\t\t\tmapBlockParents( block.innerBlocks, block.clientId )\n\t\t\t),\n\t\t{}\n\t);\n}\n\n/**\n * Helper method to iterate through all blocks, recursing into inner blocks,\n * applying a transformation function to each one.\n * Returns a flattened object with the transformed blocks.\n *\n * @param {Array}    blocks    Blocks to flatten.\n * @param {Function} transform Transforming function to be applied to each block.\n *\n * @return {Object} Flattened object.\n */\nfunction flattenBlocks( blocks, transform = identity ) {\n\tconst result = {};\n\n\tconst stack = [ ...blocks ];\n\twhile ( stack.length ) {\n\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\tstack.push( ...innerBlocks );\n\t\tresult[ block.clientId ] = transform( block );\n\t}\n\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object containing all blocks, without\n * attributes, recursing into inner blocks. Keys correspond to the block client\n * ID, the value of which is the attributes object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Object} Flattened block attributes object.\n */\nfunction getFlattenedBlocksWithoutAttributes( blocks ) {\n\treturn flattenBlocks( blocks, ( block ) => omit( block, 'attributes' ) );\n}\n\n/**\n * Given an array of blocks, returns an object containing all block attributes,\n * recursing into inner blocks. Keys correspond to the block client ID, the\n * value of which is the attributes object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Object} Flattened block attributes object.\n */\nfunction getFlattenedBlockAttributes( blocks ) {\n\treturn flattenBlocks( blocks, ( block ) => block.attributes );\n}\n\n/**\n * Given a block order map object, returns *all* of the block client IDs that are\n * a descendant of the given root client ID.\n *\n * Calling this with `rootClientId` set to `''` results in a list of client IDs\n * that are in the post. That is, it excludes blocks like fetched reusable\n * blocks which are stored into state but not visible. It also excludes\n * InnerBlocks controllers, like template parts.\n *\n * It is important to exclude the full inner block controller and not just the\n * inner blocks because in many cases, we need to persist the previous value of\n * an inner block controller. To do so, it must be excluded from the list of\n * client IDs which are considered to be part of the top-level entity.\n *\n * @param {Object}  blocksOrder           Object that maps block client IDs to a list of\n *                                        nested block client IDs.\n * @param {?string} rootClientId          The root client ID to search. Defaults to ''.\n * @param {?Object} controlledInnerBlocks The InnerBlocks controller state.\n *\n * @return {Array} List of descendant client IDs.\n */\nfunction getNestedBlockClientIds(\n\tblocksOrder,\n\trootClientId = '',\n\tcontrolledInnerBlocks = {}\n) {\n\treturn reduce(\n\t\tblocksOrder[ rootClientId ],\n\t\t( result, clientId ) => {\n\t\t\tif ( !! controlledInnerBlocks[ clientId ] ) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\treturn [\n\t\t\t\t...result,\n\t\t\t\tclientId,\n\t\t\t\t...getNestedBlockClientIds( blocksOrder, clientId ),\n\t\t\t];\n\t\t},\n\t\t[]\n\t);\n}\n\n/**\n * Returns an object against which it is safe to perform mutating operations,\n * given the original object and its current working copy.\n *\n * @param {Object} original Original object.\n * @param {Object} working  Working object.\n *\n * @return {Object} Mutation-safe object.\n */\nfunction getMutateSafeObject( original, working ) {\n\tif ( original === working ) {\n\t\treturn { ...original };\n\t}\n\n\treturn working;\n}\n\n/**\n * Returns true if the two object arguments have the same keys, or false\n * otherwise.\n *\n * @param {Object} a First object.\n * @param {Object} b Second object.\n *\n * @return {boolean} Whether the two objects have the same keys.\n */\nexport function hasSameKeys( a, b ) {\n\treturn isEqual( keys( a ), keys( b ) );\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are updating the same block attribute, or\n * false otherwise.\n *\n * @param {Object} action     Currently dispatching action.\n * @param {Object} lastAction Previously dispatched action.\n *\n * @return {boolean} Whether actions are updating the same block attribute.\n */\nexport function isUpdatingSameBlockAttribute( action, lastAction ) {\n\treturn (\n\t\taction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\tlastAction !== undefined &&\n\t\tlastAction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\tisEqual( action.clientIds, lastAction.clientIds ) &&\n\t\thasSameKeys( action.attributes, lastAction.attributes )\n\t);\n}\n\n/**\n * Utility returning an object with an empty object value for each key.\n *\n * @param {Array} objectKeys Keys to fill.\n * @return {Object} Object filled with empty object as values for each clientId.\n */\nconst fillKeysWithEmptyObject = ( objectKeys ) => {\n\treturn objectKeys.reduce( ( result, key ) => {\n\t\tresult[ key ] = {};\n\t\treturn result;\n\t}, {} );\n};\n\n/**\n * Higher-order reducer intended to compute a cache key for each block in the post.\n * A new instance of the cache key (empty object) is created each time the block object\n * needs to be refreshed (for any change in the block or its children).\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withBlockCache = ( reducer ) => ( state = {}, action ) => {\n\tconst newState = reducer( state, action );\n\n\tif ( newState === state ) {\n\t\treturn state;\n\t}\n\tnewState.cache = state.cache ? state.cache : {};\n\n\t/**\n\t * For each clientId provided, traverses up parents, adding the provided clientIds\n\t * and each parent's clientId to the returned array.\n\t *\n\t * When calling this function consider that it uses the old state, so any state\n\t * modifications made by the `reducer` will not be present.\n\t *\n\t * @param {Array} clientIds an Array of block clientIds.\n\t *\n\t * @return {Array} The provided clientIds and all of their parent clientIds.\n\t */\n\tconst getBlocksWithParentsClientIds = ( clientIds ) => {\n\t\treturn clientIds.reduce( ( result, clientId ) => {\n\t\t\tlet current = clientId;\n\t\t\tdo {\n\t\t\t\tresult.push( current );\n\t\t\t\tcurrent = state.parents[ current ];\n\t\t\t} while ( current && ! state.controlledInnerBlocks[ current ] );\n\t\t\treturn result;\n\t\t}, [] );\n\t};\n\n\tswitch ( action.type ) {\n\t\tcase 'RESET_BLOCKS':\n\t\t\tnewState.cache = mapValues(\n\t\t\t\tflattenBlocks( action.blocks ),\n\t\t\t\t() => ( {} )\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'RECEIVE_BLOCKS':\n\t\tcase 'INSERT_BLOCKS': {\n\t\t\tconst updatedBlockUids = keys( flattenBlocks( action.blocks ) );\n\t\t\tif (\n\t\t\t\taction.rootClientId &&\n\t\t\t\t! state.controlledInnerBlocks[ action.rootClientId ]\n\t\t\t) {\n\t\t\t\tupdatedBlockUids.push( action.rootClientId );\n\t\t\t}\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( updatedBlockUids )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\t}\n\t\tcase 'UPDATE_BLOCK':\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( [ action.clientId ] )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 'UPDATE_BLOCK_ATTRIBUTES':\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( action.clientIds )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\tconst parentClientIds = fillKeysWithEmptyObject(\n\t\t\t\tgetBlocksWithParentsClientIds( action.replacedClientIds )\n\t\t\t);\n\n\t\t\tnewState.cache = {\n\t\t\t\t...omit( newState.cache, action.replacedClientIds ),\n\t\t\t\t...omit( parentClientIds, action.replacedClientIds ),\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tkeys( flattenBlocks( action.blocks ) )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\tnewState.cache = {\n\t\t\t\t...omit( newState.cache, action.removedClientIds ),\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tdifference(\n\t\t\t\t\t\tgetBlocksWithParentsClientIds( action.clientIds ),\n\t\t\t\t\t\taction.clientIds\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\n\t\t\tconst updatedBlockUids = [ ...action.clientIds ];\n\t\t\tif ( action.fromRootClientId ) {\n\t\t\t\tupdatedBlockUids.push( action.fromRootClientId );\n\t\t\t}\n\t\t\tif ( action.toRootClientId ) {\n\t\t\t\tupdatedBlockUids.push( action.toRootClientId );\n\t\t\t}\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( updatedBlockUids )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\t}\n\t\tcase 'MOVE_BLOCKS_UP':\n\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\tconst updatedBlockUids = [];\n\t\t\tif ( action.rootClientId ) {\n\t\t\t\tupdatedBlockUids.push( action.rootClientId );\n\t\t\t}\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( updatedBlockUids )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\t}\n\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS': {\n\t\t\tconst updatedBlockUids = keys(\n\t\t\t\tomitBy( newState.attributes, ( attributes, clientId ) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tnewState.byClientId[ clientId ].name !== 'core/block' ||\n\t\t\t\t\t\tattributes.ref !== action.updatedId\n\t\t\t\t\t);\n\t\t\t\t} )\n\t\t\t);\n\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( updatedBlockUids )\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\t}\n\n\treturn newState;\n};\n\n/**\n * Higher-order reducer intended to augment the blocks reducer, assigning an\n * `isPersistentChange` property value corresponding to whether a change in\n * state can be considered as persistent. All changes are considered persistent\n * except when updating the same block attribute as in the previous action.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nfunction withPersistentBlockChange( reducer ) {\n\tlet lastAction;\n\tlet markNextChangeAsNotPersistent = false;\n\n\treturn ( state, action ) => {\n\t\tlet nextState = reducer( state, action );\n\n\t\tconst isExplicitPersistentChange =\n\t\t\taction.type === 'MARK_LAST_CHANGE_AS_PERSISTENT' ||\n\t\t\tmarkNextChangeAsNotPersistent;\n\n\t\t// Defer to previous state value (or default) unless changing or\n\t\t// explicitly marking as persistent.\n\t\tif ( state === nextState && ! isExplicitPersistentChange ) {\n\t\t\tmarkNextChangeAsNotPersistent =\n\t\t\t\taction.type === 'MARK_NEXT_CHANGE_AS_NOT_PERSISTENT';\n\n\t\t\tconst nextIsPersistentChange = state?.isPersistentChange ?? true;\n\t\t\tif ( state.isPersistentChange === nextIsPersistentChange ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...nextState,\n\t\t\t\tisPersistentChange: nextIsPersistentChange,\n\t\t\t};\n\t\t}\n\n\t\tnextState = {\n\t\t\t...nextState,\n\t\t\tisPersistentChange: isExplicitPersistentChange\n\t\t\t\t? ! markNextChangeAsNotPersistent\n\t\t\t\t: ! isUpdatingSameBlockAttribute( action, lastAction ),\n\t\t};\n\n\t\t// In comparing against the previous action, consider only those which\n\t\t// would have qualified as one which would have been ignored or not\n\t\t// have resulted in a changed state.\n\t\tlastAction = action;\n\t\tmarkNextChangeAsNotPersistent =\n\t\t\taction.type === 'MARK_NEXT_CHANGE_AS_NOT_PERSISTENT';\n\n\t\treturn nextState;\n\t};\n}\n\n/**\n * Higher-order reducer intended to augment the blocks reducer, assigning an\n * `isIgnoredChange` property value corresponding to whether a change in state\n * can be considered as ignored. A change is considered ignored when the result\n * of an action not incurred by direct user interaction.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nfunction withIgnoredBlockChange( reducer ) {\n\t/**\n\t * Set of action types for which a blocks state change should be ignored.\n\t *\n\t * @type {Set}\n\t */\n\tconst IGNORED_ACTION_TYPES = new Set( [ 'RECEIVE_BLOCKS' ] );\n\n\treturn ( state, action ) => {\n\t\tconst nextState = reducer( state, action );\n\n\t\tif ( nextState !== state ) {\n\t\t\tnextState.isIgnoredChange = IGNORED_ACTION_TYPES.has( action.type );\n\t\t}\n\n\t\treturn nextState;\n\t};\n}\n\n/**\n * Higher-order reducer targeting the combined blocks reducer, augmenting\n * block client IDs in remove action to include cascade of inner blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withInnerBlocksRemoveCascade = ( reducer ) => ( state, action ) => {\n\t// Gets all children which need to be removed.\n\tconst getAllChildren = ( clientIds ) => {\n\t\tlet result = clientIds;\n\t\tfor ( let i = 0; i < result.length; i++ ) {\n\t\t\tif (\n\t\t\t\t! state.order[ result[ i ] ] ||\n\t\t\t\t( action.keepControlledInnerBlocks &&\n\t\t\t\t\taction.keepControlledInnerBlocks[ result[ i ] ] )\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( result === clientIds ) {\n\t\t\t\tresult = [ ...result ];\n\t\t\t}\n\n\t\t\tresult.push( ...state.order[ result[ i ] ] );\n\t\t}\n\t\treturn result;\n\t};\n\n\tif ( state ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'REMOVE_BLOCKS':\n\t\t\t\taction = {\n\t\t\t\t\t...action,\n\t\t\t\t\ttype: 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN',\n\t\t\t\t\tremovedClientIds: getAllChildren( action.clientIds ),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'REPLACE_BLOCKS':\n\t\t\t\taction = {\n\t\t\t\t\t...action,\n\t\t\t\t\ttype: 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN',\n\t\t\t\t\treplacedClientIds: getAllChildren( action.clientIds ),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `RESET_BLOCKS` action. When dispatched, this action will replace all\n * blocks that exist in the post, leaving blocks that exist only in state (e.g.\n * reusable blocks and blocks controlled by inner blocks controllers) alone.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withBlockReset = ( reducer ) => ( state, action ) => {\n\tif ( state && action.type === 'RESET_BLOCKS' ) {\n\t\t/**\n\t\t * A list of client IDs associated with the top level entity (like a\n\t\t * post or template). It excludes the client IDs of blocks associated\n\t\t * with other entities, like inner block controllers or reusable blocks.\n\t\t */\n\t\tconst visibleClientIds = getNestedBlockClientIds(\n\t\t\tstate.order,\n\t\t\t'',\n\t\t\tstate.controlledInnerBlocks\n\t\t);\n\n\t\t// pickBy returns only the truthy values from controlledInnerBlocks\n\t\tconst controlledInnerBlocks = Object.keys(\n\t\t\tpickBy( state.controlledInnerBlocks )\n\t\t);\n\n\t\t/**\n\t\t * Each update operation consists of a few parts:\n\t\t * 1. First, the client IDs associated with the top level entity are\n\t\t *    removed from the existing state key, leaving in place controlled\n\t\t *    blocks (like reusable blocks and inner block controllers).\n\t\t * 2. Second, the blocks from the reset action are used to calculate the\n\t\t *    individual state keys. This will re-populate the clientIDs which\n\t\t *    were removed in step 1.\n\t\t * 3. In some cases, we remove the recalculated inner block controllers,\n\t\t *    letting their old values persist. We need to do this because the\n\t\t *    reset block action from a top-level entity is not aware of any\n\t\t *    inner blocks inside InnerBlock controllers. So if the new values\n\t\t *    were used, it would not take into account the existing InnerBlocks\n\t\t *    which already exist in the state for inner block controllers. For\n\t\t *    example, `attributes` uses the newly computed value for controllers\n\t\t *    since attributes are stored in the top-level entity. But `order`\n\t\t *    uses the previous value for the controllers since the new value\n\t\t *    does not include the order of controlled inner blocks. So if the\n\t\t *    new value was used, template parts would disappear from the editor\n\t\t *    whenever you try to undo a change in the top level entity.\n\t\t */\n\t\treturn {\n\t\t\t...state,\n\t\t\tbyClientId: {\n\t\t\t\t...omit( state.byClientId, visibleClientIds ),\n\t\t\t\t...getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\t},\n\t\t\tattributes: {\n\t\t\t\t...omit( state.attributes, visibleClientIds ),\n\t\t\t\t...getFlattenedBlockAttributes( action.blocks ),\n\t\t\t},\n\t\t\torder: {\n\t\t\t\t...omit( state.order, visibleClientIds ),\n\t\t\t\t...omit(\n\t\t\t\t\tmapBlockOrder( action.blocks ),\n\t\t\t\t\tcontrolledInnerBlocks\n\t\t\t\t),\n\t\t\t},\n\t\t\tparents: {\n\t\t\t\t...omit( state.parents, visibleClientIds ),\n\t\t\t\t...mapBlockParents( action.blocks ),\n\t\t\t},\n\t\t\tcache: {\n\t\t\t\t...omit( state.cache, visibleClientIds ),\n\t\t\t\t...omit(\n\t\t\t\t\tmapValues( flattenBlocks( action.blocks ), () => ( {} ) ),\n\t\t\t\t\tcontrolledInnerBlocks\n\t\t\t\t),\n\t\t\t},\n\t\t};\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `REPLACE_INNER_BLOCKS` action. When dispatched, this action the state\n * should become equivalent to the execution of a `REMOVE_BLOCKS` action\n * containing all the child's of the root block followed by the execution of\n * `INSERT_BLOCKS` with the new blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withReplaceInnerBlocks = ( reducer ) => ( state, action ) => {\n\tif ( action.type !== 'REPLACE_INNER_BLOCKS' ) {\n\t\treturn reducer( state, action );\n\t}\n\n\t// Finds every nested inner block controller. We must check the action blocks\n\t// and not just the block parent state because some inner block controllers\n\t// should be deleted if specified, whereas others should not be deleted. If\n\t// a controlled should not be deleted, then we need to avoid deleting its\n\t// inner blocks from the block state because its inner blocks will not be\n\t// attached to the block in the action.\n\tconst nestedControllers = {};\n\tif ( Object.keys( state.controlledInnerBlocks ).length ) {\n\t\tconst stack = [ ...action.blocks ];\n\t\twhile ( stack.length ) {\n\t\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\t\tstack.push( ...innerBlocks );\n\t\t\tif ( !! state.controlledInnerBlocks[ block.clientId ] ) {\n\t\t\t\tnestedControllers[ block.clientId ] = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// The `keepControlledInnerBlocks` prop will keep the inner blocks of the\n\t// marked block in the block state so that they can be reattached to the\n\t// marked block when we re-insert everything a few lines below.\n\tlet stateAfterBlocksRemoval = state;\n\tif ( state.order[ action.rootClientId ] ) {\n\t\tstateAfterBlocksRemoval = reducer( stateAfterBlocksRemoval, {\n\t\t\ttype: 'REMOVE_BLOCKS',\n\t\t\tkeepControlledInnerBlocks: nestedControllers,\n\t\t\tclientIds: state.order[ action.rootClientId ],\n\t\t} );\n\t}\n\tlet stateAfterInsert = stateAfterBlocksRemoval;\n\tif ( action.blocks.length ) {\n\t\tstateAfterInsert = reducer( stateAfterInsert, {\n\t\t\t...action,\n\t\t\ttype: 'INSERT_BLOCKS',\n\t\t\tindex: 0,\n\t\t} );\n\n\t\t// We need to re-attach the block order of the controlled inner blocks.\n\t\t// Otherwise, an inner block controller's blocks will be deleted entirely\n\t\t// from its entity..\n\t\tstateAfterInsert.order = {\n\t\t\t...stateAfterInsert.order,\n\t\t\t...reduce(\n\t\t\t\tnestedControllers,\n\t\t\t\t( result, value, key ) => {\n\t\t\t\t\tif ( state.order[ key ] ) {\n\t\t\t\t\t\tresult[ key ] = state.order[ key ];\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t},\n\t\t\t\t{}\n\t\t\t),\n\t\t};\n\t}\n\treturn stateAfterInsert;\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `SAVE_REUSABLE_BLOCK_SUCCESS` action. This action can't be handled by\n * regular reducers and needs a higher-order reducer since it needs access to\n * both `byClientId` and `attributes` simultaneously.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withSaveReusableBlock = ( reducer ) => ( state, action ) => {\n\tif ( state && action.type === 'SAVE_REUSABLE_BLOCK_SUCCESS' ) {\n\t\tconst { id, updatedId } = action;\n\n\t\t// If a temporary reusable block is saved, we swap the temporary id with the final one\n\t\tif ( id === updatedId ) {\n\t\t\treturn state;\n\t\t}\n\n\t\tstate = { ...state };\n\n\t\tstate.attributes = mapValues(\n\t\t\tstate.attributes,\n\t\t\t( attributes, clientId ) => {\n\t\t\t\tconst { name } = state.byClientId[ clientId ];\n\t\t\t\tif ( name === 'core/block' && attributes.ref === id ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...attributes,\n\t\t\t\t\t\tref: updatedId,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn attributes;\n\t\t\t}\n\t\t);\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Reducer returning the blocks state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blocks = flow(\n\tcombineReducers,\n\twithSaveReusableBlock, // needs to be before withBlockCache\n\twithBlockCache, // needs to be before withInnerBlocksRemoveCascade\n\twithInnerBlocksRemoveCascade,\n\twithReplaceInnerBlocks, // needs to be after withInnerBlocksRemoveCascade\n\twithBlockReset,\n\twithPersistentBlockChange,\n\twithIgnoredBlockChange\n)( {\n\tbyClientId( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn getFlattenedBlocksWithoutAttributes( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'UPDATE_BLOCK':\n\t\t\t\t// Ignore updates if block isn't known\n\t\t\t\tif ( ! state[ action.clientId ] ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\t// Do nothing if only attributes change.\n\t\t\t\tconst changes = omit( action.updates, 'attributes' );\n\t\t\t\tif ( isEmpty( changes ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.clientId ]: {\n\t\t\t\t\t\t...state[ action.clientId ],\n\t\t\t\t\t\t...changes,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, action.replacedClientIds ),\n\t\t\t\t\t...getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn omit( state, action.removedClientIds );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tattributes( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn getFlattenedBlockAttributes( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...getFlattenedBlockAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'UPDATE_BLOCK':\n\t\t\t\t// Ignore updates if block isn't known or there are no attribute changes.\n\t\t\t\tif (\n\t\t\t\t\t! state[ action.clientId ] ||\n\t\t\t\t\t! action.updates.attributes\n\t\t\t\t) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.clientId ]: {\n\t\t\t\t\t\t...state[ action.clientId ],\n\t\t\t\t\t\t...action.updates.attributes,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\tcase 'UPDATE_BLOCK_ATTRIBUTES': {\n\t\t\t\t// Avoid a state change if none of the block IDs are known.\n\t\t\t\tif ( action.clientIds.every( ( id ) => ! state[ id ] ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst next = action.clientIds.reduce(\n\t\t\t\t\t( accumulator, id ) => ( {\n\t\t\t\t\t\t...accumulator,\n\t\t\t\t\t\t[ id ]: reduce(\n\t\t\t\t\t\t\taction.uniqueByBlock\n\t\t\t\t\t\t\t\t? action.attributes[ id ]\n\t\t\t\t\t\t\t\t: action.attributes,\n\t\t\t\t\t\t\t( result, value, key ) => {\n\t\t\t\t\t\t\t\t// Consider as updates only changed values.\n\t\t\t\t\t\t\t\tif ( value !== result[ key ] ) {\n\t\t\t\t\t\t\t\t\tresult = getMutateSafeObject(\n\t\t\t\t\t\t\t\t\t\tstate[ id ],\n\t\t\t\t\t\t\t\t\t\tresult\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tresult[ key ] = value;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tstate[ id ]\n\t\t\t\t\t\t),\n\t\t\t\t\t} ),\n\t\t\t\t\t{}\n\t\t\t\t);\n\n\t\t\t\tif (\n\t\t\t\t\taction.clientIds.every(\n\t\t\t\t\t\t( id ) => next[ id ] === state[ id ]\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn { ...state, ...next };\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, action.replacedClientIds ),\n\t\t\t\t\t...getFlattenedBlockAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn omit( state, action.removedClientIds );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\torder( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn mapBlockOrder( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...omit( mapBlockOrder( action.blocks ), '' ),\n\t\t\t\t};\n\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst { rootClientId = '' } = action;\n\t\t\t\tconst subState = state[ rootClientId ] || [];\n\t\t\t\tconst mappedBlocks = mapBlockOrder(\n\t\t\t\t\taction.blocks,\n\t\t\t\t\trootClientId\n\t\t\t\t);\n\t\t\t\tconst { index = subState.length } = action;\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...mappedBlocks,\n\t\t\t\t\t[ rootClientId ]: insertAt(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tmappedBlocks[ rootClientId ],\n\t\t\t\t\t\tindex\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\n\t\t\t\tconst {\n\t\t\t\t\tfromRootClientId = '',\n\t\t\t\t\ttoRootClientId = '',\n\t\t\t\t\tclientIds,\n\t\t\t\t} = action;\n\t\t\t\tconst { index = state[ toRootClientId ].length } = action;\n\n\t\t\t\t// Moving inside the same parent block\n\t\t\t\tif ( fromRootClientId === toRootClientId ) {\n\t\t\t\t\tconst subState = state[ toRootClientId ];\n\t\t\t\t\tconst fromIndex = subState.indexOf( clientIds[ 0 ] );\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t[ toRootClientId ]: moveTo(\n\t\t\t\t\t\t\tstate[ toRootClientId ],\n\t\t\t\t\t\t\tfromIndex,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Moving from a parent block to another\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ fromRootClientId ]: without(\n\t\t\t\t\t\tstate[ fromRootClientId ],\n\t\t\t\t\t\t...clientIds\n\t\t\t\t\t),\n\t\t\t\t\t[ toRootClientId ]: insertAt(\n\t\t\t\t\t\tstate[ toRootClientId ],\n\t\t\t\t\t\tclientIds,\n\t\t\t\t\t\tindex\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_UP': {\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\tconst firstClientId = first( clientIds );\n\t\t\t\tconst subState = state[ rootClientId ];\n\n\t\t\t\tif (\n\t\t\t\t\t! subState.length ||\n\t\t\t\t\tfirstClientId === first( subState )\n\t\t\t\t) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ rootClientId ]: moveTo(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tfirstIndex,\n\t\t\t\t\t\tfirstIndex - 1,\n\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\tconst firstClientId = first( clientIds );\n\t\t\t\tconst lastClientId = last( clientIds );\n\t\t\t\tconst subState = state[ rootClientId ];\n\n\t\t\t\tif ( ! subState.length || lastClientId === last( subState ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ rootClientId ]: moveTo(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tfirstIndex,\n\t\t\t\t\t\tfirstIndex + 1,\n\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst { clientIds } = action;\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst mappedBlocks = mapBlockOrder( action.blocks );\n\n\t\t\t\treturn flow( [\n\t\t\t\t\t( nextState ) =>\n\t\t\t\t\t\tomit( nextState, action.replacedClientIds ),\n\t\t\t\t\t( nextState ) => ( {\n\t\t\t\t\t\t...nextState,\n\t\t\t\t\t\t...omit( mappedBlocks, '' ),\n\t\t\t\t\t} ),\n\t\t\t\t\t( nextState ) =>\n\t\t\t\t\t\tmapValues( nextState, ( subState ) =>\n\t\t\t\t\t\t\treduce(\n\t\t\t\t\t\t\t\tsubState,\n\t\t\t\t\t\t\t\t( result, clientId ) => {\n\t\t\t\t\t\t\t\t\tif ( clientId === clientIds[ 0 ] ) {\n\t\t\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\t\t\t\t\t...mappedBlocks[ '' ],\n\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tclientIds.indexOf( clientId ) === -1\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tresult.push( clientId );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t[]\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t] )( state );\n\t\t\t}\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn flow( [\n\t\t\t\t\t// Remove inner block ordering for removed blocks\n\t\t\t\t\t( nextState ) => omit( nextState, action.removedClientIds ),\n\n\t\t\t\t\t// Remove deleted blocks from other blocks' orderings\n\t\t\t\t\t( nextState ) =>\n\t\t\t\t\t\tmapValues( nextState, ( subState ) =>\n\t\t\t\t\t\t\twithout( subState, ...action.removedClientIds )\n\t\t\t\t\t\t),\n\t\t\t\t] )( state );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\t// While technically redundant data as the inverse of `order`, it serves as\n\t// an optimization for the selectors which derive the ancestry of a block.\n\tparents( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn mapBlockParents( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...mapBlockParents( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...mapBlockParents(\n\t\t\t\t\t\taction.blocks,\n\t\t\t\t\t\taction.rootClientId || ''\n\t\t\t\t\t),\n\t\t\t\t};\n\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...action.clientIds.reduce( ( accumulator, id ) => {\n\t\t\t\t\t\taccumulator[ id ] = action.toRootClientId || '';\n\t\t\t\t\t\treturn accumulator;\n\t\t\t\t\t}, {} ),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, action.replacedClientIds ),\n\t\t\t\t\t...mapBlockParents(\n\t\t\t\t\t\taction.blocks,\n\t\t\t\t\t\tstate[ action.clientIds[ 0 ] ]\n\t\t\t\t\t),\n\t\t\t\t};\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn omit( state, action.removedClientIds );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tcontrolledInnerBlocks(\n\t\tstate = {},\n\t\t{ type, clientId, hasControlledInnerBlocks }\n\t) {\n\t\tif ( type === 'SET_HAS_CONTROLLED_INNER_BLOCKS' ) {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ clientId ]: hasControlledInnerBlocks,\n\t\t\t};\n\t\t}\n\t\treturn state;\n\t},\n} );\n\n/**\n * Reducer returning typing state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isTyping( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_TYPING':\n\t\t\treturn true;\n\n\t\tcase 'STOP_TYPING':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning dragged block client id.\n *\n * @param {string[]} state  Current state.\n * @param {Object}   action Dispatched action.\n *\n * @return {string[]} Updated state.\n */\nexport function draggedBlocks( state = [], action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_DRAGGING_BLOCKS':\n\t\t\treturn action.clientIds;\n\n\t\tcase 'STOP_DRAGGING_BLOCKS':\n\t\t\treturn [];\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the caret is within formatted text.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isCaretWithinFormattedText( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ENTER_FORMATTED_TEXT':\n\t\t\treturn true;\n\n\t\tcase 'EXIT_FORMATTED_TEXT':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Internal helper reducer for selectionStart and selectionEnd. Can hold a block\n * selection, represented by an object with property clientId.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nfunction selectionHelper( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'CLEAR_SELECTED_BLOCK': {\n\t\t\tif ( state.clientId ) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\t\tcase 'SELECT_BLOCK':\n\t\t\tif ( action.clientId === state.clientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: action.clientId };\n\t\tcase 'REPLACE_INNER_BLOCKS':\n\t\tcase 'INSERT_BLOCKS': {\n\t\t\tif ( ! action.updateSelection || ! action.blocks.length ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: action.blocks[ 0 ].clientId };\n\t\t}\n\t\tcase 'REMOVE_BLOCKS':\n\t\t\tif (\n\t\t\t\t! action.clientIds ||\n\t\t\t\t! action.clientIds.length ||\n\t\t\t\taction.clientIds.indexOf( state.clientId ) === -1\n\t\t\t) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {};\n\t\tcase 'REPLACE_BLOCKS': {\n\t\t\tif ( action.clientIds.indexOf( state.clientId ) === -1 ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tconst indexToSelect =\n\t\t\t\taction.indexToSelect || action.blocks.length - 1;\n\t\t\tconst blockToSelect = action.blocks[ indexToSelect ];\n\n\t\t\tif ( ! blockToSelect ) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\tif ( blockToSelect.clientId === state.clientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: blockToSelect.clientId };\n\t\t}\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the selection state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function selection( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SELECTION_CHANGE':\n\t\t\treturn {\n\t\t\t\tselectionStart: {\n\t\t\t\t\tclientId: action.clientId,\n\t\t\t\t\tattributeKey: action.attributeKey,\n\t\t\t\t\toffset: action.startOffset,\n\t\t\t\t},\n\t\t\t\tselectionEnd: {\n\t\t\t\t\tclientId: action.clientId,\n\t\t\t\t\tattributeKey: action.attributeKey,\n\t\t\t\t\toffset: action.endOffset,\n\t\t\t\t},\n\t\t\t};\n\t\tcase 'RESET_SELECTION':\n\t\t\tconst { selectionStart, selectionEnd } = action;\n\t\t\treturn {\n\t\t\t\tselectionStart,\n\t\t\t\tselectionEnd,\n\t\t\t};\n\t\tcase 'MULTI_SELECT':\n\t\t\tconst { start, end } = action;\n\t\t\treturn {\n\t\t\t\tselectionStart: { clientId: start },\n\t\t\t\tselectionEnd: { clientId: end },\n\t\t\t};\n\t\tcase 'RESET_BLOCKS':\n\t\t\tconst startClientId = state?.selectionStart?.clientId;\n\t\t\tconst endClientId = state?.selectionEnd?.clientId;\n\n\t\t\t// Do nothing if there's no selected block.\n\t\t\tif ( ! startClientId && ! endClientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\t// If the start of the selection won't exist after reset, remove selection.\n\t\t\tif (\n\t\t\t\t! action.blocks.some(\n\t\t\t\t\t( block ) => block.clientId === startClientId\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tselectionStart: {},\n\t\t\t\t\tselectionEnd: {},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// If the end of the selection won't exist after reset, collapse selection.\n\t\t\tif (\n\t\t\t\t! action.blocks.some(\n\t\t\t\t\t( block ) => block.clientId === endClientId\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tselectionEnd: state.selectionStart,\n\t\t\t\t};\n\t\t\t}\n\t}\n\n\treturn {\n\t\tselectionStart: selectionHelper( state.selectionStart, action ),\n\t\tselectionEnd: selectionHelper( state.selectionEnd, action ),\n\t};\n}\n\n/**\n * Reducer returning whether the user is multi-selecting.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isMultiSelecting( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_MULTI_SELECT':\n\t\t\treturn true;\n\n\t\tcase 'STOP_MULTI_SELECT':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether selection is enabled.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isSelectionEnabled( state = true, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'TOGGLE_SELECTION':\n\t\t\treturn action.isSelectionEnabled;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the intial block selection.\n *\n * Currently this in only used to restore the selection after block deletion and\n * pasting new content.This reducer should eventually be removed in favour of setting\n * selection directly.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {number|null} Initial position: 0, -1 or null.\n */\nexport function initialPosition( state = null, action ) {\n\tif (\n\t\taction.type === 'REPLACE_BLOCKS' &&\n\t\taction.initialPosition !== undefined\n\t) {\n\t\treturn action.initialPosition;\n\t} else if (\n\t\t[\n\t\t\t'SELECT_BLOCK',\n\t\t\t'RESET_SELECTION',\n\t\t\t'INSERT_BLOCKS',\n\t\t\t'REPLACE_INNER_BLOCKS',\n\t\t].includes( action.type )\n\t) {\n\t\treturn action.initialPosition;\n\t}\n\n\treturn state;\n}\n\nexport function blocksMode( state = {}, action ) {\n\tif ( action.type === 'TOGGLE_BLOCK_MODE' ) {\n\t\tconst { clientId } = action;\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ clientId ]:\n\t\t\t\tstate[ clientId ] && state[ clientId ] === 'html'\n\t\t\t\t\t? 'visual'\n\t\t\t\t\t: 'html',\n\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block insertion point visibility, either null if there\n * is not an explicit insertion point assigned, or an object of its `index` and\n * `rootClientId`.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function insertionPoint( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SHOW_INSERTION_POINT':\n\t\t\tconst { rootClientId, index, __unstableWithInserter } = action;\n\t\t\treturn { rootClientId, index, __unstableWithInserter };\n\n\t\tcase 'HIDE_INSERTION_POINT':\n\t\t\treturn null;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the post blocks match the defined template or not.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function template( state = { isValid: true }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_TEMPLATE_VALIDITY':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisValid: action.isValid,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the editor setting.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function settings( state = SETTINGS_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_SETTINGS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.settings,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the user preferences.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function preferences( state = PREFERENCES_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'INSERT_BLOCKS':\n\t\tcase 'REPLACE_BLOCKS':\n\t\t\treturn action.blocks.reduce( ( prevState, block ) => {\n\t\t\t\tconst { attributes, name: blockName } = block;\n\t\t\t\tconst match = select( blocksStore ).getActiveBlockVariation(\n\t\t\t\t\tblockName,\n\t\t\t\t\tattributes\n\t\t\t\t);\n\t\t\t\t// If a block variation match is found change the name to be the same with the\n\t\t\t\t// one that is used for block variations in the Inserter (`getItemFromVariation`).\n\t\t\t\tlet id = match?.name\n\t\t\t\t\t? `${ blockName }/${ match.name }`\n\t\t\t\t\t: blockName;\n\t\t\t\tconst insert = { name: id };\n\t\t\t\tif ( blockName === 'core/block' ) {\n\t\t\t\t\tinsert.ref = attributes.ref;\n\t\t\t\t\tid += '/' + attributes.ref;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...prevState,\n\t\t\t\t\tinsertUsage: {\n\t\t\t\t\t\t...prevState.insertUsage,\n\t\t\t\t\t\t[ id ]: {\n\t\t\t\t\t\t\ttime: action.time,\n\t\t\t\t\t\t\tcount: prevState.insertUsage[ id ]\n\t\t\t\t\t\t\t\t? prevState.insertUsage[ id ].count + 1\n\t\t\t\t\t\t\t\t: 1,\n\t\t\t\t\t\t\tinsert,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}, state );\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning an object where each key is a block client ID, its value\n * representing the settings for its nested blocks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blockListSettings = ( state = {}, action ) => {\n\tswitch ( action.type ) {\n\t\t// Even if the replaced blocks have the same client ID, our logic\n\t\t// should correct the state.\n\t\tcase 'REPLACE_BLOCKS':\n\t\tcase 'REMOVE_BLOCKS': {\n\t\t\treturn omit( state, action.clientIds );\n\t\t}\n\t\tcase 'UPDATE_BLOCK_LIST_SETTINGS': {\n\t\t\tconst { clientId } = action;\n\t\t\tif ( ! action.settings ) {\n\t\t\t\tif ( state.hasOwnProperty( clientId ) ) {\n\t\t\t\t\treturn omit( state, clientId );\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tif ( isEqual( state[ clientId ], action.settings ) ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ clientId ]: action.settings,\n\t\t\t};\n\t\t}\n\t}\n\treturn state;\n};\n\n/**\n * Reducer returning whether the navigation mode is enabled or not.\n *\n * @param {string} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function isNavigationMode( state = false, action ) {\n\t// Let inserting block always trigger Edit mode.\n\tif ( action.type === 'INSERT_BLOCKS' ) {\n\t\treturn false;\n\t}\n\n\tif ( action.type === 'SET_NAVIGATION_MODE' ) {\n\t\treturn action.isNavigationMode;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the block moving mode is enabled or not.\n *\n * @param {string|null} state  Current state.\n * @param {Object}      action Dispatched action.\n *\n * @return {string|null} Updated state.\n */\nexport function hasBlockMovingClientId( state = null, action ) {\n\t// Let inserting block always trigger Edit mode.\n\n\tif ( action.type === 'SET_BLOCK_MOVING_MODE' ) {\n\t\treturn action.hasBlockMovingClientId;\n\t}\n\n\tif ( action.type === 'SET_NAVIGATION_MODE' ) {\n\t\treturn null;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer return an updated state representing the most recent block attribute\n * update. The state is structured as an object where the keys represent the\n * client IDs of blocks, the values a subset of attributes from the most recent\n * block update. The state is always reset to null if the last action is\n * anything other than an attributes update.\n *\n * @param {Object<string,Object>} state  Current state.\n * @param {Object}                action Action object.\n *\n * @return {[string,Object]} Updated state.\n */\nexport function lastBlockAttributesChange( state, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_BLOCK':\n\t\t\tif ( ! action.updates.attributes ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn { [ action.clientId ]: action.updates.attributes };\n\n\t\tcase 'UPDATE_BLOCK_ATTRIBUTES':\n\t\t\treturn action.clientIds.reduce(\n\t\t\t\t( accumulator, id ) => ( {\n\t\t\t\t\t...accumulator,\n\t\t\t\t\t[ id ]: action.uniqueByBlock\n\t\t\t\t\t\t? action.attributes[ id ]\n\t\t\t\t\t\t: action.attributes,\n\t\t\t\t} ),\n\t\t\t\t{}\n\t\t\t);\n\t}\n\n\treturn null;\n}\n\n/**\n * Reducer returning automatic change state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function automaticChangeStatus( state, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'MARK_AUTOMATIC_CHANGE':\n\t\t\treturn 'pending';\n\t\tcase 'MARK_AUTOMATIC_CHANGE_FINAL':\n\t\t\tif ( state === 'pending' ) {\n\t\t\t\treturn 'final';\n\t\t\t}\n\n\t\t\treturn;\n\t\tcase 'SELECTION_CHANGE':\n\t\t\t// As long as the state is not final, ignore any selection changes.\n\t\t\tif ( state !== 'final' ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn;\n\t\t// Undoing an automatic change should still be possible after mouse\n\t\t// move.\n\t\tcase 'START_TYPING':\n\t\tcase 'STOP_TYPING':\n\t\t\treturn state;\n\t}\n\n\t// Reset the state by default (for any action not handled).\n}\n\n/**\n * Reducer returning current highlighted block.\n *\n * @param {boolean} state  Current highlighted block.\n * @param {Object}  action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function highlightedBlock( state, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'TOGGLE_BLOCK_HIGHLIGHT':\n\t\t\tconst { clientId, isHighlighted } = action;\n\n\t\t\tif ( isHighlighted ) {\n\t\t\t\treturn clientId;\n\t\t\t} else if ( state === clientId ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn state;\n\t\tcase 'SELECT_BLOCK':\n\t\t\tif ( action.clientId !== state ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block insertion event list state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function lastBlockInserted( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'INSERT_BLOCKS':\n\t\t\tif ( ! action.blocks.length ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tconst clientId = action.blocks[ 0 ].clientId;\n\t\t\tconst source = action.meta?.source;\n\n\t\t\treturn { clientId, source };\n\t\tcase 'RESET_BLOCKS':\n\t\t\treturn {};\n\t}\n\treturn state;\n}\n\nexport default combineReducers( {\n\tblocks,\n\tisTyping,\n\tdraggedBlocks,\n\tisCaretWithinFormattedText,\n\tselection,\n\tisMultiSelecting,\n\tisSelectionEnabled,\n\tinitialPosition,\n\tblocksMode,\n\tblockListSettings,\n\tinsertionPoint,\n\ttemplate,\n\tsettings,\n\tpreferences,\n\tlastBlockAttributesChange,\n\tisNavigationMode,\n\thasBlockMovingClientId,\n\tautomaticChangeStatus,\n\thighlightedBlock,\n\tlastBlockInserted,\n} );\n"]}