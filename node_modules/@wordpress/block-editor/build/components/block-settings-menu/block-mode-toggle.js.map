{"version":3,"sources":["@wordpress/block-editor/src/components/block-settings-menu/block-mode-toggle.js"],"names":["BlockModeToggle","blockType","mode","onToggleMode","small","isCodeEditingEnabled","label","select","clientId","getBlock","getBlockMode","getSettings","blockEditorStore","block","codeEditingEnabled","name","dispatch","onToggle","noop","toggleBlockMode"],"mappings":";;;;;;;;;;AAGA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AAKA;;AAjBA;AACA;AACA;;AAGA;AACA;AACA;;AAOA;AACA;AACA;AAGO,SAASA,eAAT,CAA0B;AAChCC,EAAAA,SADgC;AAEhCC,EAAAA,IAFgC;AAGhCC,EAAAA,YAHgC;AAIhCC,EAAAA,KAAK,GAAG,KAJwB;AAKhCC,EAAAA,oBAAoB,GAAG;AALS,CAA1B,EAMH;AACH,MACC,CAAE,6BAAiBJ,SAAjB,EAA4B,MAA5B,EAAoC,IAApC,CAAF,IACA,CAAEI,oBAFH,EAGE;AACD,WAAO,IAAP;AACA;;AAED,QAAMC,KAAK,GACVJ,IAAI,KAAK,QAAT,GAAoB,cAAI,cAAJ,CAApB,GAA2C,cAAI,eAAJ,CAD5C;AAGA,SAAO,4BAAC,oBAAD;AAAU,IAAA,OAAO,EAAGC;AAApB,KAAqC,CAAEC,KAAF,IAAWE,KAAhD,CAAP;AACA;;eAEc,sBAAS,CACvB,sBAAY,CAAEC,MAAF,EAAU;AAAEC,EAAAA;AAAF,CAAV,KAA4B;AACvC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA;AAA1B,MAA0CJ,MAAM,CACrDK,YADqD,CAAtD;AAGA,QAAMC,KAAK,GAAGJ,QAAQ,CAAED,QAAF,CAAtB;AACA,QAAMH,oBAAoB,GAAGM,WAAW,GAAGG,kBAA3C;AAEA,SAAO;AACNZ,IAAAA,IAAI,EAAEQ,YAAY,CAAEF,QAAF,CADZ;AAENP,IAAAA,SAAS,EAAEY,KAAK,GAAG,0BAAcA,KAAK,CAACE,IAApB,CAAH,GAAgC,IAF1C;AAGNV,IAAAA;AAHM,GAAP;AAKA,CAZD,CADuB,EAcvB,wBAAc,CAAEW,QAAF,EAAY;AAAEC,EAAAA,QAAQ,GAAGC,YAAb;AAAmBV,EAAAA;AAAnB,CAAZ,MAAiD;AAC9DL,EAAAA,YAAY,GAAG;AACda,IAAAA,QAAQ,CAAEJ,YAAF,CAAR,CAA6BO,eAA7B,CAA8CX,QAA9C;AACAS,IAAAA,QAAQ;AACR;;AAJ6D,CAAjD,CAAd,CAduB,CAAT,EAoBVjB,eApBU,C","sourcesContent":["/**\n * External dependencies\n */\nimport { noop } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { MenuItem } from '@wordpress/components';\nimport { getBlockType, hasBlockSupport } from '@wordpress/blocks';\nimport { withSelect, withDispatch } from '@wordpress/data';\nimport { compose } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\n\nexport function BlockModeToggle( {\n\tblockType,\n\tmode,\n\tonToggleMode,\n\tsmall = false,\n\tisCodeEditingEnabled = true,\n} ) {\n\tif (\n\t\t! hasBlockSupport( blockType, 'html', true ) ||\n\t\t! isCodeEditingEnabled\n\t) {\n\t\treturn null;\n\t}\n\n\tconst label =\n\t\tmode === 'visual' ? __( 'Edit as HTML' ) : __( 'Edit visually' );\n\n\treturn <MenuItem onClick={ onToggleMode }>{ ! small && label }</MenuItem>;\n}\n\nexport default compose( [\n\twithSelect( ( select, { clientId } ) => {\n\t\tconst { getBlock, getBlockMode, getSettings } = select(\n\t\t\tblockEditorStore\n\t\t);\n\t\tconst block = getBlock( clientId );\n\t\tconst isCodeEditingEnabled = getSettings().codeEditingEnabled;\n\n\t\treturn {\n\t\t\tmode: getBlockMode( clientId ),\n\t\t\tblockType: block ? getBlockType( block.name ) : null,\n\t\t\tisCodeEditingEnabled,\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch, { onToggle = noop, clientId } ) => ( {\n\t\tonToggleMode() {\n\t\t\tdispatch( blockEditorStore ).toggleBlockMode( clientId );\n\t\t\tonToggle();\n\t\t},\n\t} ) ),\n] )( BlockModeToggle );\n"]}