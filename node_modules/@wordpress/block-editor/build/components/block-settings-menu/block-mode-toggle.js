"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockModeToggle = BlockModeToggle;
exports.default = void 0;

var _element = require("@wordpress/element");

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _blocks = require("@wordpress/blocks");

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _store = require("../../store");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function BlockModeToggle({
  blockType,
  mode,
  onToggleMode,
  small = false,
  isCodeEditingEnabled = true
}) {
  if (!(0, _blocks.hasBlockSupport)(blockType, 'html', true) || !isCodeEditingEnabled) {
    return null;
  }

  const label = mode === 'visual' ? (0, _i18n.__)('Edit as HTML') : (0, _i18n.__)('Edit visually');
  return (0, _element.createElement)(_components.MenuItem, {
    onClick: onToggleMode
  }, !small && label);
}

var _default = (0, _compose.compose)([(0, _data.withSelect)((select, {
  clientId
}) => {
  const {
    getBlock,
    getBlockMode,
    getSettings
  } = select(_store.store);
  const block = getBlock(clientId);
  const isCodeEditingEnabled = getSettings().codeEditingEnabled;
  return {
    mode: getBlockMode(clientId),
    blockType: block ? (0, _blocks.getBlockType)(block.name) : null,
    isCodeEditingEnabled
  };
}), (0, _data.withDispatch)((dispatch, {
  onToggle = _lodash.noop,
  clientId
}) => ({
  onToggleMode() {
    dispatch(_store.store).toggleBlockMode(clientId);
    onToggle();
  }

}))])(BlockModeToggle);

exports.default = _default;
//# sourceMappingURL=block-mode-toggle.js.map