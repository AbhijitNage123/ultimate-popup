{"version":3,"sources":["@wordpress/block-editor/src/components/block-title/index.js"],"names":["BlockTitle","clientId","attributes","name","reusableBlockTitle","select","getBlockName","getBlockAttributes","__experimentalGetReusableBlockTitle","blockEditorStore","blockName","isReusable","ref","blockInformation","blockType","label","title","length"],"mappings":";;;;;;;;;AAGA;;AAKA;;AACA;;AASA;;AACA;;AAnBA;AACA;AACA;;AAGA;AACA;AACA;;AAQA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,UAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAoC;AAClD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA;AAApB,MAA2C,qBAC9CC,MAAF,IAAc;AACb,QAAK,CAAEJ,QAAP,EAAkB;AACjB,aAAO,EAAP;AACA;;AACD,UAAM;AACLK,MAAAA,YADK;AAELC,MAAAA,kBAFK;AAGLC,MAAAA;AAHK,QAIFH,MAAM,CAAEI,YAAF,CAJV;AAKA,UAAMC,SAAS,GAAGJ,YAAY,CAAEL,QAAF,CAA9B;;AACA,QAAK,CAAES,SAAP,EAAmB;AAClB,aAAO,EAAP;AACA;;AACD,UAAMC,UAAU,GAAG,6BAAiB,0BAAcD,SAAd,CAAjB,CAAnB;AACA,WAAO;AACNR,MAAAA,UAAU,EAAEK,kBAAkB,CAAEN,QAAF,CADxB;AAENE,MAAAA,IAAI,EAAEO,SAFA;AAGNN,MAAAA,kBAAkB,EACjBO,UAAU,IACVH,mCAAmC,CAClCD,kBAAkB,CAAEN,QAAF,CAAlB,CAA+BW,GADG;AAL9B,KAAP;AASA,GAxB+C,EAyBhD,CAAEX,QAAF,CAzBgD,CAAjD;AA4BA,QAAMY,gBAAgB,GAAG,yCAA4BZ,QAA5B,CAAzB;AACA,MAAK,CAAEE,IAAF,IAAU,CAAEU,gBAAjB,EAAoC,OAAO,IAAP;AACpC,QAAMC,SAAS,GAAG,0BAAcX,IAAd,CAAlB;AACA,QAAMY,KAAK,GAAGX,kBAAkB,IAAI,yCAAeU,SAAf,EAA0BZ,UAA1B,CAApC,CAhCkD,CAiClD;AACA;AACA;;AACA,MAAKa,KAAK,KAAKD,SAAS,CAACE,KAAzB,EAAiC;AAChC,WAAO,sBAAUD,KAAV,EAAiB;AAAEE,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAAP;AACA;;AACD,SAAOJ,gBAAgB,CAACG,KAAxB;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { truncate } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useSelect } from '@wordpress/data';\nimport {\n\tgetBlockType,\n\t__experimentalGetBlockLabel as getBlockLabel,\n\tisReusableBlock,\n} from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport useBlockDisplayInformation from '../use-block-display-information';\nimport { store as blockEditorStore } from '../../store';\n\n/**\n * Renders the block's configured title as a string, or empty if the title\n * cannot be determined.\n *\n * @example\n *\n * ```jsx\n * <BlockTitle clientId=\"afd1cb17-2c08-4e7a-91be-007ba7ddc3a1\" />\n * ```\n *\n * @param {Object} props\n * @param {string} props.clientId Client ID of block.\n *\n * @return {?string} Block title.\n */\nexport default function BlockTitle( { clientId } ) {\n\tconst { attributes, name, reusableBlockTitle } = useSelect(\n\t\t( select ) => {\n\t\t\tif ( ! clientId ) {\n\t\t\t\treturn {};\n\t\t\t}\n\t\t\tconst {\n\t\t\t\tgetBlockName,\n\t\t\t\tgetBlockAttributes,\n\t\t\t\t__experimentalGetReusableBlockTitle,\n\t\t\t} = select( blockEditorStore );\n\t\t\tconst blockName = getBlockName( clientId );\n\t\t\tif ( ! blockName ) {\n\t\t\t\treturn {};\n\t\t\t}\n\t\t\tconst isReusable = isReusableBlock( getBlockType( blockName ) );\n\t\t\treturn {\n\t\t\t\tattributes: getBlockAttributes( clientId ),\n\t\t\t\tname: blockName,\n\t\t\t\treusableBlockTitle:\n\t\t\t\t\tisReusable &&\n\t\t\t\t\t__experimentalGetReusableBlockTitle(\n\t\t\t\t\t\tgetBlockAttributes( clientId ).ref\n\t\t\t\t\t),\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\tconst blockInformation = useBlockDisplayInformation( clientId );\n\tif ( ! name || ! blockInformation ) return null;\n\tconst blockType = getBlockType( name );\n\tconst label = reusableBlockTitle || getBlockLabel( blockType, attributes );\n\t// Label will fallback to the title if no label is defined for the current\n\t// label context. If the label is defined we prioritize it over possible\n\t// possible block variation title match.\n\tif ( label !== blockType.title ) {\n\t\treturn truncate( label, { length: 35 } );\n\t}\n\treturn blockInformation.title;\n}\n"]}