"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAllUnit = getAllUnit;
exports.getAllValue = getAllValue;
exports.hasMixedValues = hasMixedValues;
exports.hasDefinedValues = hasDefinedValues;

var _components = require("@wordpress/components");

/**
 * WordPress dependencies
 */

/**
 * Gets the item with the highest occurrence within an array
 * https://stackoverflow.com/a/20762713
 *
 * @param {Array<any>} arr Array of items to check.
 * @return {any}           The item with the most occurrences.
 */
function mode(arr) {
  return arr.sort((a, b) => arr.filter(v => v === a).length - arr.filter(v => v === b).length).pop();
}
/**
 * Returns the most common CSS unit in the radius values.
 *
 * @param {Object|string} values Radius values.
 * @return {string}              Most common CSS unit in values.
 */


function getAllUnit(values = {}) {
  if (typeof values === 'string') {
    const [, unit] = (0, _components.__experimentalParseUnit)(values);
    return unit || 'px';
  }

  const allUnits = Object.values(values).map(value => {
    const [, unit] = (0, _components.__experimentalParseUnit)(value);
    return unit;
  });
  return mode(allUnits);
}
/**
 * Gets the 'all' input value and unit from values data.
 *
 * @param {Object|string} values Radius values.
 * @return {string}              A value + unit for the 'all' input.
 */


function getAllValue(values = {}) {
  /**
   * Border radius support was originally a single pixel value.
   *
   * To maintain backwards compatibility treat this case as the all value.
   */
  if (typeof values === 'string') {
    return values;
  }

  const parsedValues = Object.values(values).map(value => (0, _components.__experimentalParseUnit)(value));
  const allValues = parsedValues.map(value => value[0]);
  const allUnits = parsedValues.map(value => value[1]);
  const value = allValues.every(v => v === allValues[0]) ? allValues[0] : '';
  const unit = mode(allUnits);
  const allValue = value === 0 || value ? `${value}${unit}` : null;
  return allValue;
}
/**
 * Checks to determine if values are mixed.
 *
 * @param {Object} values Radius values.
 * @return {boolean}      Whether values are mixed.
 */


function hasMixedValues(values = {}) {
  const allValue = getAllValue(values);
  const isMixed = isNaN(parseFloat(allValue));
  return isMixed;
}
/**
 * Checks to determine if values are defined.
 *
 * @param {Object} values Radius values.
 * @return {boolean}      Whether values are mixed.
 */


function hasDefinedValues(values) {
  if (!values) {
    return false;
  } // A string value represents a shorthand value.


  if (typeof values === 'string') {
    return true;
  } // An object represents longhand border radius values, if any are set
  // flag values as being defined.


  const filteredValues = Object.values(values).filter(value => {
    return !!value || value === 0;
  });
  return !!filteredValues.length;
}
//# sourceMappingURL=utils.js.map