"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TextTransformControl;

var _element = require("@wordpress/element");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

/**
 * WordPress dependencies
 */
const TEXT_TRANSFORMS = [{
  name: (0, _i18n.__)('Uppercase'),
  value: 'uppercase',
  icon: _icons.formatUppercase
}, {
  name: (0, _i18n.__)('Lowercase'),
  value: 'lowercase',
  icon: _icons.formatLowercase
}, {
  name: (0, _i18n.__)('Capitalize'),
  value: 'capitalize',
  icon: _icons.formatCapitalize
}];
/**
 * Control to facilitate text transform selections.
 *
 * @param {Object}   props          Component props.
 * @param {string}   props.value    Currently selected text transform.
 * @param {Function} props.onChange Handles change in text transform selection.
 *
 * @return {WPElement} Text transform control.
 */

function TextTransformControl({
  value,
  onChange
}) {
  return (0, _element.createElement)("fieldset", {
    className: "block-editor-text-transform-control"
  }, (0, _element.createElement)("legend", null, (0, _i18n.__)('Letter case')), (0, _element.createElement)("div", {
    className: "block-editor-text-transform-control__buttons"
  }, TEXT_TRANSFORMS.map(textTransform => {
    return (0, _element.createElement)(_components.Button, {
      key: textTransform.value,
      icon: textTransform.icon,
      isSmall: true,
      isPressed: value === textTransform.value,
      "aria-label": textTransform.name,
      onClick: () => onChange(value === textTransform.value ? undefined : textTransform.value)
    });
  })));
}
//# sourceMappingURL=index.js.map