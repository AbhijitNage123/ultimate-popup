{"version":3,"sources":["@wordpress/block-editor/src/components/block-edit/edit.js"],"names":["DEFAULT_BLOCK_CONTEXT","Edit","props","attributes","name","blockType","blockContext","BlockContext","context","usesContext","Component","edit","save","apiVersion","generatedClassName","className"],"mappings":";;;;;;;;;AAeA;;;;AAZA;;AACA;;AAKA;;AACA;;AAUA;;AApBA;AACA;AACA;;AAIA;AACA;AACA;;AASA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,qBAAqB,GAAG,EAA9B;;AAEO,MAAMC,IAAI,GAAKC,KAAF,IAAa;AAChC,QAAM;AAAEC,IAAAA,UAAU,GAAG,EAAf;AAAmBC,IAAAA;AAAnB,MAA4BF,KAAlC;AACA,QAAMG,SAAS,GAAG,0BAAcD,IAAd,CAAlB;AACA,QAAME,YAAY,GAAG,yBAAYC,qBAAZ,CAArB,CAHgC,CAKhC;;AACA,QAAMC,OAAO,GAAG,sBAAS,MAAM;AAC9B,WAAOH,SAAS,IAAIA,SAAS,CAACI,WAAvB,GACJ,kBAAMH,YAAN,EAAoBD,SAAS,CAACI,WAA9B,CADI,GAEJT,qBAFH;AAGA,GAJe,EAIb,CAAEK,SAAF,EAAaC,YAAb,CAJa,CAAhB;;AAMA,MAAK,CAAED,SAAP,EAAmB;AAClB,WAAO,IAAP;AACA,GAd+B,CAgBhC;AACA;AACA;;;AACA,QAAMK,SAAS,GAAGL,SAAS,CAACM,IAAV,IAAkBN,SAAS,CAACO,IAA9C;;AAEA,MACCP,SAAS,CAACQ,UAAV,GAAuB,CAAvB,IACA,6BAAiBR,SAAjB,EAA4B,mBAA5B,EAAiD,KAAjD,CAFD,EAGE;AACD,WAAO,4BAAC,SAAD,6BAAgBH,KAAhB;AAAwB,MAAA,OAAO,EAAGM;AAAlC,OAAP;AACA,GA1B+B,CA4BhC;;;AACA,QAAMM,kBAAkB,GAAG,6BAAiBT,SAAjB,EAA4B,WAA5B,EAAyC,IAAzC,IACxB,sCAA0BD,IAA1B,CADwB,GAExB,IAFH;AAGA,QAAMW,SAAS,GAAG,yBAAYD,kBAAZ,EAAgCX,UAAU,CAACY,SAA3C,CAAlB;AAEA,SACC,4BAAC,SAAD,6BAAgBb,KAAhB;AAAwB,IAAA,OAAO,EAAGM,OAAlC;AAA4C,IAAA,SAAS,EAAGO;AAAxD,KADD;AAGA,CArCM;;;;eAuCQ,6BAAa,kBAAb,EAAmCd,IAAnC,C","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { pick } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { withFilters } from '@wordpress/components';\nimport {\n\tgetBlockDefaultClassName,\n\thasBlockSupport,\n\tgetBlockType,\n} from '@wordpress/blocks';\nimport { useContext, useMemo } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport BlockContext from '../block-context';\n\n/**\n * Default value used for blocks which do not define their own context needs,\n * used to guarantee that a block's `context` prop will always be an object. It\n * is assigned as a constant since it is always expected to be an empty object,\n * and in order to avoid unnecessary React reconciliations of a changing object.\n *\n * @type {{}}\n */\nconst DEFAULT_BLOCK_CONTEXT = {};\n\nexport const Edit = ( props ) => {\n\tconst { attributes = {}, name } = props;\n\tconst blockType = getBlockType( name );\n\tconst blockContext = useContext( BlockContext );\n\n\t// Assign context values using the block type's declared context needs.\n\tconst context = useMemo( () => {\n\t\treturn blockType && blockType.usesContext\n\t\t\t? pick( blockContext, blockType.usesContext )\n\t\t\t: DEFAULT_BLOCK_CONTEXT;\n\t}, [ blockType, blockContext ] );\n\n\tif ( ! blockType ) {\n\t\treturn null;\n\t}\n\n\t// `edit` and `save` are functions or components describing the markup\n\t// with which a block is displayed. If `blockType` is valid, assign\n\t// them preferentially as the render value for the block.\n\tconst Component = blockType.edit || blockType.save;\n\n\tif (\n\t\tblockType.apiVersion > 1 ||\n\t\thasBlockSupport( blockType, 'lightBlockWrapper', false )\n\t) {\n\t\treturn <Component { ...props } context={ context } />;\n\t}\n\n\t// Generate a class name for the block's editable form\n\tconst generatedClassName = hasBlockSupport( blockType, 'className', true )\n\t\t? getBlockDefaultClassName( name )\n\t\t: null;\n\tconst className = classnames( generatedClassName, attributes.className );\n\n\treturn (\n\t\t<Component { ...props } context={ context } className={ className } />\n\t);\n};\n\nexport default withFilters( 'editor.BlockEdit' )( Edit );\n"]}