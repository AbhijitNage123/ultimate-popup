"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConvertToGroupButton = ConvertToGroupButton;
Object.defineProperty(exports, "useConvertToGroupButtonProps", {
  enumerable: true,
  get: function () {
    return _useConvertToGroupButtonProps.default;
  }
});

var _element = require("@wordpress/element");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _blocks = require("@wordpress/blocks");

var _data = require("@wordpress/data");

var _store = require("../../store");

var _useConvertToGroupButtonProps = _interopRequireDefault(require("./use-convert-to-group-button-props"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ConvertToGroupButton({
  clientIds,
  isGroupable,
  isUngroupable,
  blocksSelection,
  groupingBlockName,
  onClose = () => {}
}) {
  const {
    replaceBlocks
  } = (0, _data.useDispatch)(_store.store);

  const onConvertToGroup = () => {
    // Activate the `transform` on the Grouping Block which does the conversion
    const newBlocks = (0, _blocks.switchToBlockType)(blocksSelection, groupingBlockName);

    if (newBlocks) {
      replaceBlocks(clientIds, newBlocks);
    }
  };

  const onConvertFromGroup = () => {
    const innerBlocks = blocksSelection[0].innerBlocks;

    if (!innerBlocks.length) {
      return;
    }

    replaceBlocks(clientIds, innerBlocks);
  };

  if (!isGroupable && !isUngroupable) {
    return null;
  }

  return (0, _element.createElement)(_element.Fragment, null, isGroupable && (0, _element.createElement)(_components.MenuItem, {
    onClick: () => {
      onConvertToGroup();
      onClose();
    }
  }, (0, _i18n._x)('Group', 'verb')), isUngroupable && (0, _element.createElement)(_components.MenuItem, {
    onClick: () => {
      onConvertFromGroup();
      onClose();
    }
  }, (0, _i18n._x)('Ungroup', 'Ungrouping blocks from within a Group block back into individual blocks within the Editor ')));
}
//# sourceMappingURL=index.js.map