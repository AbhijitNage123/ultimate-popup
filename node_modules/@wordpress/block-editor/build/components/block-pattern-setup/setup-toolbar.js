"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _icons = require("@wordpress/icons");

var _constants = require("./constants");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const Actions = ({
  onStartBlank,
  onBlockPatternSelect
}) => (0, _element.createElement)("div", {
  className: "block-editor-block-pattern-setup__actions"
}, (0, _element.createElement)(_components.Button, {
  onClick: onStartBlank
}, (0, _i18n.__)('Start blank')), (0, _element.createElement)(_components.Button, {
  variant: "primary",
  onClick: onBlockPatternSelect
}, (0, _i18n.__)('Choose')));

const CarouselNavigation = ({
  handlePrevious,
  handleNext,
  activeSlide,
  totalSlides
}) => (0, _element.createElement)("div", {
  className: "block-editor-block-pattern-setup__navigation"
}, (0, _element.createElement)(_components.Button, {
  icon: _icons.chevronLeft,
  label: (0, _i18n.__)('Previous pattern'),
  onClick: handlePrevious,
  disabled: activeSlide === 0
}), (0, _element.createElement)(_components.Button, {
  icon: _icons.chevronRight,
  label: (0, _i18n.__)('Next pattern'),
  onClick: handleNext,
  disabled: activeSlide === totalSlides - 1
}));

const SetupToolbar = ({
  viewMode,
  setViewMode,
  handlePrevious,
  handleNext,
  activeSlide,
  totalSlides,
  onBlockPatternSelect,
  onStartBlank
}) => {
  const isCarouselView = viewMode === _constants.VIEWMODES.carousel;
  const displayControls = (0, _element.createElement)("div", {
    className: "block-editor-block-pattern-setup__display-controls"
  }, (0, _element.createElement)(_components.Button, {
    icon: _icons.stretchFullWidth,
    label: (0, _i18n.__)('Carousel view'),
    onClick: () => setViewMode(_constants.VIEWMODES.carousel),
    isPressed: isCarouselView
  }), (0, _element.createElement)(_components.Button, {
    icon: _icons.grid,
    label: (0, _i18n.__)('Grid view'),
    onClick: () => setViewMode(_constants.VIEWMODES.grid),
    isPressed: viewMode === _constants.VIEWMODES.grid
  }));
  return (0, _element.createElement)("div", {
    className: "block-editor-block-pattern-setup__toolbar"
  }, isCarouselView && (0, _element.createElement)(CarouselNavigation, {
    handlePrevious: handlePrevious,
    handleNext: handleNext,
    activeSlide: activeSlide,
    totalSlides: totalSlides
  }), displayControls, isCarouselView && (0, _element.createElement)(Actions, {
    onBlockPatternSelect: onBlockPatternSelect,
    onStartBlank: onStartBlank
  }));
};

var _default = SetupToolbar;
exports.default = _default;
//# sourceMappingURL=setup-toolbar.js.map