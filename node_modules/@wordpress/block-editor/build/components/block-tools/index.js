"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockTools;

var _element = require("@wordpress/element");

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _components = require("@wordpress/components");

var _insertionPoint = _interopRequireDefault(require("./insertion-point"));

var _blockPopover = _interopRequireDefault(require("./block-popover"));

var _store = require("../../store");

var _blockContextualToolbar = _interopRequireDefault(require("./block-contextual-toolbar"));

var _usePopoverScroll = require("./use-popover-scroll");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Renders block tools (the block toolbar, select/navigation mode toolbar, the
 * insertion point and a slot for the inline rich text toolbar). Must be wrapped
 * around the block content and editor styles wrapper or iframe.
 *
 * @param {Object} $0                      Props.
 * @param {Object} $0.children             The block content and style container.
 * @param {Object} $0.__unstableContentRef Ref holding the content scroll container.
 */
function BlockTools({
  children,
  __unstableContentRef
}) {
  const isLargeViewport = (0, _compose.useViewportMatch)('medium');
  const hasFixedToolbar = (0, _data.useSelect)(select => select(_store.store).getSettings().hasFixedToolbar, []);
  return (0, _element.createElement)(_insertionPoint.default, {
    __unstableContentRef: __unstableContentRef
  }, (hasFixedToolbar || !isLargeViewport) && (0, _element.createElement)(_blockContextualToolbar.default, {
    isFixed: true
  }), (0, _element.createElement)(_blockPopover.default, {
    __unstableContentRef: __unstableContentRef
  }), (0, _element.createElement)(_components.Popover.Slot, {
    name: "block-toolbar",
    ref: (0, _usePopoverScroll.usePopoverScroll)(__unstableContentRef)
  }), children);
}
//# sourceMappingURL=index.js.map