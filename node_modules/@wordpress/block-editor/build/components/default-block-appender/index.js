"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultBlockAppender = DefaultBlockAppender;
exports.default = exports.ZWNBSP = void 0;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _compose = require("@wordpress/compose");

var _blocks = require("@wordpress/blocks");

var _htmlEntities = require("@wordpress/html-entities");

var _data = require("@wordpress/data");

var _inserter = _interopRequireDefault(require("../inserter"));

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Zero width non-breaking space, used as padding for the paragraph when it is
 * empty.
 */
const ZWNBSP = '\ufeff';
exports.ZWNBSP = ZWNBSP;

function DefaultBlockAppender({
  isLocked,
  isVisible,
  onAppend,
  showPrompt,
  placeholder,
  rootClientId
}) {
  if (isLocked || !isVisible) {
    return null;
  }

  const value = (0, _htmlEntities.decodeEntities)(placeholder) || (0, _i18n.__)('Type / to choose a block');
  return (0, _element.createElement)("div", {
    "data-root-client-id": rootClientId || '',
    className: "block-editor-default-block-appender"
  }, (0, _element.createElement)("p", {
    tabIndex: "0" // Only necessary for `useCanvasClickRedirect` to consider it
    // as a target. Ideally it should consider any tabbable target,
    // but the inserter is rendered in place while it should be
    // rendered in a popover, just like it does for an empty
    // paragraph block.
    ,
    contentEditable: true,
    suppressContentEditableWarning: true // We want this element to be styled as a paragraph by themes.
    // eslint-disable-next-line jsx-a11y/no-noninteractive-element-to-interactive-role
    ,
    role: "button",
    "aria-label": (0, _i18n.__)('Add block') // The wp-block className is important for editor styles.
    ,
    className: "wp-block block-editor-default-block-appender__content",
    onFocus: onAppend
  }, showPrompt ? value : ZWNBSP), (0, _element.createElement)(_inserter.default, {
    rootClientId: rootClientId,
    position: "bottom right",
    isAppender: true,
    __experimentalIsQuick: true
  }));
}

var _default = (0, _compose.compose)((0, _data.withSelect)((select, ownProps) => {
  const {
    getBlockCount,
    getBlockName,
    isBlockValid,
    getSettings,
    getTemplateLock
  } = select(_store.store);
  const isEmpty = !getBlockCount(ownProps.rootClientId);
  const isLastBlockDefault = getBlockName(ownProps.lastBlockClientId) === (0, _blocks.getDefaultBlockName)();
  const isLastBlockValid = isBlockValid(ownProps.lastBlockClientId);
  const {
    bodyPlaceholder
  } = getSettings();
  return {
    isVisible: isEmpty || !isLastBlockDefault || !isLastBlockValid,
    showPrompt: isEmpty,
    isLocked: !!getTemplateLock(ownProps.rootClientId),
    placeholder: bodyPlaceholder
  };
}), (0, _data.withDispatch)((dispatch, ownProps) => {
  const {
    insertDefaultBlock,
    startTyping
  } = dispatch(_store.store);
  return {
    onAppend() {
      const {
        rootClientId
      } = ownProps;
      insertDefaultBlock(undefined, rootClientId);
      startTyping();
    }

  };
}))(DefaultBlockAppender);

exports.default = _default;
//# sourceMappingURL=index.js.map