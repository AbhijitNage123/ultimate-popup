{"version":3,"sources":["@wordpress/block-editor/src/components/provider/use-block-sync.js"],"names":["useBlockSync","clientId","value","controlledBlocks","selection","controlledSelection","onChange","noop","onInput","registry","resetBlocks","resetSelection","replaceInnerBlocks","setHasControlledInnerBlocks","__unstableMarkNextChangeAsNotPersistent","dispatch","blockEditorStore","getBlockName","getBlocks","select","pendingChanges","incoming","outgoing","subscribed","setControlledBlocks","storeBlocks","map","block","current","onInputRef","onChangeRef","includes","selectionStart","selectionEnd","initialPosition","getSelectionStart","getSelectionEnd","getSelectedBlocksInitialCaretPosition","isLastBlockChangePersistent","__unstableIsLastBlockChangeIgnored","blocks","isPersistent","previousAreBlocksDifferent","unsubscribe","subscribe","newIsPersistent","newBlocks","areBlocksDifferent","didPersistenceChange","push","updateParent"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { last, noop } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useEffect, useRef } from '@wordpress/element';\nimport { useRegistry } from '@wordpress/data';\nimport { cloneBlock } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\n\n/**\n * A function to call when the block value has been updated in the block-editor\n * store.\n *\n * @callback onBlockUpdate\n * @param {Object[]} blocks  The updated blocks.\n * @param {Object}   options The updated block options, such as selectionStart\n *                           and selectionEnd.\n */\n\n/**\n * useBlockSync is a side effect which handles bidirectional sync between the\n * block-editor store and a controlling data source which provides blocks. This\n * is most commonly used by the BlockEditorProvider to synchronize the contents\n * of the block-editor store with the root entity, like a post.\n *\n * Another example would be the template part block, which provides blocks from\n * a separate entity data source than a root entity. This hook syncs edits to\n * the template part in the block editor back to the entity and vice-versa.\n *\n * Here are some of its basic functions:\n * - Initalizes the block-editor store for the given clientID to the blocks\n *   given via props.\n * - Adds incoming changes (like undo) to the block-editor store.\n * - Adds outgoing changes (like editing content) to the controlling entity,\n *   determining if a change should be considered persistent or not.\n * - Handles edge cases and race conditions which occur in those operations.\n * - Ignores changes which happen to other entities (like nested inner block\n *   controllers.\n * - Passes selection state from the block-editor store to the controlling entity.\n *\n * @param {Object}        props           Props for the block sync hook\n * @param {string}        props.clientId  The client ID of the inner block controller.\n *                                        If none is passed, then it is assumed to be a\n *                                        root controller rather than an inner block\n *                                        controller.\n * @param {Object[]}      props.value     The control value for the blocks. This value\n *                                        is used to initalize the block-editor store\n *                                        and for resetting the blocks to incoming\n *                                        changes like undo.\n * @param {Object}        props.selection The selection state responsible to restore the selection on undo/redo.\n * @param {onBlockUpdate} props.onChange  Function to call when a persistent\n *                                        change has been made in the block-editor blocks\n *                                        for the given clientId. For example, after\n *                                        this function is called, an entity is marked\n *                                        dirty because it has changes to save.\n * @param {onBlockUpdate} props.onInput   Function to call when a non-persistent\n *                                        change has been made in the block-editor blocks\n *                                        for the given clientId. When this is called,\n *                                        controlling sources do not become dirty.\n */\nexport default function useBlockSync( {\n\tclientId = null,\n\tvalue: controlledBlocks,\n\tselection: controlledSelection,\n\tonChange = noop,\n\tonInput = noop,\n} ) {\n\tconst registry = useRegistry();\n\n\tconst {\n\t\tresetBlocks,\n\t\tresetSelection,\n\t\treplaceInnerBlocks,\n\t\tsetHasControlledInnerBlocks,\n\t\t__unstableMarkNextChangeAsNotPersistent,\n\t} = registry.dispatch( blockEditorStore );\n\tconst { getBlockName, getBlocks } = registry.select( blockEditorStore );\n\n\tconst pendingChanges = useRef( { incoming: null, outgoing: [] } );\n\tconst subscribed = useRef( false );\n\n\tconst setControlledBlocks = () => {\n\t\tif ( ! controlledBlocks ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// We don't need to persist this change because we only replace\n\t\t// controlled inner blocks when the change was caused by an entity,\n\t\t// and so it would already be persisted.\n\t\t__unstableMarkNextChangeAsNotPersistent();\n\t\tif ( clientId ) {\n\t\t\tsetHasControlledInnerBlocks( clientId, true );\n\t\t\t__unstableMarkNextChangeAsNotPersistent();\n\t\t\tconst storeBlocks = controlledBlocks.map( ( block ) =>\n\t\t\t\tcloneBlock( block )\n\t\t\t);\n\t\t\tif ( subscribed.current ) {\n\t\t\t\tpendingChanges.current.incoming = storeBlocks;\n\t\t\t}\n\t\t\treplaceInnerBlocks( clientId, storeBlocks );\n\t\t} else {\n\t\t\tif ( subscribed.current ) {\n\t\t\t\tpendingChanges.current.incoming = controlledBlocks;\n\t\t\t}\n\t\t\tresetBlocks( controlledBlocks );\n\t\t}\n\t};\n\n\t// Add a subscription to the block-editor registry to detect when changes\n\t// have been made. This lets us inform the data source of changes. This\n\t// is an effect so that the subscriber can run synchronously without\n\t// waiting for React renders for changes.\n\tconst onInputRef = useRef( onInput );\n\tconst onChangeRef = useRef( onChange );\n\tuseEffect( () => {\n\t\tonInputRef.current = onInput;\n\t\tonChangeRef.current = onChange;\n\t}, [ onInput, onChange ] );\n\n\t// Determine if blocks need to be reset when they change.\n\tuseEffect( () => {\n\t\tif ( pendingChanges.current.outgoing.includes( controlledBlocks ) ) {\n\t\t\t// Skip block reset if the value matches expected outbound sync\n\t\t\t// triggered by this component by a preceding change detection.\n\t\t\t// Only skip if the value matches expectation, since a reset should\n\t\t\t// still occur if the value is modified (not equal by reference),\n\t\t\t// to allow that the consumer may apply modifications to reflect\n\t\t\t// back on the editor.\n\t\t\tif (\n\t\t\t\tlast( pendingChanges.current.outgoing ) === controlledBlocks\n\t\t\t) {\n\t\t\t\tpendingChanges.current.outgoing = [];\n\t\t\t}\n\t\t} else if ( getBlocks( clientId ) !== controlledBlocks ) {\n\t\t\t// Reset changing value in all other cases than the sync described\n\t\t\t// above. Since this can be reached in an update following an out-\n\t\t\t// bound sync, unset the outbound value to avoid considering it in\n\t\t\t// subsequent renders.\n\t\t\tpendingChanges.current.outgoing = [];\n\t\t\tsetControlledBlocks();\n\n\t\t\tif ( controlledSelection ) {\n\t\t\t\tresetSelection(\n\t\t\t\t\tcontrolledSelection.selectionStart,\n\t\t\t\t\tcontrolledSelection.selectionEnd,\n\t\t\t\t\tcontrolledSelection.initialPosition\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}, [ controlledBlocks, clientId ] );\n\n\tuseEffect( () => {\n\t\tconst {\n\t\t\tgetSelectionStart,\n\t\t\tgetSelectionEnd,\n\t\t\tgetSelectedBlocksInitialCaretPosition,\n\t\t\tisLastBlockChangePersistent,\n\t\t\t__unstableIsLastBlockChangeIgnored,\n\t\t} = registry.select( blockEditorStore );\n\n\t\tlet blocks = getBlocks( clientId );\n\t\tlet isPersistent = isLastBlockChangePersistent();\n\t\tlet previousAreBlocksDifferent = false;\n\n\t\tsubscribed.current = true;\n\t\tconst unsubscribe = registry.subscribe( () => {\n\t\t\t// Sometimes, when changing block lists, lingering subscriptions\n\t\t\t// might trigger before they are cleaned up. If the block for which\n\t\t\t// the subscription runs is no longer in the store, this would clear\n\t\t\t// its parent entity's block list. To avoid this, we bail out if\n\t\t\t// the subscription is triggering for a block (`clientId !== null`)\n\t\t\t// and its block name can't be found because it's not on the list.\n\t\t\t// (`getBlockName( clientId ) === null`).\n\t\t\tif ( clientId !== null && getBlockName( clientId ) === null )\n\t\t\t\treturn;\n\n\t\t\tconst newIsPersistent = isLastBlockChangePersistent();\n\n\t\t\tconst newBlocks = getBlocks( clientId );\n\t\t\tconst areBlocksDifferent = newBlocks !== blocks;\n\t\t\tblocks = newBlocks;\n\n\t\t\tif (\n\t\t\t\tareBlocksDifferent &&\n\t\t\t\t( pendingChanges.current.incoming ||\n\t\t\t\t\t__unstableIsLastBlockChangeIgnored() )\n\t\t\t) {\n\t\t\t\tpendingChanges.current.incoming = null;\n\t\t\t\tisPersistent = newIsPersistent;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Since we often dispatch an action to mark the previous action as\n\t\t\t// persistent, we need to make sure that the blocks changed on the\n\t\t\t// previous action before committing the change.\n\t\t\tconst didPersistenceChange =\n\t\t\t\tpreviousAreBlocksDifferent &&\n\t\t\t\t! areBlocksDifferent &&\n\t\t\t\tnewIsPersistent &&\n\t\t\t\t! isPersistent;\n\n\t\t\tif ( areBlocksDifferent || didPersistenceChange ) {\n\t\t\t\tisPersistent = newIsPersistent;\n\t\t\t\t// We know that onChange/onInput will update controlledBlocks.\n\t\t\t\t// We need to be aware that it was caused by an outgoing change\n\t\t\t\t// so that we do not treat it as an incoming change later on,\n\t\t\t\t// which would cause a block reset.\n\t\t\t\tpendingChanges.current.outgoing.push( blocks );\n\n\t\t\t\t// Inform the controlling entity that changes have been made to\n\t\t\t\t// the block-editor store they should be aware about.\n\t\t\t\tconst updateParent = isPersistent\n\t\t\t\t\t? onChangeRef.current\n\t\t\t\t\t: onInputRef.current;\n\t\t\t\tupdateParent( blocks, {\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tselectionStart: getSelectionStart(),\n\t\t\t\t\t\tselectionEnd: getSelectionEnd(),\n\t\t\t\t\t\tinitialPosition: getSelectedBlocksInitialCaretPosition(),\n\t\t\t\t\t},\n\t\t\t\t} );\n\t\t\t}\n\t\t\tpreviousAreBlocksDifferent = areBlocksDifferent;\n\t\t} );\n\n\t\treturn () => unsubscribe();\n\t}, [ registry, clientId ] );\n}\n"]}