{"version":3,"sources":["@wordpress/block-editor/src/components/block-switcher/use-transformed-patterns.js"],"names":["transformMatchingBlock","match","selectedBlock","retainedBlockAttributes","name","attributes","getPatternTransformedBlocks","selectedBlocks","patternBlocks","_patternBlocks","map","block","consumedBlocks","Set","isMatch","patternBlock","add","clientId","useTransformedPatterns","patterns","reduce","accumulator","_pattern","transformedBlocks","blocks","push"],"mappings":";;;;;;;AAGA;;AACA;;AAKA;;AATA;AACA;AACA;;AAIA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,sBAAsB,GAAG,CAAEC,KAAF,EAASC,aAAT,KAA4B;AACjE;AACA,QAAMC,uBAAuB,GAAG,uCAC/BD,aAAa,CAACE,IADiB,EAE/BF,aAAa,CAACG,UAFiB,CAAhC;AAIAJ,EAAAA,KAAK,CAACI,UAAN,GAAmB,EAClB,GAAGJ,KAAK,CAACI,UADS;AAElB,OAAGF;AAFe,GAAnB;AAIA,CAVM;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACO,MAAMG,2BAA2B,GAAG,CAC1CC,cAD0C,EAE1CC,aAF0C,KAGtC;AACJ;AACA,QAAMC,cAAc,GAAGD,aAAa,CAACE,GAAd,CAAqBC,KAAF,IACzC,wBAAYA,KAAZ,CADsB,CAAvB;AAGA;AACD;AACA;AACA;AACA;AACA;;;AACC,QAAMC,cAAc,GAAG,IAAIC,GAAJ,EAAvB;;AACA,OAAM,MAAMX,aAAZ,IAA6BK,cAA7B,EAA8C;AAC7C,QAAIO,OAAO,GAAG,KAAd;;AACA,SAAM,MAAMC,YAAZ,IAA4BN,cAA5B,EAA6C;AAC5C,YAAMR,KAAK,GAAG,mCACbc,YADa,EAEbb,aAAa,CAACE,IAFD,EAGbQ,cAHa,CAAd;AAKA,UAAK,CAAEX,KAAP,EAAe;AACfa,MAAAA,OAAO,GAAG,IAAV;AACAF,MAAAA,cAAc,CAACI,GAAf,CAAoBf,KAAK,CAACgB,QAA1B,EAR4C,CAS5C;;AACAjB,MAAAA,sBAAsB,CAAEC,KAAF,EAASC,aAAT,CAAtB,CAV4C,CAW5C;;AACA;AACA,KAf4C,CAgB7C;;;AACA,QAAK,CAAEY,OAAP,EAAiB;AACjB;;AACD,SAAOL,cAAP;AACA,CAnCM;AAqCP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA,MAAMS,sBAAsB,GAAG,CAAEC,QAAF,EAAYZ,cAAZ,KAAgC;AAC9D,SAAO,sBACN,MACCY,QAAQ,CAACC,MAAT,CAAiB,CAAEC,WAAF,EAAeC,QAAf,KAA6B;AAC7C,UAAMC,iBAAiB,GAAGjB,2BAA2B,CACpDC,cADoD,EAEpDe,QAAQ,CAACE,MAF2C,CAArD;;AAIA,QAAKD,iBAAL,EAAyB;AACxBF,MAAAA,WAAW,CAACI,IAAZ,CAAkB,EACjB,GAAGH,QADc;AAEjBC,QAAAA;AAFiB,OAAlB;AAIA;;AACD,WAAOF,WAAP;AACA,GAZD,EAYG,EAZH,CAFK,EAeN,CAAEF,QAAF,EAAYZ,cAAZ,CAfM,CAAP;AAiBA,CAlBD;;eAoBeW,sB","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useMemo } from '@wordpress/element';\nimport { cloneBlock } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport { getMatchingBlockByName, getRetainedBlockAttributes } from './utils';\n\n/**\n * Mutate the matched block's attributes by getting\n * which block type's attributes to retain and prioritize\n * them in the merging of the attributes.\n *\n * @param {WPBlock} match         The matched block.\n * @param {WPBlock} selectedBlock The selected block.\n * @return {void}\n */\nexport const transformMatchingBlock = ( match, selectedBlock ) => {\n\t// Get the block attributes to retain through the transformation.\n\tconst retainedBlockAttributes = getRetainedBlockAttributes(\n\t\tselectedBlock.name,\n\t\tselectedBlock.attributes\n\t);\n\tmatch.attributes = {\n\t\t...match.attributes,\n\t\t...retainedBlockAttributes,\n\t};\n};\n\n/**\n * By providing the selected blocks and pattern's blocks\n * find the matching blocks, transform them and return them.\n * If not all selected blocks are matched, return nothing.\n *\n * @param {WPBlock[]} selectedBlocks The selected blocks.\n * @param {WPBlock[]} patternBlocks  The pattern's blocks.\n * @return {WPBlock[]|void} The transformed pattern's blocks or undefined if not all selected blocks have been matched.\n */\nexport const getPatternTransformedBlocks = (\n\tselectedBlocks,\n\tpatternBlocks\n) => {\n\t// Clone Pattern's blocks to produce new clientIds and be able to mutate the matches.\n\tconst _patternBlocks = patternBlocks.map( ( block ) =>\n\t\tcloneBlock( block )\n\t);\n\t/**\n\t * Keep track of the consumed pattern blocks.\n\t * This is needed because we loop the selected blocks\n\t * and for example we may have selected two paragraphs and\n\t * the pattern's blocks could have more `paragraphs`.\n\t */\n\tconst consumedBlocks = new Set();\n\tfor ( const selectedBlock of selectedBlocks ) {\n\t\tlet isMatch = false;\n\t\tfor ( const patternBlock of _patternBlocks ) {\n\t\t\tconst match = getMatchingBlockByName(\n\t\t\t\tpatternBlock,\n\t\t\t\tselectedBlock.name,\n\t\t\t\tconsumedBlocks\n\t\t\t);\n\t\t\tif ( ! match ) continue;\n\t\t\tisMatch = true;\n\t\t\tconsumedBlocks.add( match.clientId );\n\t\t\t// We update (mutate) the matching pattern block.\n\t\t\ttransformMatchingBlock( match, selectedBlock );\n\t\t\t// No need to loop through other pattern's blocks.\n\t\t\tbreak;\n\t\t}\n\t\t// Bail eary if a selected block has not been matched.\n\t\tif ( ! isMatch ) return;\n\t}\n\treturn _patternBlocks;\n};\n\n/**\n * @typedef {WPBlockPattern & {transformedBlocks: WPBlock[]}} TransformedBlockPattern\n */\n\n/**\n * Custom hook that accepts patterns from state and the selected\n * blocks and tries to match these with the pattern's blocks.\n * If all selected blocks are matched with a Pattern's block,\n * we transform them by retaining block's attributes with `role:content`.\n * The transformed pattern's blocks are set to a new pattern\n * property `transformedBlocks`.\n *\n * @param {WPBlockPattern[]} patterns       Patterns from state.\n * @param {WPBlock[]}        selectedBlocks The currently selected blocks.\n * @return {TransformedBlockPattern[]} Returns the eligible matched patterns with all the selected blocks.\n */\n// TODO tests\nconst useTransformedPatterns = ( patterns, selectedBlocks ) => {\n\treturn useMemo(\n\t\t() =>\n\t\t\tpatterns.reduce( ( accumulator, _pattern ) => {\n\t\t\t\tconst transformedBlocks = getPatternTransformedBlocks(\n\t\t\t\t\tselectedBlocks,\n\t\t\t\t\t_pattern.blocks\n\t\t\t\t);\n\t\t\t\tif ( transformedBlocks ) {\n\t\t\t\t\taccumulator.push( {\n\t\t\t\t\t\t..._pattern,\n\t\t\t\t\t\ttransformedBlocks,\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\treturn accumulator;\n\t\t\t}, [] ),\n\t\t[ patterns, selectedBlocks ]\n\t);\n};\n\nexport default useTransformedPatterns;\n"]}