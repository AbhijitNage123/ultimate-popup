"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _reactNative = require("react-native");

var _style = _interopRequireDefault(require("./style.scss"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
class PlainText extends _element.Component {
  constructor() {
    super(...arguments);
    this.isAndroid = _reactNative.Platform.OS === 'android';
  }

  componentDidMount() {
    // if isSelected is true, we should request the focus on this TextInput
    if (this._input && this._input.isFocused() === false && this.props.isSelected) {
      if (this.isAndroid) {
        /*
         * There seems to be an issue in React Native where the keyboard doesn't show if called shortly after rendering.
         * As a common work around this delay is used.
         * https://github.com/facebook/react-native/issues/19366#issuecomment-400603928
         */
        this.timeoutID = setTimeout(() => {
          this._input.focus();
        }, 100);
      } else {
        this._input.focus();
      }
    }
  }

  componentDidUpdate(prevProps) {
    if (!this.props.isSelected && prevProps.isSelected) {
      this._input.blur();
    }
  }

  componentWillUnmount() {
    if (this.isAndroid) {
      clearTimeout(this.timeoutID);
    }
  }

  focus() {
    this._input.focus();
  }

  blur() {
    this._input.blur();
  }

  render() {
    return (0, _element.createElement)(_reactNative.TextInput, (0, _extends2.default)({}, this.props, {
      ref: x => this._input = x,
      onChange: event => {
        this.props.onChange(event.nativeEvent.text);
      },
      onFocus: this.props.onFocus // always assign onFocus as a props
      ,
      onBlur: this.props.onBlur // always assign onBlur as a props
      ,
      fontFamily: this.props.style && this.props.style.fontFamily || _style.default['block-editor-plain-text'].fontFamily,
      style: this.props.style || _style.default['block-editor-plain-text'],
      scrollEnabled: false
    }));
  }

}

exports.default = PlainText;
//# sourceMappingURL=index.native.js.map