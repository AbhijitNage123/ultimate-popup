"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addActiveFormats = addActiveFormats;
exports.getMultilineTag = getMultilineTag;
exports.getAllowedFormats = getAllowedFormats;
exports.isShortcode = void 0;

var _shortcode = require("@wordpress/shortcode");

var _deprecated = _interopRequireDefault(require("@wordpress/deprecated"));

/**
 * WordPress dependencies
 */
function addActiveFormats(value, activeFormats) {
  if (activeFormats !== null && activeFormats !== void 0 && activeFormats.length) {
    let index = value.formats.length;

    while (index--) {
      value.formats[index] = [...activeFormats, ...(value.formats[index] || [])];
    }
  }
}
/**
 * Get the multiline tag based on the multiline prop.
 *
 * @param {?(string|boolean)} multiline The multiline prop.
 *
 * @return {?string} The multiline tag.
 */


function getMultilineTag(multiline) {
  if (multiline !== true && multiline !== 'p' && multiline !== 'li') {
    return;
  }

  return multiline === true ? 'p' : multiline;
}

function getAllowedFormats({
  allowedFormats,
  formattingControls,
  disableFormats
}) {
  if (disableFormats) {
    return getAllowedFormats.EMPTY_ARRAY;
  }

  if (!allowedFormats && !formattingControls) {
    return;
  }

  if (allowedFormats) {
    return allowedFormats;
  }

  (0, _deprecated.default)('wp.blockEditor.RichText formattingControls prop', {
    since: '5.4',
    alternative: 'allowedFormats'
  });
  return formattingControls.map(name => `core/${name}`);
}

getAllowedFormats.EMPTY_ARRAY = [];

const isShortcode = text => (0, _shortcode.regexp)('.*').test(text);

exports.isShortcode = isShortcode;
//# sourceMappingURL=utils.js.map