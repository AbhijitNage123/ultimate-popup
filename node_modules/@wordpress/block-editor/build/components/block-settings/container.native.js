"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.blockSettingsScreens = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _compose = require("@wordpress/compose");

var _data = require("@wordpress/data");

var _containerNative = _interopRequireDefault(require("./container.native.scss"));

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const blockSettingsScreens = {
  settings: 'Settings',
  color: 'Color',
  focalPoint: 'FocalPoint',
  linkPicker: 'linkPicker'
};
exports.blockSettingsScreens = blockSettingsScreens;

function BottomSheetSettings({
  editorSidebarOpened,
  closeGeneralSidebar,
  settings,
  ...props
}) {
  const colorSettings = {
    colors: (0, _blockEditor.useSetting)('color.palette') || settings.colors,
    gradients: (0, _blockEditor.useSetting)('color.gradients') || settings.gradients
  };
  return (0, _element.createElement)(_components.BottomSheet, (0, _extends2.default)({
    isVisible: editorSidebarOpened,
    onClose: closeGeneralSidebar,
    hideHeader: true,
    contentStyle: _containerNative.default.content,
    hasNavigation: true
  }, props), (0, _element.createElement)(_components.BottomSheet.NavigationContainer, {
    animate: true,
    main: true
  }, (0, _element.createElement)(_components.BottomSheet.NavigationScreen, {
    name: blockSettingsScreens.settings
  }, (0, _element.createElement)(_blockEditor.InspectorControls.Slot, null)), (0, _element.createElement)(_components.BottomSheet.NavigationScreen, {
    name: _components.BottomSheet.SubSheet.screenName
  }, (0, _element.createElement)(_components.BottomSheet.SubSheet.Slot, null)), (0, _element.createElement)(_components.BottomSheet.NavigationScreen, {
    name: blockSettingsScreens.color
  }, (0, _element.createElement)(_components.ColorSettings, {
    defaultSettings: colorSettings
  })), (0, _element.createElement)(_components.BottomSheet.NavigationScreen, {
    name: blockSettingsScreens.focalPoint,
    fullScreen: true
  }, (0, _element.createElement)(_components.FocalPointSettingsPanel, null)), (0, _element.createElement)(_components.BottomSheet.NavigationScreen, {
    name: blockSettingsScreens.linkPicker,
    fullScreen: true,
    isScrollable: true
  }, (0, _element.createElement)(_components.LinkPickerScreen, {
    returnScreenName: blockSettingsScreens.settings
  }))));
}

var _default = (0, _compose.compose)([(0, _data.withSelect)(select => {
  const {
    isEditorSidebarOpened
  } = select('core/edit-post');
  const {
    getSettings
  } = select(_store.store);
  return {
    settings: getSettings(),
    editorSidebarOpened: isEditorSidebarOpened()
  };
}), (0, _data.withDispatch)(dispatch => {
  const {
    closeGeneralSidebar
  } = dispatch('core/edit-post');
  return {
    closeGeneralSidebar
  };
})])(BottomSheetSettings);

exports.default = _default;
//# sourceMappingURL=container.native.js.map