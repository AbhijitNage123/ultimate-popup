"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockTypesList;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _reactNative = require("react-native");

var _components = require("@wordpress/components");

var _style = _interopRequireDefault(require("./style.scss"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const MIN_COL_NUM = 3;

function BlockTypesList({
  name,
  items,
  onSelect,
  listProps
}) {
  const [numberOfColumns, setNumberOfColumns] = (0, _element.useState)(MIN_COL_NUM);
  const [itemWidth, setItemWidth] = (0, _element.useState)();
  const [maxWidth, setMaxWidth] = (0, _element.useState)();
  (0, _element.useEffect)(() => {
    _reactNative.Dimensions.addEventListener('change', onLayout);

    onLayout();
    return () => {
      _reactNative.Dimensions.removeEventListener('change', onLayout);
    };
  }, []);

  function calculateItemWidth() {
    const {
      paddingLeft: itemPaddingLeft,
      paddingRight: itemPaddingRight
    } = _components.InserterButton.Styles.modalItem;
    const {
      width
    } = _components.InserterButton.Styles.modalIconWrapper;
    return width + itemPaddingLeft + itemPaddingRight;
  }

  function onLayout() {
    const columnStyle = _style.default['block-types-list__column'];
    const sumLeftRightPadding = columnStyle.paddingLeft + columnStyle.paddingRight;

    const bottomSheetWidth = _components.BottomSheet.getWidth();

    const containerTotalWidth = bottomSheetWidth - sumLeftRightPadding;
    const itemTotalWidth = calculateItemWidth();
    const columnsFitToWidth = Math.floor(containerTotalWidth / itemTotalWidth);
    const numColumns = Math.max(MIN_COL_NUM, columnsFitToWidth);
    setNumberOfColumns(numColumns);
    setMaxWidth(containerTotalWidth / numColumns);

    if (columnsFitToWidth < MIN_COL_NUM) {
      const updatedItemWidth = (bottomSheetWidth - 2 * sumLeftRightPadding) / MIN_COL_NUM;
      setItemWidth(updatedItemWidth);
    }
  }

  const contentContainerStyle = _reactNative.StyleSheet.flatten(listProps.contentContainerStyle);

  return (0, _element.createElement)(_reactNative.FlatList, (0, _extends2.default)({
    onLayout: onLayout,
    key: `InserterUI-${name}-${numberOfColumns}` //re-render when numberOfColumns changes
    ,
    testID: `InserterUI-${name}`,
    keyboardShouldPersistTaps: "always",
    numColumns: numberOfColumns,
    data: items,
    initialNumToRender: 3,
    ItemSeparatorComponent: () => (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
      accessible: false
    }, (0, _element.createElement)(_reactNative.View, {
      style: _style.default['block-types-list__row-separator']
    })),
    keyExtractor: item => item.id,
    renderItem: ({
      item
    }) => (0, _element.createElement)(_components.InserterButton, {
      item,
      itemWidth,
      maxWidth,
      onSelect
    })
  }, listProps, {
    contentContainerStyle: { ...contentContainerStyle,
      paddingBottom: Math.max(listProps.safeAreaBottomInset, contentContainerStyle.paddingBottom)
    }
  }));
}
//# sourceMappingURL=index.native.js.map