"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _blocks = require("@wordpress/blocks");

var _i18n = require("@wordpress/i18n");

var _blockCard = _interopRequireDefault(require("../block-card"));

var _blockPreview = _interopRequireDefault(require("../block-preview"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function InserterPreviewPanel({
  item
}) {
  var _hoveredItemBlockType, _hoveredItemBlockType2;

  const {
    name,
    title,
    icon,
    description,
    initialAttributes
  } = item;
  const hoveredItemBlockType = (0, _blocks.getBlockType)(name);
  const isReusable = (0, _blocks.isReusableBlock)(item);
  return (0, _element.createElement)("div", {
    className: "block-editor-inserter__preview-container"
  }, (0, _element.createElement)("div", {
    className: "block-editor-inserter__preview"
  }, isReusable || hoveredItemBlockType.example ? (0, _element.createElement)("div", {
    className: "block-editor-inserter__preview-content"
  }, (0, _element.createElement)(_blockPreview.default, {
    __experimentalPadding: 16,
    viewportWidth: (_hoveredItemBlockType = (_hoveredItemBlockType2 = hoveredItemBlockType.example) === null || _hoveredItemBlockType2 === void 0 ? void 0 : _hoveredItemBlockType2.viewportWidth) !== null && _hoveredItemBlockType !== void 0 ? _hoveredItemBlockType : 500,
    blocks: hoveredItemBlockType.example ? (0, _blocks.getBlockFromExample)(item.name, {
      attributes: { ...hoveredItemBlockType.example.attributes,
        ...initialAttributes
      },
      innerBlocks: hoveredItemBlockType.example.innerBlocks
    }) : (0, _blocks.createBlock)(name, initialAttributes)
  })) : (0, _element.createElement)("div", {
    className: "block-editor-inserter__preview-content-missing"
  }, (0, _i18n.__)('No Preview Available.'))), !isReusable && (0, _element.createElement)(_blockCard.default, {
    title: title,
    icon: icon,
    description: description
  }));
}

var _default = InserterPreviewPanel;
exports.default = _default;
//# sourceMappingURL=preview-panel.js.map