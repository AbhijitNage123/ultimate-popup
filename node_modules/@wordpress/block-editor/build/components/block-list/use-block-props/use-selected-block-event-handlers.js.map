{"version":3,"sources":["@wordpress/block-editor/src/components/block-list/use-block-props/use-selected-block-event-handlers.js"],"names":["useEventHandlers","clientId","isSelected","select","blockEditorStore","isBlockSelected","getBlockRootClientId","getBlockIndex","insertDefaultBlock","removeBlock","node","onKeyDown","event","keyCode","target","ENTER","BACKSPACE","DELETE","preventDefault","onDragStart","addEventListener","removeEventListener"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;AACA;;AAKA;;AAXA;AACA;AACA;;AAMA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,gBAAT,CAA2BC,QAA3B,EAAsC;AAC5C,QAAMC,UAAU,GAAG,qBAChBC,MAAF,IAAcA,MAAM,CAAEC,YAAF,CAAN,CAA2BC,eAA3B,CAA4CJ,QAA5C,CADI,EAElB,CAAEA,QAAF,CAFkB,CAAnB;AAIA,QAAM;AAAEK,IAAAA,oBAAF;AAAwBC,IAAAA;AAAxB,MAA0C,qBAC/CH,YAD+C,CAAhD;AAGA,QAAM;AAAEI,IAAAA,kBAAF;AAAsBC,IAAAA;AAAtB,MAAsC,uBAAaL,YAAb,CAA5C;AAEA,SAAO,2BACJM,IAAF,IAAY;AACX,QAAK,CAAER,UAAP,EAAoB;AACnB;AACA;AAED;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACG,aAASS,SAAT,CAAoBC,KAApB,EAA4B;AAC3B,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAsBF,KAA5B;;AAEA,UACCC,OAAO,KAAKE,eAAZ,IACAF,OAAO,KAAKG,mBADZ,IAEAH,OAAO,KAAKI,gBAHb,EAIE;AACD;AACA;;AAED,UAAKH,MAAM,KAAKJ,IAAX,IAAmB,sBAAaI,MAAb,CAAxB,EAAgD;AAC/C;AACA;;AAEDF,MAAAA,KAAK,CAACM,cAAN;;AAEA,UAAKL,OAAO,KAAKE,eAAjB,EAAyB;AACxBP,QAAAA,kBAAkB,CACjB,EADiB,EAEjBF,oBAAoB,CAAEL,QAAF,CAFH,EAGjBM,aAAa,CAAEN,QAAF,CAAb,GAA4B,CAHX,CAAlB;AAKA,OAND,MAMO;AACNQ,QAAAA,WAAW,CAAER,QAAF,CAAX;AACA;AACD;AAED;AACH;AACA;AACA;AACA;AACA;;;AACG,aAASkB,WAAT,CAAsBP,KAAtB,EAA8B;AAC7BA,MAAAA,KAAK,CAACM,cAAN;AACA;;AAEDR,IAAAA,IAAI,CAACU,gBAAL,CAAuB,SAAvB,EAAkCT,SAAlC;AACAD,IAAAA,IAAI,CAACU,gBAAL,CAAuB,WAAvB,EAAoCD,WAApC;AAEA,WAAO,MAAM;AACZT,MAAAA,IAAI,CAACW,mBAAL,CAA0B,SAA1B,EAAqCV,SAArC;AACAD,MAAAA,IAAI,CAACW,mBAAL,CAA0B,WAA1B,EAAuCF,WAAvC;AACA,KAHD;AAIA,GA5DK,EA6DN,CACClB,QADD,EAECC,UAFD,EAGCI,oBAHD,EAICC,aAJD,EAKCC,kBALD,EAMCC,WAND,CA7DM,CAAP;AAsEA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { isTextField } from '@wordpress/dom';\nimport { ENTER, BACKSPACE, DELETE } from '@wordpress/keycodes';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { useRefEffect } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../../store';\n\n/**\n * Adds block behaviour:\n *   - Removes the block on BACKSPACE.\n *   - Inserts a default block on ENTER.\n *   - Disables dragging of block contents.\n *\n * @param {string} clientId Block client ID.\n */\nexport function useEventHandlers( clientId ) {\n\tconst isSelected = useSelect(\n\t\t( select ) => select( blockEditorStore ).isBlockSelected( clientId ),\n\t\t[ clientId ]\n\t);\n\tconst { getBlockRootClientId, getBlockIndex } = useSelect(\n\t\tblockEditorStore\n\t);\n\tconst { insertDefaultBlock, removeBlock } = useDispatch( blockEditorStore );\n\n\treturn useRefEffect(\n\t\t( node ) => {\n\t\t\tif ( ! isSelected ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Interprets keydown event intent to remove or insert after block if\n\t\t\t * key event occurs on wrapper node. This can occur when the block has\n\t\t\t * no text fields of its own, particularly after initial insertion, to\n\t\t\t * allow for easy deletion and continuous writing flow to add additional\n\t\t\t * content.\n\t\t\t *\n\t\t\t * @param {KeyboardEvent} event Keydown event.\n\t\t\t */\n\t\t\tfunction onKeyDown( event ) {\n\t\t\t\tconst { keyCode, target } = event;\n\n\t\t\t\tif (\n\t\t\t\t\tkeyCode !== ENTER &&\n\t\t\t\t\tkeyCode !== BACKSPACE &&\n\t\t\t\t\tkeyCode !== DELETE\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( target !== node || isTextField( target ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\tif ( keyCode === ENTER ) {\n\t\t\t\t\tinsertDefaultBlock(\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tgetBlockRootClientId( clientId ),\n\t\t\t\t\t\tgetBlockIndex( clientId ) + 1\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tremoveBlock( clientId );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Prevents default dragging behavior within a block. To do: we must\n\t\t\t * handle this in the future and clean up the drag target.\n\t\t\t *\n\t\t\t * @param {DragEvent} event Drag event.\n\t\t\t */\n\t\t\tfunction onDragStart( event ) {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\n\t\t\tnode.addEventListener( 'keydown', onKeyDown );\n\t\t\tnode.addEventListener( 'dragstart', onDragStart );\n\n\t\t\treturn () => {\n\t\t\t\tnode.removeEventListener( 'keydown', onKeyDown );\n\t\t\t\tnode.removeEventListener( 'dragstart', onDragStart );\n\t\t\t};\n\t\t},\n\t\t[\n\t\t\tclientId,\n\t\t\tisSelected,\n\t\t\tgetBlockRootClientId,\n\t\t\tgetBlockIndex,\n\t\t\tinsertDefaultBlock,\n\t\t\tremoveBlock,\n\t\t]\n\t);\n}\n"]}