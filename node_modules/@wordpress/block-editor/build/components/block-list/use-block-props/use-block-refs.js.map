{"version":3,"sources":["@wordpress/block-editor/src/components/block-list/use-block-props/use-block-refs.js"],"names":["useBlockRefProvider","clientId","refs","callbacks","BlockRefs","ref","set","delete","element","current","forEach","id","setElement","useBlockRef","freshClientId","entries","useBlockElement"],"mappings":";;;;;;;;;AAGA;;AAOA;;AAKA;;AAfA;AACA;AACA;;AAUA;AACA;AACA;;AAGA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,mBAAT,CAA8BC,QAA9B,EAAyC;AAC/C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAsB,yBAAYC,4BAAZ,CAA5B;AACA,QAAMC,GAAG,GAAG,sBAAZ;AACA,gCAAiB,MAAM;AACtBH,IAAAA,IAAI,CAACI,GAAL,CAAUD,GAAV,EAAeJ,QAAf;AACA,WAAO,MAAM;AACZC,MAAAA,IAAI,CAACK,MAAL,CAAaF,GAAb;AACA,KAFD;AAGA,GALD,EAKG,CAAEJ,QAAF,CALH;AAMA,SAAO,2BACJO,OAAF,IAAe;AACd;AACAH,IAAAA,GAAG,CAACI,OAAJ,GAAcD,OAAd,CAFc,CAGd;;AACAL,IAAAA,SAAS,CAACO,OAAV,CAAmB,CAAEC,EAAF,EAAMC,UAAN,KAAsB;AACxC,UAAKX,QAAQ,KAAKU,EAAlB,EAAuB;AACtBC,QAAAA,UAAU,CAAEJ,OAAF,CAAV;AACA;AACD,KAJD;AAKA,GAVK,EAWN,CAAEP,QAAF,CAXM,CAAP;AAaA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASY,WAAT,CAAsBZ,QAAtB,EAAiC;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAW,yBAAYE,4BAAZ,CAAjB;AACA,QAAMU,aAAa,GAAG,sBAAtB;AACAA,EAAAA,aAAa,CAACL,OAAd,GAAwBR,QAAxB,CAHgC,CAIhC;AACA;;AACA,SAAO,sBACN,OAAQ;AACP,QAAIQ,OAAJ,GAAc;AACb,UAAID,OAAO,GAAG,IAAd,CADa,CAGb;AACA;;AACA,WAAM,MAAM,CAAEH,GAAF,EAAOM,EAAP,CAAZ,IAA2BT,IAAI,CAACa,OAAL,EAA3B,EAA4C;AAC3C,YAAKJ,EAAE,KAAKG,aAAa,CAACL,OAArB,IAAgCJ,GAAG,CAACI,OAAzC,EAAmD;AAClDD,UAAAA,OAAO,GAAGH,GAAG,CAACI,OAAd;AACA;AACD;;AAED,aAAOD,OAAP;AACA;;AAbM,GAAR,CADM,EAgBN,EAhBM,CAAP;AAkBA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,eAAT,CAA0Bf,QAA1B,EAAqC;AACpC,QAAM;AAAEE,IAAAA;AAAF,MAAgB,yBAAYC,4BAAZ,CAAtB;AACA,QAAMC,GAAG,GAAGQ,WAAW,CAAEZ,QAAF,CAAvB;AACA,QAAM,CAAEO,OAAF,EAAWI,UAAX,IAA0B,uBAAU,IAAV,CAAhC;AAEA,gCAAiB,MAAM;AACtB,QAAK,CAAEX,QAAP,EAAkB;AACjB;AACA;;AAEDE,IAAAA,SAAS,CAACG,GAAV,CAAeM,UAAf,EAA2BX,QAA3B;AACA,WAAO,MAAM;AACZE,MAAAA,SAAS,CAACI,MAAV,CAAkBK,UAAlB;AACA,KAFD;AAGA,GATD,EASG,CAAEX,QAAF,CATH;AAWA,SAAOI,GAAG,CAACI,OAAJ,IAAeD,OAAtB;AACA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport {\n\tuseContext,\n\tuseLayoutEffect,\n\tuseMemo,\n\tuseRef,\n\tuseState,\n} from '@wordpress/element';\nimport { useRefEffect } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { BlockRefs } from '../../provider/block-refs-provider';\n\n/** @typedef {import('@wordpress/element').RefCallback} RefCallback */\n/** @typedef {import('@wordpress/element').RefObject} RefObject */\n\n/**\n * Provides a ref to the BlockRefs context.\n *\n * @param {string} clientId The client ID of the element ref.\n *\n * @return {RefCallback} Ref callback.\n */\nexport function useBlockRefProvider( clientId ) {\n\tconst { refs, callbacks } = useContext( BlockRefs );\n\tconst ref = useRef();\n\tuseLayoutEffect( () => {\n\t\trefs.set( ref, clientId );\n\t\treturn () => {\n\t\t\trefs.delete( ref );\n\t\t};\n\t}, [ clientId ] );\n\treturn useRefEffect(\n\t\t( element ) => {\n\t\t\t// Update the ref in the provider.\n\t\t\tref.current = element;\n\t\t\t// Call any update functions.\n\t\t\tcallbacks.forEach( ( id, setElement ) => {\n\t\t\t\tif ( clientId === id ) {\n\t\t\t\t\tsetElement( element );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\t\t[ clientId ]\n\t);\n}\n\n/**\n * Gets a ref pointing to the current block element. Continues to return a\n * stable ref even if the block client ID changes.\n *\n * @param {string} clientId The client ID to get a ref for.\n *\n * @return {RefObject} A ref containing the element.\n */\nfunction useBlockRef( clientId ) {\n\tconst { refs } = useContext( BlockRefs );\n\tconst freshClientId = useRef();\n\tfreshClientId.current = clientId;\n\t// Always return an object, even if no ref exists for a given client ID, so\n\t// that `current` works at a later point.\n\treturn useMemo(\n\t\t() => ( {\n\t\t\tget current() {\n\t\t\t\tlet element = null;\n\n\t\t\t\t// Multiple refs may be created for a single block. Find the\n\t\t\t\t// first that has an element set.\n\t\t\t\tfor ( const [ ref, id ] of refs.entries() ) {\n\t\t\t\t\tif ( id === freshClientId.current && ref.current ) {\n\t\t\t\t\t\telement = ref.current;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn element;\n\t\t\t},\n\t\t} ),\n\t\t[]\n\t);\n}\n\n/**\n * Return the element for a given client ID. Updates whenever the element\n * changes, becomes available, or disappears.\n *\n * @param {string} clientId The client ID to an element for.\n *\n * @return {Element|null} The block's wrapper element.\n */\nfunction useBlockElement( clientId ) {\n\tconst { callbacks } = useContext( BlockRefs );\n\tconst ref = useBlockRef( clientId );\n\tconst [ element, setElement ] = useState( null );\n\n\tuseLayoutEffect( () => {\n\t\tif ( ! clientId ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcallbacks.set( setElement, clientId );\n\t\treturn () => {\n\t\t\tcallbacks.delete( setElement );\n\t\t};\n\t}, [ clientId ] );\n\n\treturn ref.current || element;\n}\n\nexport { useBlockRef as __unstableUseBlockRef };\nexport { useBlockElement as __unstableUseBlockElement };\n"]}