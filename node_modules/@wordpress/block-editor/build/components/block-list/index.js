"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockList;
exports.BlockListItems = BlockListItems;
exports.IntersectionObserver = void 0;

var _element = require("@wordpress/element");

var _classnames = _interopRequireDefault(require("classnames"));

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _block = _interopRequireDefault(require("./block"));

var _blockListAppender = _interopRequireDefault(require("../block-list-appender"));

var _useBlockDropZone = _interopRequireDefault(require("../use-block-drop-zone"));

var _useInBetweenInserter = require("./use-in-between-inserter");

var _store = require("../../store");

var _preParsePatterns = require("../../utils/pre-parse-patterns");

var _layout = require("./layout");

var _backCompat = _interopRequireDefault(require("../block-tools/back-compat"));

var _blockSelectionClearer = require("../block-selection-clearer");

var _head = require("./head");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const IntersectionObserver = (0, _element.createContext)();
exports.IntersectionObserver = IntersectionObserver;

function Root({
  className,
  children
}) {
  const isLargeViewport = (0, _compose.useViewportMatch)('medium');
  const {
    isOutlineMode,
    isFocusMode,
    isNavigationMode
  } = (0, _data.useSelect)(select => {
    const {
      getSettings,
      isNavigationMode: _isNavigationMode
    } = select(_store.store);
    const {
      outlineMode,
      focusMode
    } = getSettings();
    return {
      isOutlineMode: outlineMode,
      isFocusMode: focusMode,
      isNavigationMode: _isNavigationMode()
    };
  }, []);
  return (0, _element.createElement)(_head.Head, null, (0, _element.createElement)("div", {
    ref: (0, _compose.useMergeRefs)([(0, _blockSelectionClearer.useBlockSelectionClearer)(), (0, _useBlockDropZone.default)(), (0, _useInBetweenInserter.useInBetweenInserter)()]),
    className: (0, _classnames.default)('block-editor-block-list__layout is-root-container', className, {
      'is-outline-mode': isOutlineMode,
      'is-focus-mode': isFocusMode && isLargeViewport,
      'is-navigate-mode': isNavigationMode
    })
  }, children));
}

function BlockList({
  className,
  ...props
}) {
  (0, _preParsePatterns.usePreParsePatterns)();
  return (0, _element.createElement)(_backCompat.default, null, (0, _element.createElement)(Root, {
    className: className
  }, (0, _element.createElement)(BlockListItems, props)));
}

function Items({
  placeholder,
  rootClientId,
  renderAppender,
  __experimentalAppenderTagName,
  __experimentalLayout: layout = _layout.defaultLayout
}) {
  const [intersectingBlocks, setIntersectingBlocks] = (0, _element.useState)(new Set());
  const intersectionObserver = (0, _element.useMemo)(() => {
    const {
      IntersectionObserver: Observer
    } = window;

    if (!Observer) {
      return;
    }

    return new Observer(entries => {
      setIntersectingBlocks(oldIntersectingBlocks => {
        const newIntersectingBlocks = new Set(oldIntersectingBlocks);

        for (const entry of entries) {
          const clientId = entry.target.getAttribute('data-block');
          const action = entry.isIntersecting ? 'add' : 'delete';
          newIntersectingBlocks[action](clientId);
        }

        return newIntersectingBlocks;
      });
    });
  }, [setIntersectingBlocks]);
  const {
    order,
    selectedBlocks
  } = (0, _data.useSelect)(select => {
    const {
      getBlockOrder,
      getSelectedBlockClientIds
    } = select(_store.store);
    return {
      order: getBlockOrder(rootClientId),
      selectedBlocks: getSelectedBlockClientIds()
    };
  }, [rootClientId]);
  return (0, _element.createElement)(_layout.LayoutProvider, {
    value: layout
  }, (0, _element.createElement)(IntersectionObserver.Provider, {
    value: intersectionObserver
  }, order.map(clientId => (0, _element.createElement)(_data.AsyncModeProvider, {
    key: clientId,
    value: // Only provide data asynchronously if the block is
    // not visible and not selected.
    !intersectingBlocks.has(clientId) && !selectedBlocks.includes(clientId)
  }, (0, _element.createElement)(_block.default, {
    rootClientId: rootClientId,
    clientId: clientId
  })))), order.length < 1 && placeholder, (0, _element.createElement)(_blockListAppender.default, {
    tagName: __experimentalAppenderTagName,
    rootClientId: rootClientId,
    renderAppender: renderAppender
  }));
}

function BlockListItems(props) {
  // This component needs to always be synchronous as it's the one changing
  // the async mode depending on the block selection.
  return (0, _element.createElement)(_data.AsyncModeProvider, {
    value: false
  }, (0, _element.createElement)(Items, props));
}
//# sourceMappingURL=index.js.map