"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PanelColorGradientSettingsInner = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _control = _interopRequireDefault(require("./control"));

var _colors = require("../colors");

var _gradients = require("../gradients");

var _useSetting = _interopRequireDefault(require("../use-setting"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
// translators: first %s: The type of color or gradient (e.g. background, overlay...), second %s: the color name or value (e.g. red or #ff0000)
const colorIndicatorAriaLabel = (0, _i18n.__)('(%s: color %s)'); // translators: first %s: The type of color or gradient (e.g. background, overlay...), second %s: the color name or value (e.g. red or #ff0000)

const gradientIndicatorAriaLabel = (0, _i18n.__)('(%s: gradient %s)');
const colorsAndGradientKeys = ['colors', 'disableCustomColors', 'gradients', 'disableCustomGradients'];

const Indicators = ({
  colors,
  gradients,
  settings
}) => {
  return settings.map(({
    colorValue,
    gradientValue,
    label,
    colors: availableColors,
    gradients: availableGradients
  }, index) => {
    if (!colorValue && !gradientValue) {
      return null;
    }

    let ariaLabel;

    if (colorValue) {
      const colorObject = (0, _colors.getColorObjectByColorValue)(availableColors || colors, colorValue);
      ariaLabel = (0, _i18n.sprintf)(colorIndicatorAriaLabel, label.toLowerCase(), colorObject && colorObject.name || colorValue);
    } else {
      const gradientObject = (0, _gradients.__experimentalGetGradientObjectByGradientValue)(availableGradients || gradients, colorValue);
      ariaLabel = (0, _i18n.sprintf)(gradientIndicatorAriaLabel, label.toLowerCase(), gradientObject && gradientObject.name || gradientValue);
    }

    return (0, _element.createElement)(_components.ColorIndicator, {
      key: index,
      colorValue: colorValue || gradientValue,
      "aria-label": ariaLabel
    });
  });
};

const PanelColorGradientSettingsInner = ({
  className,
  colors,
  gradients,
  disableCustomColors,
  disableCustomGradients,
  children,
  settings,
  title,
  ...props
}) => {
  if ((0, _lodash.isEmpty)(colors) && (0, _lodash.isEmpty)(gradients) && disableCustomColors && disableCustomGradients && (0, _lodash.every)(settings, setting => (0, _lodash.isEmpty)(setting.colors) && (0, _lodash.isEmpty)(setting.gradients) && (setting.disableCustomColors === undefined || setting.disableCustomColors) && (setting.disableCustomGradients === undefined || setting.disableCustomGradients))) {
    return null;
  }

  const titleElement = (0, _element.createElement)("span", {
    className: "block-editor-panel-color-gradient-settings__panel-title"
  }, title, (0, _element.createElement)(Indicators, {
    colors: colors,
    gradients: gradients,
    settings: settings
  }));
  return (0, _element.createElement)(_components.PanelBody, (0, _extends2.default)({
    className: (0, _classnames.default)('block-editor-panel-color-gradient-settings', className),
    title: titleElement
  }, props), settings.map((setting, index) => (0, _element.createElement)(_control.default, (0, _extends2.default)({
    key: index,
    colors,
    gradients,
    disableCustomColors,
    disableCustomGradients
  }, setting))), children);
};

exports.PanelColorGradientSettingsInner = PanelColorGradientSettingsInner;

const PanelColorGradientSettingsSelect = props => {
  const colorGradientSettings = {};
  colorGradientSettings.colors = (0, _useSetting.default)('color.palette');
  colorGradientSettings.gradients = (0, _useSetting.default)('color.gradients');
  colorGradientSettings.disableCustomColors = !(0, _useSetting.default)('color.custom');
  colorGradientSettings.disableCustomGradients = !(0, _useSetting.default)('color.customGradient');
  return (0, _element.createElement)(PanelColorGradientSettingsInner, (0, _extends2.default)({}, colorGradientSettings, props));
};

const PanelColorGradientSettings = props => {
  if ((0, _lodash.every)(colorsAndGradientKeys, key => props.hasOwnProperty(key))) {
    return (0, _element.createElement)(PanelColorGradientSettingsInner, props);
  }

  return (0, _element.createElement)(PanelColorGradientSettingsSelect, props);
};

var _default = PanelColorGradientSettings;
exports.default = _default;
//# sourceMappingURL=panel-color-gradient-settings.js.map