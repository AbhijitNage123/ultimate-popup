{"version":3,"sources":["@wordpress/block-editor/src/hooks/custom-class-name.native.js"],"names":["addAttribute","settings","attributes","className","type","addSaveProps","extraProps","blockType","getHTMLRootElementClasses","innerHTML","parsed","source","selector","attribute","trim","split","addParsedDifference","blockAttributes","serialized","classes","parsedClasses","customClasses","filteredClassName","join"],"mappings":";;;;;;;;;;;;AAGA;;AACA;;AAKA;;AACA;;AAVA;AACA;AACA;;AAIA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,YAAT,CAAuBC,QAAvB,EAAkC;AACxC,MAAK,6BAAiBA,QAAjB,EAA2B,iBAA3B,EAA8C,IAA9C,CAAL,EAA4D;AAC3D;AACAA,IAAAA,QAAQ,CAACC,UAAT,GAAsB,EACrB,GAAGD,QAAQ,CAACC,UADS;AAErBC,MAAAA,SAAS,EAAE;AACVC,QAAAA,IAAI,EAAE;AADI;AAFU,KAAtB;AAMA;;AAED,SAAOH,QAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASI,YAAT,CAAuBC,UAAvB,EAAmCC,SAAnC,EAA8CL,UAA9C,EAA2D;AACjE,MACC,6BAAiBK,SAAjB,EAA4B,iBAA5B,EAA+C,IAA/C,KACAL,UAAU,CAACC,SAFZ,EAGE;AACDG,IAAAA,UAAU,CAACH,SAAX,GAAuB,yBACtBG,UAAU,CAACH,SADW,EAEtBD,UAAU,CAACC,SAFW,CAAvB;AAIA;;AAED,SAAOG,UAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASE,yBAAT,CAAoCC,SAApC,EAAgD;AACtDA,EAAAA,SAAS,GAAI,+BAA+BA,SAAW,QAAvD;AAEA,QAAMC,MAAM,GAAG,sCAA0BD,SAA1B,EAAqC;AACnDL,IAAAA,IAAI,EAAE,QAD6C;AAEnDO,IAAAA,MAAM,EAAE,WAF2C;AAGnDC,IAAAA,QAAQ,EAAE,8BAHyC;AAInDC,IAAAA,SAAS,EAAE;AAJwC,GAArC,CAAf;AAOA,SAAOH,MAAM,GAAGA,MAAM,CAACI,IAAP,GAAcC,KAAd,CAAqB,KAArB,CAAH,GAAkC,EAA/C;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,mBAAT,CAA8BC,eAA9B,EAA+CV,SAA/C,EAA0DE,SAA1D,EAAsE;AAC5E,MAAK,6BAAiBF,SAAjB,EAA4B,iBAA5B,EAA+C,IAA/C,CAAL,EAA6D;AAC5D;AACA;AACA;AACA,UAAMW,UAAU,GAAG,4BAAgBX,SAAhB,EAA2BU,eAA3B,CAAnB;AACA,UAAME,OAAO,GAAGX,yBAAyB,CAAEU,UAAF,CAAzC;AACA,UAAME,aAAa,GAAGZ,yBAAyB,CAAEC,SAAF,CAA/C;AACA,UAAMY,aAAa,GAAG,wBAAYD,aAAZ,EAA2BD,OAA3B,CAAtB;AAEA,UAAMG,iBAAiB,GAAG,qBAAS,CAClCL,eAAe,CAACd,SADkB,EAElC,GAAGkB,aAF+B,CAAT,EAGtBE,IAHsB,CAGhB,GAHgB,CAA1B;;AAKA,QAAKD,iBAAL,EAAyB;AACxBL,MAAAA,eAAe,CAACd,SAAhB,GAA4BmB,iBAA5B;AACA,KAFD,MAEO;AACN,aAAOL,eAAe,CAACd,SAAvB;AACA;AACD;;AAED,SAAOc,eAAP;AACA;;AAED,sBACC,0BADD,EAEC,kCAFD,EAGCjB,YAHD;AAKA,sBACC,kCADD,EAEC,mCAFD,EAGCK,YAHD;AAKA,sBACC,2BADD,EAEC,4CAFD,EAGCW,mBAHD","sourcesContent":["/**\n * External dependencies\n */\nimport { difference, compact } from 'lodash';\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { addFilter } from '@wordpress/hooks';\nimport {\n\thasBlockSupport,\n\tgetSaveContent,\n\tparseWithAttributeSchema,\n} from '@wordpress/blocks';\n\n/**\n * Filters registered block settings, extending attributes with anchor using ID\n * of the first node.\n *\n * @param {Object} settings Original block settings.\n *\n * @return {Object} Filtered block settings.\n */\nexport function addAttribute( settings ) {\n\tif ( hasBlockSupport( settings, 'customClassName', true ) ) {\n\t\t// Gracefully handle if settings.attributes is undefined.\n\t\tsettings.attributes = {\n\t\t\t...settings.attributes,\n\t\t\tclassName: {\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t};\n\t}\n\n\treturn settings;\n}\n\n/**\n * Override props assigned to save component to inject anchor ID, if block\n * supports anchor. This is only applied if the block's save result is an\n * element and not a markup string.\n *\n * @param {Object} extraProps Additional props applied to save element.\n * @param {Object} blockType  Block type.\n * @param {Object} attributes Current block attributes.\n *\n * @return {Object} Filtered props applied to save element.\n */\nexport function addSaveProps( extraProps, blockType, attributes ) {\n\tif (\n\t\thasBlockSupport( blockType, 'customClassName', true ) &&\n\t\tattributes.className\n\t) {\n\t\textraProps.className = classnames(\n\t\t\textraProps.className,\n\t\t\tattributes.className\n\t\t);\n\t}\n\n\treturn extraProps;\n}\n\n/**\n * Given an HTML string, returns an array of class names assigned to the root\n * element in the markup.\n *\n * @param {string} innerHTML Markup string from which to extract classes.\n *\n * @return {string[]} Array of class names assigned to the root element.\n */\nexport function getHTMLRootElementClasses( innerHTML ) {\n\tinnerHTML = `<div data-custom-class-name>${ innerHTML }</div>`;\n\n\tconst parsed = parseWithAttributeSchema( innerHTML, {\n\t\ttype: 'string',\n\t\tsource: 'attribute',\n\t\tselector: '[data-custom-class-name] > *',\n\t\tattribute: 'class',\n\t} );\n\n\treturn parsed ? parsed.trim().split( /\\s+/ ) : [];\n}\n\n/**\n * Given a parsed set of block attributes, if the block supports custom class\n * names and an unknown class (per the block's serialization behavior) is\n * found, the unknown classes are treated as custom classes. This prevents the\n * block from being considered as invalid.\n *\n * @param {Object} blockAttributes Original block attributes.\n * @param {Object} blockType       Block type settings.\n * @param {string} innerHTML       Original block markup.\n *\n * @return {Object} Filtered block attributes.\n */\nexport function addParsedDifference( blockAttributes, blockType, innerHTML ) {\n\tif ( hasBlockSupport( blockType, 'customClassName', true ) ) {\n\t\t// To determine difference, serialize block given the known set of\n\t\t// attributes. If there are classes which are mismatched with the\n\t\t// incoming HTML of the block, add to filtered result.\n\t\tconst serialized = getSaveContent( blockType, blockAttributes );\n\t\tconst classes = getHTMLRootElementClasses( serialized );\n\t\tconst parsedClasses = getHTMLRootElementClasses( innerHTML );\n\t\tconst customClasses = difference( parsedClasses, classes );\n\n\t\tconst filteredClassName = compact( [\n\t\t\tblockAttributes.className,\n\t\t\t...customClasses,\n\t\t] ).join( ' ' );\n\n\t\tif ( filteredClassName ) {\n\t\t\tblockAttributes.className = filteredClassName;\n\t\t} else {\n\t\t\tdelete blockAttributes.className;\n\t\t}\n\t}\n\n\treturn blockAttributes;\n}\n\naddFilter(\n\t'blocks.registerBlockType',\n\t'core/custom-class-name/attribute',\n\taddAttribute\n);\naddFilter(\n\t'blocks.getSaveContent.extraProps',\n\t'core/custom-class-name/save-props',\n\taddSaveProps\n);\naddFilter(\n\t'blocks.getBlockAttributes',\n\t'core/custom-class-name/addParsedDifference',\n\taddParsedDifference\n);\n"]}