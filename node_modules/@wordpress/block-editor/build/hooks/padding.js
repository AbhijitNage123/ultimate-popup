"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasPaddingSupport = hasPaddingSupport;
exports.useIsPaddingDisabled = useIsPaddingDisabled;
exports.PaddingEdit = PaddingEdit;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _blocks = require("@wordpress/blocks");

var _components = require("@wordpress/components");

var _useSetting = _interopRequireDefault(require("../components/use-setting"));

var _spacing = require("./spacing");

var _utils = require("./utils");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Determines if there is padding support.
 *
 * @param {string|Object} blockType Block name or Block Type object.
 *
 * @return {boolean} Whether there is support.
 */
function hasPaddingSupport(blockType) {
  const support = (0, _blocks.getBlockSupport)(blockType, _spacing.SPACING_SUPPORT_KEY);
  return !!(true === support || support !== null && support !== void 0 && support.padding);
}
/**
 * Custom hook that checks if padding settings have been disabled.
 *
 * @param {string} name The name of the block.
 *
 * @return {boolean} Whether padding setting is disabled.
 */


function useIsPaddingDisabled({
  name: blockName
} = {}) {
  const isDisabled = !(0, _useSetting.default)('spacing.customPadding');
  return !hasPaddingSupport(blockName) || isDisabled;
}
/**
 * Inspector control panel containing the padding related configuration
 *
 * @param {Object} props
 *
 * @return {WPElement} Padding edit element.
 */


function PaddingEdit(props) {
  var _style$spacing;

  const {
    name: blockName,
    attributes: {
      style
    },
    setAttributes
  } = props;
  const units = (0, _components.__experimentalUseCustomUnits)({
    availableUnits: (0, _useSetting.default)('spacing.units') || ['%', 'px', 'em', 'rem', 'vw']
  });
  const sides = (0, _spacing.useCustomSides)(blockName, 'padding');

  if (useIsPaddingDisabled(props)) {
    return null;
  }

  const onChange = next => {
    const newStyle = { ...style,
      spacing: { ...(style === null || style === void 0 ? void 0 : style.spacing),
        padding: next
      }
    };
    setAttributes({
      style: (0, _utils.cleanEmptyObject)(newStyle)
    });
  };

  const onChangeShowVisualizer = next => {
    const newStyle = { ...style,
      visualizers: {
        padding: next
      }
    };
    setAttributes({
      style: (0, _utils.cleanEmptyObject)(newStyle)
    });
  };

  return _element.Platform.select({
    web: (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.__experimentalBoxControl, {
      values: style === null || style === void 0 ? void 0 : (_style$spacing = style.spacing) === null || _style$spacing === void 0 ? void 0 : _style$spacing.padding,
      onChange: onChange,
      onChangeShowVisualizer: onChangeShowVisualizer,
      label: (0, _i18n.__)('Padding'),
      sides: sides,
      units: units
    })),
    native: null
  });
}
//# sourceMappingURL=padding.js.map