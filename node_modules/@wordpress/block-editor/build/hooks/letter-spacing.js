"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LetterSpacingEdit = LetterSpacingEdit;
exports.useIsLetterSpacingDisabled = useIsLetterSpacingDisabled;
exports.LETTER_SPACING_SUPPORT_KEY = void 0;

var _element = require("@wordpress/element");

var _blocks = require("@wordpress/blocks");

var _letterSpacingControl = _interopRequireDefault(require("../components/letter-spacing-control"));

var _useSetting = _interopRequireDefault(require("../components/use-setting"));

var _utils = require("./utils");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Key within block settings' supports array indicating support for letter-spacing
 * e.g. settings found in `block.json`.
 */
const LETTER_SPACING_SUPPORT_KEY = '__experimentalLetterSpacing';
/**
 * Inspector control panel containing the letter-spacing options.
 *
 * @param {Object} props Block properties.
 * @return {WPElement}    Letter-spacing edit element.
 */

exports.LETTER_SPACING_SUPPORT_KEY = LETTER_SPACING_SUPPORT_KEY;

function LetterSpacingEdit(props) {
  var _style$typography;

  const {
    attributes: {
      style
    },
    setAttributes
  } = props;
  const isDisabled = useIsLetterSpacingDisabled(props);

  if (isDisabled) {
    return null;
  }

  function onChange(newSpacing) {
    setAttributes({
      style: (0, _utils.cleanEmptyObject)({ ...style,
        typography: { ...(style === null || style === void 0 ? void 0 : style.typography),
          letterSpacing: newSpacing
        }
      })
    });
  }

  return (0, _element.createElement)(_letterSpacingControl.default, {
    value: style === null || style === void 0 ? void 0 : (_style$typography = style.typography) === null || _style$typography === void 0 ? void 0 : _style$typography.letterSpacing,
    onChange: onChange
  });
}
/**
 * Checks if letter-spacing settings have been disabled.
 *
 * @param {string} name Name of the block.
 * @return {boolean}     Whether or not the setting is disabled.
 */


function useIsLetterSpacingDisabled({
  name: blockName
} = {}) {
  const notSupported = !(0, _blocks.hasBlockSupport)(blockName, LETTER_SPACING_SUPPORT_KEY);
  const hasLetterSpacing = (0, _useSetting.default)('typography.customLetterSpacing');
  return notSupported || !hasLetterSpacing;
}
//# sourceMappingURL=letter-spacing.js.map