{"version":3,"sources":["@wordpress/block-editor/src/hooks/use-border-props.js"],"names":["EMPTY_ARRAY","getBorderClassesAndStyles","borderColor","style","borderStyles","border","borderClass","className","color","undefined","useBorderProps","attributes","colors","borderProps","borderColorObject"],"mappings":";;;;;;;;;;AAGA;;AAKA;;AACA;;AAIA;;AAbA;AACA;AACA;;AAGA;AACA;AACA;AAQA;AACA;AACA;AAEA,MAAMA,WAAW,GAAG,EAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASC,yBAAT,CAAoC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAApC,EAA6D;AAAA;;AACnE,QAAMC,YAAY,GAAG,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEE,MAAP,KAAiB,EAAtC;AACA,QAAMC,WAAW,GAAG,+BAAmB,cAAnB,EAAmCJ,WAAnC,CAApB;AAEA,QAAMK,SAAS,GAAG,yBAAY;AAC7B,KAAED,WAAF,GAAiB,CAAC,CAAEA,WADS;AAE7B,wBAAoBJ,WAAW,KAAIC,KAAJ,aAAIA,KAAJ,wCAAIA,KAAK,CAAEE,MAAX,kDAAI,cAAeG,KAAnB;AAFF,GAAZ,CAAlB;AAKA,SAAO;AACND,IAAAA,SAAS,EAAEA,SAAS,IAAIE,SADlB;AAENN,IAAAA,KAAK,EAAE,4BAAiB;AAAEE,MAAAA,MAAM,EAAED;AAAV,KAAjB;AAFD,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASM,cAAT,CAAyBC,UAAzB,EAAsC;AAC5C,QAAMC,MAAM,GAAG,yBAAY,eAAZ,KAAiCZ,WAAhD;AACA,QAAMa,WAAW,GAAGZ,yBAAyB,CAAEU,UAAF,CAA7C,CAF4C,CAI5C;AACA;;AACA,MAAKA,UAAU,CAACT,WAAhB,EAA8B;AAC7B,UAAMY,iBAAiB,GAAG,6CACzBF,MADyB,EAEzBD,UAAU,CAACT,WAFc,CAA1B;AAKAW,IAAAA,WAAW,CAACV,KAAZ,CAAkBD,WAAlB,GAAgCY,iBAAiB,CAACN,KAAlD;AACA;;AAED,SAAOK,WAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * Internal dependencies\n */\nimport { getInlineStyles } from './style';\nimport {\n\tgetColorClassName,\n\tgetColorObjectByAttributeValues,\n} from '../components/colors';\nimport useSetting from '../components/use-setting';\n\n// This utility is intended to assist where the serialization of the border\n// block support is being skipped for a block but the border related CSS classes\n// & styles still need to be generated so they can be applied to inner elements.\n\nconst EMPTY_ARRAY = [];\n\n/**\n * Provides the CSS class names and inline styles for a block's border support\n * attributes.\n *\n * @param {Object} attributes             Block attributes.\n * @param {string} attributes.borderColor Selected named border color.\n * @param {Object} attributes.style       Block's styles attribute.\n *\n * @return {Object} Border block support derived CSS classes & styles.\n */\nexport function getBorderClassesAndStyles( { borderColor, style } ) {\n\tconst borderStyles = style?.border || {};\n\tconst borderClass = getColorClassName( 'border-color', borderColor );\n\n\tconst className = classnames( {\n\t\t[ borderClass ]: !! borderClass,\n\t\t'has-border-color': borderColor || style?.border?.color,\n\t} );\n\n\treturn {\n\t\tclassName: className || undefined,\n\t\tstyle: getInlineStyles( { border: borderStyles } ),\n\t};\n}\n\n/**\n * Derives the border related props for a block from its border block support\n * attributes.\n *\n * Inline styles are forced for named colors to ensure these selections are\n * reflected when themes do not load their color stylesheets in the editor.\n *\n * @param {Object} attributes Block attributes.\n *\n * @return {Object} ClassName & style props from border block support.\n */\nexport function useBorderProps( attributes ) {\n\tconst colors = useSetting( 'color.palette' ) || EMPTY_ARRAY;\n\tconst borderProps = getBorderClassesAndStyles( attributes );\n\n\t// Force inline style to apply border color when themes do not load their\n\t// color stylesheets in the editor.\n\tif ( attributes.borderColor ) {\n\t\tconst borderColorObject = getColorObjectByAttributeValues(\n\t\t\tcolors,\n\t\t\tattributes.borderColor\n\t\t);\n\n\t\tborderProps.style.borderColor = borderColorObject.color;\n\t}\n\n\treturn borderProps;\n}\n"]}