{"version":3,"sources":["@wordpress/block-editor/src/utils/math.js"],"names":["getDistanceFromPointToEdge","point","rect","edge","isHorizontal","x","y","pointLateralPosition","pointForwardPosition","edgeStart","left","top","edgeEnd","right","bottom","edgeForwardPosition","edgeLateralPosition","Math","sqrt","getDistanceToNearestEdge","allowedEdges","candidateDistance","candidateEdge","forEach","distance","undefined"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,0BAAT,CAAqCC,KAArC,EAA4CC,IAA5C,EAAkDC,IAAlD,EAAyD;AAC/D,QAAMC,YAAY,GAAGD,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,QAAhD;AACA,QAAM;AAAEE,IAAAA,CAAF;AAAKC,IAAAA;AAAL,MAAWL,KAAjB;AACA,QAAMM,oBAAoB,GAAGH,YAAY,GAAGC,CAAH,GAAOC,CAAhD;AACA,QAAME,oBAAoB,GAAGJ,YAAY,GAAGE,CAAH,GAAOD,CAAhD;AACA,QAAMI,SAAS,GAAGL,YAAY,GAAGF,IAAI,CAACQ,IAAR,GAAeR,IAAI,CAACS,GAAlD;AACA,QAAMC,OAAO,GAAGR,YAAY,GAAGF,IAAI,CAACW,KAAR,GAAgBX,IAAI,CAACY,MAAjD;AACA,QAAMC,mBAAmB,GAAGb,IAAI,CAAEC,IAAF,CAAhC,CAP+D,CAS/D;AACA;AACA;AACA;;AACA,MAAIa,mBAAJ;;AACA,MACCT,oBAAoB,IAAIE,SAAxB,IACAF,oBAAoB,IAAIK,OAFzB,EAGE;AACDI,IAAAA,mBAAmB,GAAGT,oBAAtB;AACA,GALD,MAKO,IAAKA,oBAAoB,GAAGK,OAA5B,EAAsC;AAC5CI,IAAAA,mBAAmB,GAAGP,SAAtB;AACA,GAFM,MAEA;AACNO,IAAAA,mBAAmB,GAAGJ,OAAtB;AACA;;AAED,SAAOK,IAAI,CAACC,IAAL,CACN,CAAEX,oBAAoB,GAAGS,mBAAzB,KAAkD,CAAlD,GACC,CAAER,oBAAoB,GAAGO,mBAAzB,KAAkD,CAF7C,CAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASI,wBAAT,CACNlB,KADM,EAENC,IAFM,EAGNkB,YAAY,GAAG,CAAE,KAAF,EAAS,QAAT,EAAmB,MAAnB,EAA2B,OAA3B,CAHT,EAIL;AACD,MAAIC,iBAAJ;AACA,MAAIC,aAAJ;AAEAF,EAAAA,YAAY,CAACG,OAAb,CAAwBpB,IAAF,IAAY;AACjC,UAAMqB,QAAQ,GAAGxB,0BAA0B,CAAEC,KAAF,EAASC,IAAT,EAAeC,IAAf,CAA3C;;AAEA,QAAKkB,iBAAiB,KAAKI,SAAtB,IAAmCD,QAAQ,GAAGH,iBAAnD,EAAuE;AACtEA,MAAAA,iBAAiB,GAAGG,QAApB;AACAF,MAAAA,aAAa,GAAGnB,IAAhB;AACA;AACD,GAPD;AASA,SAAO,CAAEkB,iBAAF,EAAqBC,aAArB,CAAP;AACA","sourcesContent":["/**\n * A string representing the name of an edge.\n *\n * @typedef {'top'|'right'|'bottom'|'left'} WPEdgeName\n */\n\n/**\n * @typedef  {Object} WPPoint\n * @property {number} x The horizontal position.\n * @property {number} y The vertical position.\n */\n\n/**\n * Given a point, a DOMRect and the name of an edge, returns the distance to\n * that edge of the rect.\n *\n * This function works for edges that are horizontal or vertical (e.g. not\n * rotated), the following terms are used so that the function works in both\n * orientations:\n *\n * - Forward, meaning the axis running horizontally when an edge is vertical\n *   and vertically when an edge is horizontal.\n * - Lateral, meaning the axis running vertically when an edge is vertical\n *   and horizontally when an edge is horizontal.\n *\n * @param {WPPoint}    point The point to measure distance from.\n * @param {DOMRect}    rect  A DOM Rect containing edge positions.\n * @param {WPEdgeName} edge  The edge to measure to.\n */\nexport function getDistanceFromPointToEdge( point, rect, edge ) {\n\tconst isHorizontal = edge === 'top' || edge === 'bottom';\n\tconst { x, y } = point;\n\tconst pointLateralPosition = isHorizontal ? x : y;\n\tconst pointForwardPosition = isHorizontal ? y : x;\n\tconst edgeStart = isHorizontal ? rect.left : rect.top;\n\tconst edgeEnd = isHorizontal ? rect.right : rect.bottom;\n\tconst edgeForwardPosition = rect[ edge ];\n\n\t// Measure the straight line distance to the edge of the rect, when the\n\t// point is adjacent to the edge.\n\t// Else, if the point is positioned diagonally to the edge of the rect,\n\t// measure diagonally to the nearest corner that the edge meets.\n\tlet edgeLateralPosition;\n\tif (\n\t\tpointLateralPosition >= edgeStart &&\n\t\tpointLateralPosition <= edgeEnd\n\t) {\n\t\tedgeLateralPosition = pointLateralPosition;\n\t} else if ( pointLateralPosition < edgeEnd ) {\n\t\tedgeLateralPosition = edgeStart;\n\t} else {\n\t\tedgeLateralPosition = edgeEnd;\n\t}\n\n\treturn Math.sqrt(\n\t\t( pointLateralPosition - edgeLateralPosition ) ** 2 +\n\t\t\t( pointForwardPosition - edgeForwardPosition ) ** 2\n\t);\n}\n\n/**\n * Given a point, a DOMRect and a list of allowed edges returns the name of and\n * distance to the nearest edge.\n *\n * @param {WPPoint}      point        The point to measure distance from.\n * @param {DOMRect}      rect         A DOM Rect containing edge positions.\n * @param {WPEdgeName[]} allowedEdges A list of the edges included in the\n *                                    calculation. Defaults to all edges.\n *\n * @return {[number, string]} An array where the first value is the distance\n *                              and a second is the edge name.\n */\nexport function getDistanceToNearestEdge(\n\tpoint,\n\trect,\n\tallowedEdges = [ 'top', 'bottom', 'left', 'right' ]\n) {\n\tlet candidateDistance;\n\tlet candidateEdge;\n\n\tallowedEdges.forEach( ( edge ) => {\n\t\tconst distance = getDistanceFromPointToEdge( point, rect, edge );\n\n\t\tif ( candidateDistance === undefined || distance < candidateDistance ) {\n\t\t\tcandidateDistance = distance;\n\t\t\tcandidateEdge = edge;\n\t\t}\n\t} );\n\n\treturn [ candidateDistance, candidateEdge ];\n}\n"]}