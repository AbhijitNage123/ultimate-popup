{"version":3,"sources":["@wordpress/components/src/visually-hidden/utils.js"],"names":["renderAsRenderProps","as","Component","props","children"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,mBAAT,CAA8B;AAAEC,EAAAA,EAAE,EAAEC,SAAS,GAAG,KAAlB;AAAyB,KAAGC;AAA5B,CAA9B,EAAoE;AACnE,MAAK,OAAOA,KAAK,CAACC,QAAb,KAA0B,UAA/B,EAA4C;AAC3C,WAAOD,KAAK,CAACC,QAAN,CAAgBD,KAAhB,CAAP;AACA;;AACD,SAAO,cAAC,SAAD,EAAgBA,KAAhB,CAAP;AACA;;AAED,SAASH,mBAAT","sourcesContent":["/**\n * @template {keyof JSX.IntrinsicElements | import('react').JSXElementConstructor<any>} T\n * @typedef OwnProps\n * @property {T}                                                                                        [as='div'] Component to render\n * @property {import('react').ReactNode | ((props: import('react').ComponentProps<T>) => JSX.Element) } [children] Children or render props function\n */\n\n/**\n * @template {keyof JSX.IntrinsicElements | import('react').JSXElementConstructor<any>} T\n * @typedef {OwnProps<T> & import('react').ComponentProps<T>} Props\n */\n\n/**\n * renderAsRenderProps is used to wrap a component and convert\n * the passed property \"as\" either a string or component, to the\n * rendered tag if a string, or component.\n *\n * See VisuallyHidden hidden for example.\n *\n * @template {keyof JSX.IntrinsicElements | import('react').JSXElementConstructor<any>} T\n * @param {Props<T>} props\n * @return {JSX.Element} The rendered element.\n */\nfunction renderAsRenderProps( { as: Component = 'div', ...props } ) {\n\tif ( typeof props.children === 'function' ) {\n\t\treturn props.children( props );\n\t}\n\treturn <Component { ...props } />;\n}\n\nexport { renderAsRenderProps };\n"]}