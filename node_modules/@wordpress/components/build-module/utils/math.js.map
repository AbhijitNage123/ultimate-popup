{"version":3,"sources":["@wordpress/components/src/utils/math.js"],"names":["clamp","getNumber","value","number","Number","isNaN","add","args","reduce","sum","arg","subtract","diff","index","getPrecision","split","undefined","length","roundClamp","min","Infinity","max","step","baseValue","stepValue","precision","rounded","Math","round","clampedValue","toFixed","roundClampString","toString"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,KAAT,QAAsB,QAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAoBC,KAApB,EAA4B;AAClC,QAAMC,MAAM,GAAGC,MAAM,CAAEF,KAAF,CAArB;AAEA,SAAOG,KAAK,CAAEF,MAAF,CAAL,GAAkB,CAAlB,GAAsBA,MAA7B;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,GAAT,CAAc,GAAGC,IAAjB,EAAwB;AAC9B,SAAOA,IAAI,CAACC,MAAL;AACN;AACA,GAAEC,GAAF,EAAOC,GAAP,KAAgBD,GAAG,GAAGR,SAAS,CAAES,GAAF,CAFzB,EAGN,CAHM,CAAP;AAKA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAmB,GAAGJ,IAAtB,EAA6B;AACnC,SAAOA,IAAI,CAACC,MAAL;AACN;AACA,GAAEI,IAAF,EAAQF,GAAR,EAAaG,KAAb,KAAwB;AACvB,UAAMX,KAAK,GAAGD,SAAS,CAAES,GAAF,CAAvB;AACA,WAAOG,KAAK,KAAK,CAAV,GAAcX,KAAd,GAAsBU,IAAI,GAAGV,KAApC;AACA,GALK,EAMN,CANM,CAAP;AAQA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASY,YAAT,CAAuBZ,KAAvB,EAA+B;AAC9B,QAAMa,KAAK,GAAG,CAAEb,KAAK,GAAG,EAAV,EAAea,KAAf,CAAsB,GAAtB,CAAd;AACA,SAAOA,KAAK,CAAE,CAAF,CAAL,KAAeC,SAAf,GAA2BD,KAAK,CAAE,CAAF,CAAL,CAAWE,MAAtC,GAA+C,CAAtD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASC,UAAT,CACNhB,KAAK,GAAG,CADF,EAENiB,GAAG,GAAGC,QAFA,EAGNC,GAAG,GAAGD,QAHA,EAINE,IAAI,GAAG,CAJD,EAKL;AACD,QAAMC,SAAS,GAAGtB,SAAS,CAAEC,KAAF,CAA3B;AACA,QAAMsB,SAAS,GAAGvB,SAAS,CAAEqB,IAAF,CAA3B;AACA,QAAMG,SAAS,GAAGX,YAAY,CAAEQ,IAAF,CAA9B;AACA,QAAMI,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYL,SAAS,GAAGC,SAAxB,IAAsCA,SAAtD;AACA,QAAMK,YAAY,GAAG7B,KAAK,CAAE0B,OAAF,EAAWP,GAAX,EAAgBE,GAAhB,CAA1B;AAEA,SAAOI,SAAS,GACbxB,SAAS,CAAE4B,YAAY,CAACC,OAAb,CAAsBL,SAAtB,CAAF,CADI,GAEbI,YAFH;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,gBAAT,CAA2B,GAAGxB,IAA9B,EAAqC;AAC3C,SAAOW,UAAU,CAAE,GAAGX,IAAL,CAAV,CAAsByB,QAAtB,EAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { clamp } from 'lodash';\n\n/**\n * Parses and retrieves a number value.\n *\n * @param {unknown} value The incoming value.\n *\n * @return {number} The parsed number value.\n */\nexport function getNumber( value ) {\n\tconst number = Number( value );\n\n\treturn isNaN( number ) ? 0 : number;\n}\n\n/**\n * Safely adds 2 values.\n *\n * @param {Array<number|string>} args Values to add together.\n *\n * @return {number} The sum of values.\n */\nexport function add( ...args ) {\n\treturn args.reduce(\n\t\t/** @type {(sum:number, arg: number|string) => number} */\n\t\t( sum, arg ) => sum + getNumber( arg ),\n\t\t0\n\t);\n}\n\n/**\n * Safely subtracts 2 values.\n *\n * @param {Array<number|string>} args Values to subtract together.\n *\n * @return {number} The difference of the values.\n */\nexport function subtract( ...args ) {\n\treturn args.reduce(\n\t\t/** @type {(diff:number, arg: number|string, index:number) => number} */\n\t\t( diff, arg, index ) => {\n\t\t\tconst value = getNumber( arg );\n\t\t\treturn index === 0 ? value : diff - value;\n\t\t},\n\t\t0\n\t);\n}\n\n/**\n * Determines the decimal position of a number value.\n *\n * @param {number} value The number to evaluate.\n *\n * @return {number} The number of decimal places.\n */\nfunction getPrecision( value ) {\n\tconst split = ( value + '' ).split( '.' );\n\treturn split[ 1 ] !== undefined ? split[ 1 ].length : 0;\n}\n\n/**\n * Clamps a value based on a min/max range with rounding\n *\n * @param {number} value The value.\n * @param {number} min   The minimum range.\n * @param {number} max   The maximum range.\n * @param {number} step  A multiplier for the value.\n *\n * @return {number} The rounded and clamped value.\n */\nexport function roundClamp(\n\tvalue = 0,\n\tmin = Infinity,\n\tmax = Infinity,\n\tstep = 1\n) {\n\tconst baseValue = getNumber( value );\n\tconst stepValue = getNumber( step );\n\tconst precision = getPrecision( step );\n\tconst rounded = Math.round( baseValue / stepValue ) * stepValue;\n\tconst clampedValue = clamp( rounded, min, max );\n\n\treturn precision\n\t\t? getNumber( clampedValue.toFixed( precision ) )\n\t\t: clampedValue;\n}\n\n/**\n * Clamps a value based on a min/max range with rounding.\n * Returns a string.\n *\n * @param {Parameters<typeof roundClamp>} args Arguments for roundClamp().\n * @return {string} The rounded and clamped value.\n */\nexport function roundClampString( ...args ) {\n\treturn roundClamp( ...args ).toString();\n}\n"]}