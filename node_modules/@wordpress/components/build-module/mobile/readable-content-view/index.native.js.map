{"version":3,"sources":["@wordpress/components/src/mobile/readable-content-view/index.native.js"],"names":["View","Dimensions","useState","useEffect","ALIGNMENT_BREAKPOINTS","WIDE_ALIGNMENTS","styles","PIXEL_RATIO","ReadableContentView","align","reversed","children","style","width","height","get","windowWidth","setWindowWidth","windowRatio","setWindowRatio","onDimensionsChange","window","addEventListener","removeEventListener","getWideStyles","large","wideLandscape","small","maxWidth","medium","wide","wideMedium","container","reversedCenteredContent","centeredContent","alignments","isContentMaxWidth"],"mappings":";;AAAA;AACA;AACA;AACA,SAASA,IAAT,EAAeC,UAAf,QAAiC,cAAjC;AAEA;AACA;AACA;;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,oBAApC;AACA,SAASC,qBAAT,EAAgCC,eAAhC,QAAuD,uBAAvD;AACA;AACA;AACA;;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,MAAMC,WAAW,GAAG,CAApB;;AAEA,MAAMC,mBAAmB,GAAG,CAAE;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA,QAAnB;AAA6BC,EAAAA;AAA7B,CAAF,KAA4C;AACvE,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBb,UAAU,CAACc,GAAX,CAAgB,QAAhB,CAA1B;AACA,QAAM,CAAEC,WAAF,EAAeC,cAAf,IAAkCf,QAAQ,CAAEW,KAAF,CAAhD;AACA,QAAM,CAAEK,WAAF,EAAeC,cAAf,IAAkCjB,QAAQ,CAAEW,KAAK,GAAGC,MAAV,CAAhD;;AAEA,WAASM,kBAAT,CAA6B;AAAEC,IAAAA;AAAF,GAA7B,EAA0C;AACzCJ,IAAAA,cAAc,CAAEI,MAAM,CAACR,KAAT,CAAd;AACAM,IAAAA,cAAc,CAAEE,MAAM,CAACR,KAAP,GAAeQ,MAAM,CAACP,MAAxB,CAAd;AACA;;AAEDX,EAAAA,SAAS,CAAE,MAAM;AAChBF,IAAAA,UAAU,CAACqB,gBAAX,CAA6B,QAA7B,EAAuCF,kBAAvC;AAEA,WAAO,MAAM;AACZnB,MAAAA,UAAU,CAACsB,mBAAX,CAAgC,QAAhC,EAA0CH,kBAA1C;AACA,KAFD;AAGA,GANQ,EAMN,EANM,CAAT;;AAQA,WAASI,aAAT,GAAyB;AACxB,QACCN,WAAW,IAAIX,WAAf,IACAS,WAAW,GAAGZ,qBAAqB,CAACqB,KAFrC,EAGE;AACD,aAAOnB,MAAM,CAACoB,aAAd;AACA;;AAED,QAAKV,WAAW,IAAIZ,qBAAqB,CAACuB,KAA1C,EAAkD;AACjD,aAAO;AAAEC,QAAAA,QAAQ,EAAEZ;AAAZ,OAAP;AACA;;AAED,QACCA,WAAW,IAAIZ,qBAAqB,CAACyB,MAArC,IACAb,WAAW,GAAGZ,qBAAqB,CAAC0B,IAFrC,EAGE;AACD,aAAOxB,MAAM,CAACyB,UAAd;AACA;AACD;;AAED,SACC,cAAC,IAAD;AAAM,IAAA,KAAK,EAAGzB,MAAM,CAAC0B;AAArB,KACC,cAAC,IAAD;AACC,IAAA,KAAK,EAAG,CACPtB,QAAQ,GACLJ,MAAM,CAAC2B,uBADF,GAEL3B,MAAM,CAAC4B,eAHH,EAIPtB,KAJO,EAKPN,MAAM,CAAEG,KAAF,CALC,EAMPA,KAAK,KAAKJ,eAAe,CAAC8B,UAAhB,CAA2BL,IAArC,IACCN,aAAa,EAPP;AADT,KAWGb,QAXH,CADD,CADD;AAiBA,CAvDD;;AAyDA,MAAMyB,iBAAiB,GAAG,MAAM;AAC/B,QAAM;AAAEvB,IAAAA;AAAF,MAAYZ,UAAU,CAACc,GAAX,CAAgB,QAAhB,CAAlB;AACA,SAAOF,KAAK,GAAGP,MAAM,CAAC4B,eAAP,CAAuBN,QAAtC;AACA,CAHD;;AAKApB,mBAAmB,CAAC4B,iBAApB,GAAwCA,iBAAxC;AAEA,eAAe5B,mBAAf","sourcesContent":["/**\n * External dependencies\n */\nimport { View, Dimensions } from 'react-native';\n\n/**\n * WordPress dependencies\n */\nimport { useState, useEffect } from '@wordpress/element';\nimport { ALIGNMENT_BREAKPOINTS, WIDE_ALIGNMENTS } from '@wordpress/components';\n/**\n * Internal dependencies\n */\nimport styles from './style.scss';\n\nconst PIXEL_RATIO = 2;\n\nconst ReadableContentView = ( { align, reversed, children, style } ) => {\n\tconst { width, height } = Dimensions.get( 'window' );\n\tconst [ windowWidth, setWindowWidth ] = useState( width );\n\tconst [ windowRatio, setWindowRatio ] = useState( width / height );\n\n\tfunction onDimensionsChange( { window } ) {\n\t\tsetWindowWidth( window.width );\n\t\tsetWindowRatio( window.width / window.height );\n\t}\n\n\tuseEffect( () => {\n\t\tDimensions.addEventListener( 'change', onDimensionsChange );\n\n\t\treturn () => {\n\t\t\tDimensions.removeEventListener( 'change', onDimensionsChange );\n\t\t};\n\t}, [] );\n\n\tfunction getWideStyles() {\n\t\tif (\n\t\t\twindowRatio >= PIXEL_RATIO &&\n\t\t\twindowWidth < ALIGNMENT_BREAKPOINTS.large\n\t\t) {\n\t\t\treturn styles.wideLandscape;\n\t\t}\n\n\t\tif ( windowWidth <= ALIGNMENT_BREAKPOINTS.small ) {\n\t\t\treturn { maxWidth: windowWidth };\n\t\t}\n\n\t\tif (\n\t\t\twindowWidth >= ALIGNMENT_BREAKPOINTS.medium &&\n\t\t\twindowWidth < ALIGNMENT_BREAKPOINTS.wide\n\t\t) {\n\t\t\treturn styles.wideMedium;\n\t\t}\n\t}\n\n\treturn (\n\t\t<View style={ styles.container }>\n\t\t\t<View\n\t\t\t\tstyle={ [\n\t\t\t\t\treversed\n\t\t\t\t\t\t? styles.reversedCenteredContent\n\t\t\t\t\t\t: styles.centeredContent,\n\t\t\t\t\tstyle,\n\t\t\t\t\tstyles[ align ],\n\t\t\t\t\talign === WIDE_ALIGNMENTS.alignments.wide &&\n\t\t\t\t\t\tgetWideStyles(),\n\t\t\t\t] }\n\t\t\t>\n\t\t\t\t{ children }\n\t\t\t</View>\n\t\t</View>\n\t);\n};\n\nconst isContentMaxWidth = () => {\n\tconst { width } = Dimensions.get( 'window' );\n\treturn width > styles.centeredContent.maxWidth;\n};\n\nReadableContentView.isContentMaxWidth = isContentMaxWidth;\n\nexport default ReadableContentView;\n"]}