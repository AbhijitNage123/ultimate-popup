{"version":3,"sources":["@wordpress/components/src/mobile/keyboard-avoiding-view/index.ios.js"],"names":["KeyboardAvoidingView","IOSKeyboardAvoidingView","Animated","Keyboard","Dimensions","View","SafeArea","useEffect","useRef","useState","useResizeObserver","useIsFloatingKeyboard","styles","AnimatedKeyboardAvoidingView","createAnimatedComponent","MIN_HEIGHT","parentHeight","style","withAnimatedHeight","otherProps","resizeObserver","sizes","isKeyboardOpen","setIsKeyboardOpen","safeAreaBottomInset","setSafeAreaBottomInset","height","floatingKeyboard","animatedHeight","Value","current","fullHeight","get","keyboardVerticalOffset","getSafeAreaInsetsForRootView","then","safeAreaInsets","bottom","addEventListener","onSafeAreaInsetsUpdate","addListener","onKeyboardWillShow","onKeyboardWillHide","removeEventListener","removeListener","endCoordinates","setValue","duration","startCoordinates","keyboardIsOpenBreakpoint","animatedListenerId","value","timing","toValue","useNativeDriver","start","marginBottom","top","animatedChildStyle","defaultChildStyle","children"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tKeyboardAvoidingView as IOSKeyboardAvoidingView,\n\tAnimated,\n\tKeyboard,\n\tDimensions,\n\tView,\n} from 'react-native';\nimport SafeArea from 'react-native-safe-area';\n\n/**\n * WordPress dependencies\n */\nimport { useEffect, useRef, useState } from '@wordpress/element';\nimport { useResizeObserver } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport useIsFloatingKeyboard from '../utils/use-is-floating-keyboard';\nimport styles from './styles.scss';\n\nconst AnimatedKeyboardAvoidingView = Animated.createAnimatedComponent(\n\tIOSKeyboardAvoidingView\n);\n\nconst MIN_HEIGHT = 44;\n\nexport const KeyboardAvoidingView = ( {\n\tparentHeight,\n\tstyle,\n\twithAnimatedHeight = false,\n\t...otherProps\n} ) => {\n\tconst [ resizeObserver, sizes ] = useResizeObserver();\n\tconst [ isKeyboardOpen, setIsKeyboardOpen ] = useState( false );\n\tconst [ safeAreaBottomInset, setSafeAreaBottomInset ] = useState( 0 );\n\tconst { height = 0 } = sizes || {};\n\tconst floatingKeyboard = useIsFloatingKeyboard();\n\n\tconst animatedHeight = useRef( new Animated.Value( MIN_HEIGHT ) ).current;\n\n\tconst { height: fullHeight } = Dimensions.get( 'screen' );\n\tconst keyboardVerticalOffset = fullHeight - parentHeight;\n\n\tuseEffect( () => {\n\t\tSafeArea.getSafeAreaInsetsForRootView().then(\n\t\t\t( { safeAreaInsets } ) => {\n\t\t\t\tsetSafeAreaBottomInset( safeAreaInsets.bottom );\n\t\t\t}\n\t\t);\n\t\tSafeArea.addEventListener(\n\t\t\t'safeAreaInsetsForRootViewDidChange',\n\t\t\tonSafeAreaInsetsUpdate\n\t\t);\n\t\tKeyboard.addListener( 'keyboardWillShow', onKeyboardWillShow );\n\t\tKeyboard.addListener( 'keyboardWillHide', onKeyboardWillHide );\n\n\t\treturn () => {\n\t\t\tSafeArea.removeEventListener(\n\t\t\t\t'safeAreaInsetsForRootViewDidChange',\n\t\t\t\tonSafeAreaInsetsUpdate\n\t\t\t);\n\t\t\tKeyboard.removeListener( 'keyboardWillShow', onKeyboardWillShow );\n\t\t\tKeyboard.removeListener( 'keyboardWillHide', onKeyboardWillHide );\n\t\t};\n\t}, [] );\n\n\tfunction onSafeAreaInsetsUpdate( { safeAreaInsets } ) {\n\t\tsetSafeAreaBottomInset( safeAreaInsets.bottom );\n\t}\n\n\tfunction onKeyboardWillShow( { endCoordinates } ) {\n\t\tsetIsKeyboardOpen( true );\n\t\tanimatedHeight.setValue( endCoordinates.height + MIN_HEIGHT );\n\t}\n\n\tfunction onKeyboardWillHide( { duration, startCoordinates } ) {\n\t\t// The startCoordinates.height is set to wrong value when we use cmd + k for hide the keyboard (Have no idea why).\n\t\t// Because of that the `setIsKeyboardOpened` is not invoked and the state of keyboard is wrong.\n\t\t// The keyboardIsOpenBreakpoint use 100 as a fallback if the startCoordinates.height is too small (cmd + k case)\n\t\tconst keyboardIsOpenBreakpoint =\n\t\t\tstartCoordinates.height > 100 ? startCoordinates.height / 3 : 100;\n\t\tconst animatedListenerId = animatedHeight.addListener(\n\t\t\t( { value } ) => {\n\t\t\t\tif ( value < keyboardIsOpenBreakpoint ) {\n\t\t\t\t\tsetIsKeyboardOpen( false );\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\tAnimated.timing( animatedHeight, {\n\t\t\ttoValue: MIN_HEIGHT,\n\t\t\tduration,\n\t\t\tuseNativeDriver: false,\n\t\t} ).start( () => {\n\t\t\tanimatedHeight.removeListener( animatedListenerId );\n\t\t} );\n\t}\n\n\treturn (\n\t\t<AnimatedKeyboardAvoidingView\n\t\t\t{ ...otherProps }\n\t\t\tenabled={ ! floatingKeyboard }\n\t\t\tbehavior=\"padding\"\n\t\t\tkeyboardVerticalOffset={ keyboardVerticalOffset }\n\t\t\tstyle={\n\t\t\t\twithAnimatedHeight\n\t\t\t\t\t? [\n\t\t\t\t\t\t\tstyle,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\theight: animatedHeight,\n\t\t\t\t\t\t\t\tmarginBottom: isKeyboardOpen\n\t\t\t\t\t\t\t\t\t? -safeAreaBottomInset\n\t\t\t\t\t\t\t\t\t: 0,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  ]\n\t\t\t\t\t: style\n\t\t\t}\n\t\t>\n\t\t\t<View\n\t\t\t\tstyle={ [\n\t\t\t\t\t{\n\t\t\t\t\t\ttop: -height + MIN_HEIGHT,\n\t\t\t\t\t},\n\t\t\t\t\tstyles.animatedChildStyle,\n\t\t\t\t\t! withAnimatedHeight && styles.defaultChildStyle,\n\t\t\t\t] }\n\t\t\t>\n\t\t\t\t{ resizeObserver }\n\t\t\t\t{ otherProps.children }\n\t\t\t</View>\n\t\t</AnimatedKeyboardAvoidingView>\n\t);\n};\n\nexport default KeyboardAvoidingView;\n"]}