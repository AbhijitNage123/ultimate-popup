{"version":3,"sources":["@wordpress/components/src/duotone-picker/utils.js"],"names":["tinycolor","getDefaultColors","palette","length","map","color","brightness","getBrightness","reduce","min","max","current","getGradientFromCSSColors","colors","angle","l","stops","c","i","join","getColorStopsFromColors","position","getColorsFromColorStops","colorStops"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,SAAP,MAAsB,YAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA2BC,OAA3B,EAAqC;AAC3C;AACA,MAAK,CAAEA,OAAF,IAAaA,OAAO,CAACC,MAAR,GAAiB,CAAnC,EAAuC,OAAO,CAAE,MAAF,EAAU,MAAV,CAAP;AAEvC,SAAOD,OAAO,CACZE,GADK,CACA,CAAE;AAAEC,IAAAA;AAAF,GAAF,MAAmB;AACxBA,IAAAA,KADwB;AAExBC,IAAAA,UAAU,EAAEN,SAAS,CAAEK,KAAF,CAAT,CAAmBE,aAAnB,KAAqC;AAFzB,GAAnB,CADA,EAKLC,MALK,CAML,CAAE,CAAEC,GAAF,EAAOC,GAAP,CAAF,EAAgBC,OAAhB,KAA6B;AAC5B,WAAO,CACNA,OAAO,CAACL,UAAR,IAAsBG,GAAG,CAACH,UAA1B,GAAuCK,OAAvC,GAAiDF,GAD3C,EAENE,OAAO,CAACL,UAAR,IAAsBI,GAAG,CAACJ,UAA1B,GAAuCK,OAAvC,GAAiDD,GAF3C,CAAP;AAIA,GAXI,EAYL,CAAE;AAAEJ,IAAAA,UAAU,EAAE;AAAd,GAAF,EAAqB;AAAEA,IAAAA,UAAU,EAAE;AAAd,GAArB,CAZK,EAcLF,GAdK,CAcA,CAAE;AAAEC,IAAAA;AAAF,GAAF,KAAiBA,KAdjB,CAAP;AAeA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASO,wBAAT,CAAmCC,MAAM,GAAG,EAA5C,EAAgDC,KAAK,GAAG,OAAxD,EAAkE;AACxE,QAAMC,CAAC,GAAG,MAAMF,MAAM,CAACV,MAAvB;AAEA,QAAMa,KAAK,GAAGH,MAAM,CAClBT,GADY,CACP,CAAEa,CAAF,EAAKC,CAAL,KAAa,GAAGD,CAAG,IAAIC,CAAC,GAAGH,CAAG,MAAME,CAAG,IAAI,CAAEC,CAAC,GAAG,CAAN,IAAYH,CAAG,GADnD,EAEZI,IAFY,CAEN,IAFM,CAAd;AAIA,SAAQ,oBAAoBL,KAAO,KAAKE,KAAO,IAA/C;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,uBAAT,CAAkCP,MAAlC,EAA2C;AACjD,SAAOA,MAAM,CAACT,GAAP,CAAY,CAAEC,KAAF,EAASa,CAAT,MAAkB;AACpCG,IAAAA,QAAQ,EAAIH,CAAC,GAAG,GAAN,IAAgBL,MAAM,CAACV,MAAP,GAAgB,CAAhC,CAD0B;AAEpCE,IAAAA;AAFoC,GAAlB,CAAZ,CAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASiB,uBAAT,CAAkCC,UAAU,GAAG,EAA/C,EAAoD;AAC1D,SAAOA,UAAU,CAACnB,GAAX,CAAgB,CAAE;AAAEC,IAAAA;AAAF,GAAF,KAAiBA,KAAjC,CAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport tinycolor from 'tinycolor2';\n\n/**\n * Object representation for a color.\n *\n * @typedef {Object} RGBColor\n * @property {number} r Red component of the color in the range [0,1].\n * @property {number} g Green component of the color in the range [0,1].\n * @property {number} b Blue component of the color in the range [0,1].\n */\n\n/**\n * Calculate the brightest and darkest values from a color palette.\n *\n * @param {Object[]} palette Color palette for the theme.\n *\n * @return {string[]} Tuple of the darkest color and brightest color.\n */\nexport function getDefaultColors( palette ) {\n\t// A default dark and light color are required.\n\tif ( ! palette || palette.length < 2 ) return [ '#000', '#fff' ];\n\n\treturn palette\n\t\t.map( ( { color } ) => ( {\n\t\t\tcolor,\n\t\t\tbrightness: tinycolor( color ).getBrightness() / 255,\n\t\t} ) )\n\t\t.reduce(\n\t\t\t( [ min, max ], current ) => {\n\t\t\t\treturn [\n\t\t\t\t\tcurrent.brightness <= min.brightness ? current : min,\n\t\t\t\t\tcurrent.brightness >= max.brightness ? current : max,\n\t\t\t\t];\n\t\t\t},\n\t\t\t[ { brightness: 1 }, { brightness: 0 } ]\n\t\t)\n\t\t.map( ( { color } ) => color );\n}\n\n/**\n * Generate a duotone gradient from a list of colors.\n *\n * @param {string[]} colors CSS color strings.\n * @param {string}   angle  CSS gradient angle.\n *\n * @return {string} CSS gradient string for the duotone swatch.\n */\nexport function getGradientFromCSSColors( colors = [], angle = '90deg' ) {\n\tconst l = 100 / colors.length;\n\n\tconst stops = colors\n\t\t.map( ( c, i ) => `${ c } ${ i * l }%, ${ c } ${ ( i + 1 ) * l }%` )\n\t\t.join( ', ' );\n\n\treturn `linear-gradient( ${ angle }, ${ stops } )`;\n}\n\n/**\n * Convert a color array to an array of color stops.\n *\n * @param {string[]} colors CSS colors array\n *\n * @return {Object[]} Color stop information.\n */\nexport function getColorStopsFromColors( colors ) {\n\treturn colors.map( ( color, i ) => ( {\n\t\tposition: ( i * 100 ) / ( colors.length - 1 ),\n\t\tcolor,\n\t} ) );\n}\n\n/**\n * Convert a color stop array to an array colors.\n *\n * @param {Object[]} colorStops Color stop information.\n *\n * @return {string[]} CSS colors array.\n */\nexport function getColorsFromColorStops( colorStops = [] ) {\n\treturn colorStops.map( ( { color } ) => color );\n}\n"]}