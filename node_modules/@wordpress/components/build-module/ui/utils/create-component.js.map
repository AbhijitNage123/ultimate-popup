{"version":3,"sources":["@wordpress/components/src/ui/utils/create-component.tsx"],"names":["contextConnect","View","createComponent","as","name","useHook","memo","Component","props","forwardedRef","otherProps","displayName"],"mappings":";;;AAAA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA,SAASA,cAAT,QAA+B,YAA/B,C,CACA;;AAKA,SAASC,IAAT,QAAqB,YAArB;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,CAG5B;AACFC,EAAAA,EADE;AAEFC,EAAAA,IAFE;AAGFC,EAAAA,OAHE;AAIFC,EAAAA,IAAI,GAAG;AAJL,CAH4B,KAQ6B;AAC3D,WAASC,SAAT,CAAoBC,KAApB,EAA8BC,YAA9B,EAAyD;AACxD,UAAMC,UAAU,GAAGL,OAAO,CAAEG,KAAF,CAA1B;AAEA,WACC,cAAC,IAAD;AAAM,MAAA,EAAE,EAAGL,EAAE,IAAI;AAAjB,OAA8BO,UAA9B;AAA2C,MAAA,GAAG,EAAGD;AAAjD,OADD;AAGA;;AAEDF,EAAAA,SAAS,CAACI,WAAV,GAAwBP,IAAxB;AAEA,SAAOJ,cAAc,CAAEO,SAAF,EAAaH,IAAb,EAAmB;AAAEE,IAAAA;AAAF,GAAnB,CAArB;AACA,CApBM","sourcesContent":["/**\n * External dependencies\n */\n// eslint-disable-next-line no-restricted-imports\nimport type { Ref } from 'react';\nimport type { As } from 'reakit-utils/types';\n\n/**\n * Internal dependencies\n */\nimport { contextConnect } from '../context';\n// eslint-disable-next-line no-duplicate-imports\nimport type {\n\tPolymorphicComponentProps,\n\tPolymorphicComponentFromProps,\n} from '../context';\nimport { View } from '../../view';\n\ninterface Options<\n\tA extends As,\n\tP extends PolymorphicComponentProps< {}, A, any >\n> {\n\tas: A;\n\tname: string;\n\tuseHook: ( props: P ) => any;\n\tmemo?: boolean;\n}\n\n/**\n * Factory that creates a React component from a hook\n *\n * @param  options\n * @param  options.as      The element to render for the component.\n * @param  options.name    The name of the component.\n * @param  options.useHook The hook to use for the component\n * @param  options.memo    Whether to memo the component.\n * @return A polymorphic component that uses the hook to process props.\n */\nexport const createComponent = <\n\tA extends As,\n\tP extends PolymorphicComponentProps< {}, A, any >\n>( {\n\tas,\n\tname,\n\tuseHook,\n\tmemo = false,\n}: Options< A, P > ): PolymorphicComponentFromProps< P > => {\n\tfunction Component( props: P, forwardedRef: Ref< any > ) {\n\t\tconst otherProps = useHook( props );\n\n\t\treturn (\n\t\t\t<View as={ as || 'div' } { ...otherProps } ref={ forwardedRef } />\n\t\t);\n\t}\n\n\tComponent.displayName = name;\n\n\treturn contextConnect( Component, name, { memo } );\n};\n"]}