"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = Button;
exports.default = void 0;

var _element = require("@wordpress/element");

var _reactNative = require("react-native");

var _lodash = require("lodash");

var _compose = require("@wordpress/compose");

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _icon = _interopRequireDefault(require("../icon"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const isAndroid = _reactNative.Platform.OS === 'android';
const marginBottom = isAndroid ? -0.5 : 0;
const marginLeft = -3;

const styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    padding: 3,
    justifyContent: 'center',
    alignItems: 'center'
  },
  buttonInactive: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center'
  },
  fixedRatio: {
    aspectRatio: 1
  },
  buttonActive: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 6,
    borderColor: '#2e4453',
    backgroundColor: '#2e4453'
  },
  subscriptInactive: {
    color: '#7b9ab1',
    // $toolbar-button
    fontWeight: 'bold',
    fontSize: 13,
    alignSelf: 'flex-end',
    marginLeft,
    marginBottom
  },
  subscriptInactiveDark: {
    color: '#a7aaad' // $gray_20

  },
  subscriptActive: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 13,
    alignSelf: 'flex-end',
    marginLeft,
    marginBottom
  }
});

function Button(props) {
  const {
    children,
    onClick,
    onLongPress,
    disabled,
    hint,
    fixedRatio = true,
    isPressed,
    'aria-disabled': ariaDisabled,
    'data-subscript': subscript,
    testID,
    icon,
    iconSize,
    showTooltip,
    label,
    shortcut,
    tooltipPosition
  } = props;
  const preferredColorScheme = (0, _compose.usePreferredColorScheme)();
  const isDisabled = ariaDisabled || disabled;
  const buttonViewStyle = {
    opacity: isDisabled ? 0.3 : 1,
    ...(fixedRatio && styles.fixedRatio),
    ...(isPressed ? styles.buttonActive : styles.buttonInactive)
  };
  const states = [];

  if (isPressed) {
    states.push('selected');
  }

  if (isDisabled) {
    states.push('disabled');
  }

  const subscriptInactive = (0, _compose.usePreferredColorSchemeStyle)(styles.subscriptInactive, styles.subscriptInactiveDark);

  const newChildren = _element.Children.map(children, child => {
    return child ? (0, _element.cloneElement)(child, {
      colorScheme: preferredColorScheme,
      isPressed
    }) : child;
  }); // Should show the tooltip if...


  const shouldShowTooltip = !isDisabled && ( // an explicit tooltip is passed or...
  showTooltip && label || // there's a shortcut or...
  shortcut || // there's a label and...
  !!label && ( // the children are empty and...
  !children || (0, _lodash.isArray)(children) && !children.length) && // the tooltip is not explicitly disabled.
  false !== showTooltip);
  const newIcon = icon ? (0, _element.cloneElement)((0, _element.createElement)(_icon.default, {
    icon: icon,
    size: iconSize
  }), {
    colorScheme: preferredColorScheme,
    isPressed
  }) : null;
  const element = (0, _element.createElement)(_reactNative.TouchableOpacity, {
    activeOpacity: 0.7,
    accessible: true,
    accessibilityLabel: label,
    accessibilityStates: states,
    accessibilityRole: 'button',
    accessibilityHint: hint,
    onPress: onClick,
    onLongPress: onLongPress,
    style: styles.container,
    disabled: isDisabled,
    testID: testID
  }, (0, _element.createElement)(_reactNative.View, {
    style: buttonViewStyle
  }, (0, _element.createElement)(_reactNative.View, {
    style: {
      flexDirection: 'row'
    }
  }, newIcon, newChildren, subscript && (0, _element.createElement)(_reactNative.Text, {
    style: isPressed ? styles.subscriptActive : subscriptInactive
  }, subscript))));

  if (!shouldShowTooltip) {
    return element;
  }

  return (0, _element.createElement)(_tooltip.default, {
    text: label,
    shortcut: shortcut,
    position: tooltipPosition,
    visible: showTooltip === true
  }, element);
}

var _default = Button;
exports.default = _default;
//# sourceMappingURL=index.native.js.map