"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DropZoneComponent;

var _element = require("@wordpress/element");

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _dom = require("@wordpress/dom");

var _compose = require("@wordpress/compose");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
function DropZoneComponent({
  className,
  label,
  onFilesDrop,
  onHTMLDrop,
  onDrop
}) {
  const [isDraggingOverDocument, setIsDraggingOverDocument] = (0, _element.useState)();
  const [isDraggingOverElement, setIsDraggingOverElement] = (0, _element.useState)();
  const [type, setType] = (0, _element.useState)();
  const ref = (0, _compose.__experimentalUseDropZone)({
    onDrop(event) {
      const files = (0, _dom.getFilesFromDataTransfer)(event.dataTransfer);
      const html = event.dataTransfer.getData('text/html');

      if (files.length && onFilesDrop) {
        onFilesDrop(files);
      } else if (html && onHTMLDrop) {
        onHTMLDrop(html);
      } else if (onDrop) {
        onDrop(event);
      }
    },

    onDragStart(event) {
      setIsDraggingOverDocument(true);
      let _type = 'default';

      if ( // Check for the types because sometimes the files themselves
      // are only available on drop.
      (0, _lodash.includes)(event.dataTransfer.types, 'Files') || (0, _dom.getFilesFromDataTransfer)(event.dataTransfer).length > 0) {
        _type = 'file';
      } else if ((0, _lodash.includes)(event.dataTransfer.types, 'text/html')) {
        _type = 'html';
      }

      setType(_type);
    },

    onDragEnd() {
      setIsDraggingOverDocument(false);
      setType();
    },

    onDragEnter() {
      setIsDraggingOverElement(true);
    },

    onDragLeave() {
      setIsDraggingOverElement(false);
    }

  });
  let children;

  if (isDraggingOverElement) {
    children = (0, _element.createElement)("div", {
      className: "components-drop-zone__content"
    }, (0, _element.createElement)(_icons.Icon, {
      icon: _icons.upload,
      className: "components-drop-zone__content-icon"
    }), (0, _element.createElement)("span", {
      className: "components-drop-zone__content-text"
    }, label ? label : (0, _i18n.__)('Drop files to upload')));
  }

  const classes = (0, _classnames.default)('components-drop-zone', className, {
    'is-active': (isDraggingOverDocument || isDraggingOverElement) && (type === 'file' && onFilesDrop || type === 'html' && onHTMLDrop || type === 'default' && onDrop),
    'is-dragging-over-document': isDraggingOverDocument,
    'is-dragging-over-element': isDraggingOverElement,
    [`is-dragging-${type}`]: !!type
  });
  return (0, _element.createElement)("div", {
    ref: ref,
    className: classes
  }, children);
}
//# sourceMappingURL=index.js.map