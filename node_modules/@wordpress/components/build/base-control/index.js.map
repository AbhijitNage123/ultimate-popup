{"version":3,"sources":["@wordpress/components/src/base-control/index.js"],"names":["BaseControl","id","label","hideLabelFromVision","help","className","children","VisualLabel"],"mappings":";;;;;;;;;;;AAGA;;AAKA;;AACA;;AATA;AACA;AACA;;AAGA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAASA,WAAT,CAAsB;AACrBC,EAAAA,EADqB;AAErBC,EAAAA,KAFqB;AAGrBC,EAAAA,mBAHqB;AAIrBC,EAAAA,IAJqB;AAKrBC,EAAAA,SALqB;AAMrBC,EAAAA;AANqB,CAAtB,EAOI;AACH,SACC,4BAAC,0BAAD;AACC,IAAA,SAAS,EAAG,yBAAY,yBAAZ,EAAuCD,SAAvC;AADb,KAGC,4BAAC,8BAAD;AAAa,IAAA,SAAS,EAAC;AAAvB,KACGH,KAAK,IACND,EADC,KAECE,mBAAmB,GACpB,4BAAC,uBAAD;AAAgB,IAAA,EAAE,EAAC,OAAnB;AAA2B,IAAA,OAAO,EAAGF;AAArC,KACGC,KADH,CADoB,GAKpB,4BAAC,8BAAD;AACC,IAAA,SAAS,EAAC,gCADX;AAEC,IAAA,OAAO,EAAGD;AAFX,KAIGC,KAJH,CAPA,CADH,EAeGA,KAAK,IACN,CAAED,EADD,KAECE,mBAAmB,GACpB,4BAAC,uBAAD;AAAgB,IAAA,EAAE,EAAC;AAAnB,KAA6BD,KAA7B,CADoB,GAGpB,4BAAC,WAAD,CAAa,WAAb,QACGA,KADH,CALA,CAfH,EAwBGI,QAxBH,CAHD,EA6BG,CAAC,CAAEF,IAAH,IACD,4BAAC,6BAAD;AACC,IAAA,EAAE,EAAGH,EAAE,GAAG,QADX;AAEC,IAAA,SAAS,EAAC;AAFX,KAIGG,IAJH,CA9BF,CADD;AAwCA;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACAJ,WAAW,CAACO,WAAZ,GAA0B,CAAE;AAAEF,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAF,KAA+B;AACxDD,EAAAA,SAAS,GAAG,yBAAY,gCAAZ,EAA8CA,SAA9C,CAAZ;AACA,SAAO;AAAM,IAAA,SAAS,EAAGA;AAAlB,KAAgCC,QAAhC,CAAP;AACA,CAHD;;eAKeN,W","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * Internal dependencies\n */\nimport VisuallyHidden from '../visually-hidden';\nimport {\n\tWrapper,\n\tStyledField,\n\tStyledLabel,\n\tStyledHelp,\n} from './styles/base-control-styles';\n\n/**\n * @typedef Props\n * @property {string}                    id                    The id of the element to which labels and help text are being generated.\n *                                                             That element should be passed as a child.\n * @property {import('react').ReactNode} help                  If this property is added, a help text will be\n *                                                             generated using help property as the content.\n * @property {import('react').ReactNode} label                 If this property is added, a label will be generated\n *                                                             using label property as the content.\n * @property {boolean}                   [hideLabelFromVision] If true, the label will only be visible to screen readers.\n * @property {string}                    [className]           The class that will be added with \"components-base-control\" to the\n *                                                             classes of the wrapper div. If no className is passed only\n *                                                             components-base-control is used.\n * @property {import('react').ReactNode} [children]            The content to be displayed within\n *                                                             the BaseControl.\n */\n\n/**\n * @param {Props} props\n * @return {JSX.Element} Element\n */\nfunction BaseControl( {\n\tid,\n\tlabel,\n\thideLabelFromVision,\n\thelp,\n\tclassName,\n\tchildren,\n} ) {\n\treturn (\n\t\t<Wrapper\n\t\t\tclassName={ classnames( 'components-base-control', className ) }\n\t\t>\n\t\t\t<StyledField className=\"components-base-control__field\">\n\t\t\t\t{ label &&\n\t\t\t\t\tid &&\n\t\t\t\t\t( hideLabelFromVision ? (\n\t\t\t\t\t\t<VisuallyHidden as=\"label\" htmlFor={ id }>\n\t\t\t\t\t\t\t{ label }\n\t\t\t\t\t\t</VisuallyHidden>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<StyledLabel\n\t\t\t\t\t\t\tclassName=\"components-base-control__label\"\n\t\t\t\t\t\t\thtmlFor={ id }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ label }\n\t\t\t\t\t\t</StyledLabel>\n\t\t\t\t\t) ) }\n\t\t\t\t{ label &&\n\t\t\t\t\t! id &&\n\t\t\t\t\t( hideLabelFromVision ? (\n\t\t\t\t\t\t<VisuallyHidden as=\"label\">{ label }</VisuallyHidden>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<BaseControl.VisualLabel>\n\t\t\t\t\t\t\t{ label }\n\t\t\t\t\t\t</BaseControl.VisualLabel>\n\t\t\t\t\t) ) }\n\t\t\t\t{ children }\n\t\t\t</StyledField>\n\t\t\t{ !! help && (\n\t\t\t\t<StyledHelp\n\t\t\t\t\tid={ id + '__help' }\n\t\t\t\t\tclassName=\"components-base-control__help\"\n\t\t\t\t>\n\t\t\t\t\t{ help }\n\t\t\t\t</StyledHelp>\n\t\t\t) }\n\t\t</Wrapper>\n\t);\n}\n\n/**\n * @typedef VisualLabelProps\n * @property {string}                    [className] Class name\n * @property {import('react').ReactNode} [children]  Children\n */\n\n/**\n * @param {VisualLabelProps} Props\n * @return {JSX.Element} Element\n */\nBaseControl.VisualLabel = ( { className, children } ) => {\n\tclassName = classnames( 'components-base-control__label', className );\n\treturn <span className={ className }>{ children }</span>;\n};\n\nexport default BaseControl;\n"]}