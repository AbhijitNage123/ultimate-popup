"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCard = useCard;

var _css = require("@emotion/css");

var _deprecated = _interopRequireDefault(require("@wordpress/deprecated"));

var _element = require("@wordpress/element");

var _context = require("../../ui/context");

var _surface = require("../../surface");

var styles = _interopRequireWildcard(require("../styles"));

/**
 * External dependencies
 */
// Disable reason: Temporarily disable for existing usages
// until we remove them as part of https://github.com/WordPress/gutenberg/issues/30503#deprecating-emotion-css
// eslint-disable-next-line no-restricted-imports

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * @param {import('../../ui/context').PolymorphicComponentProps<import('../types').Props, 'div'>} props
 */
function useDeprecatedProps({
  elevation,
  isElevated,
  ...otherProps
}) {
  /**@type {import('../../ui/context').PolymorphicComponentProps<import('../types').Props, 'div'>} */
  const propsToReturn = { ...otherProps
  };
  let computedElevation = elevation;

  if (isElevated) {
    var _computedElevation;

    (0, _deprecated.default)('Card isElevated prop', {
      since: '5.9',
      alternative: 'elevation'
    });
    (_computedElevation = computedElevation) !== null && _computedElevation !== void 0 ? _computedElevation : computedElevation = 2;
  } // The `elevation` prop should only be passed when it's not `undefined`,
  // otherwise it will override the value that gets derived from `useContextSystem`.


  if (typeof computedElevation !== 'undefined') {
    propsToReturn.elevation = computedElevation;
  }

  return propsToReturn;
}
/**
 * @param {import('../../ui/context').PolymorphicComponentProps<import('../types').Props, 'div'>} props
 */


function useCard(props) {
  const {
    className,
    elevation = 0,
    isBorderless = false,
    isRounded = true,
    size = 'medium',
    ...otherProps
  } = (0, _context.useContextSystem)(useDeprecatedProps(props), 'Card');
  const classes = (0, _element.useMemo)(() => {
    return (0, _css.cx)(styles.Card, isBorderless && styles.boxShadowless, isRounded && styles.rounded, // This classname is added for legacy compatibility reasons.
    'components-card', className);
  }, [className, isBorderless, isRounded]);
  const surfaceProps = (0, _surface.useSurface)({ ...otherProps,
    className: classes
  });
  return { ...surfaceProps,
    elevation,
    isBorderless,
    isRounded,
    size
  };
}
//# sourceMappingURL=hook.js.map