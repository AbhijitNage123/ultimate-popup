{"version":3,"sources":["@wordpress/components/src/ui/context/use-context-system.js"],"names":["useContextSystem","props","namespace","contextSystemProps","contextProps","finalComponentProps","_overrides","overrideProps","otherContextProps","initialMergedProps","Object","entries","length","assign","classes","className","rendered","renderChildren","children","key"],"mappings":";;;;;;;;;AAMA;;AAKA;;AAKA;;AACA;;AACA;;AAlBA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,gBAAT,CAA2BC,KAA3B,EAAkCC,SAAlC,EAA8C;AACpD,QAAMC,kBAAkB,GAAG,kDAA3B;;AACA,MAAK,OAAOD,SAAP,KAAqB,WAA1B,EAAwC;AACvC,mHAAM,8CAAN;AACA;;AAED,QAAME,YAAY,GAAG,CAAAD,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,YAAAA,kBAAkB,CAAID,SAAJ,CAAlB,KAAqC,EAA1D;AAEA;;AACA;AACA;;AACA,QAAMG,mBAAmB,GAAG,EAC3B,GAAG,mCADwB;AAE3B,OAAG,yBAAcH,SAAd;AAFwB,GAA5B;AAIA;;AAEA,QAAM;AAAEI,IAAAA,UAAU,EAAEC,aAAd;AAA6B,OAAGC;AAAhC,MAAsDJ,YAA5D;AAEA,QAAMK,kBAAkB,GAAGC,MAAM,CAACC,OAAP,CAAgBH,iBAAhB,EAAoCI,MAApC,GACxBF,MAAM,CAACG,MAAP,CAAe,EAAf,EAAmBL,iBAAnB,EAAsCP,KAAtC,CADwB,GAExBA,KAFH;AAIA,QAAMa,OAAO,GAAG,aACf,0DAA2BZ,SAA3B,CADe,EAEfD,KAAK,CAACc,SAFS,CAAhB,CAvBoD,CA4BpD;;AACA,QAAMC,QAAQ,GACb,OAAOP,kBAAkB,CAACQ,cAA1B,KAA6C,UAA7C,GACGR,kBAAkB,CAACQ,cAAnB,CAAmCR,kBAAnC,CADH,GAEGA,kBAAkB,CAACS,QAHvB;;AAKA,OAAM,MAAMC,GAAZ,IAAmBV,kBAAnB,EAAwC;AACvC;AACAJ,IAAAA,mBAAmB,CAAEc,GAAF,CAAnB,GAA6BV,kBAAkB,CAAEU,GAAF,CAA/C;AACA;;AAED,OAAM,MAAMA,GAAZ,IAAmBZ,aAAnB,EAAmC;AAClC;AACAF,IAAAA,mBAAmB,CAAEc,GAAF,CAAnB,GAA6BZ,aAAa,CAAEY,GAAF,CAA1C;AACA,GA1CmD,CA4CpD;;;AACAd,EAAAA,mBAAmB,CAACa,QAApB,GAA+BF,QAA/B;AACAX,EAAAA,mBAAmB,CAACU,SAApB,GAAgCD,OAAhC;AAEA,SAAOT,mBAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\n// Disable reason: Temporarily disable for existing usages\n// until we remove them as part of https://github.com/WordPress/gutenberg/issues/30503#deprecating-emotion-css\n// eslint-disable-next-line no-restricted-imports\nimport { cx } from '@emotion/css';\n\n/**\n * WordPress dependencies\n */\nimport warn from '@wordpress/warning';\n\n/**\n * Internal dependencies\n */\nimport { useComponentsContext } from './context-system-provider';\nimport { getNamespace, getConnectedNamespace } from './utils';\nimport { getStyledClassNameFromKey } from './get-styled-class-name-from-key';\n\n/**\n * @template TProps\n * @typedef {TProps & { className: string; }} ConnectedProps\n */\n\n/**\n * Custom hook that derives registered props from the Context system.\n * These derived props are then consolidated with incoming component props.\n *\n * @template {{ className?: string }} P\n * @param {P}      props     Incoming props from the component.\n * @param {string} namespace The namespace to register and to derive context props from.\n * @return {ConnectedProps<P>} The connected props.\n */\nexport function useContextSystem( props, namespace ) {\n\tconst contextSystemProps = useComponentsContext();\n\tif ( typeof namespace === 'undefined' ) {\n\t\twarn( 'useContextSystem: Please provide a namespace' );\n\t}\n\n\tconst contextProps = contextSystemProps?.[ namespace ] || {};\n\n\t/* eslint-disable jsdoc/no-undefined-types */\n\t/** @type {ConnectedProps<P>} */\n\t// @ts-ignore We fill in the missing properties below\n\tconst finalComponentProps = {\n\t\t...getConnectedNamespace(),\n\t\t...getNamespace( namespace ),\n\t};\n\t/* eslint-enable jsdoc/no-undefined-types */\n\n\tconst { _overrides: overrideProps, ...otherContextProps } = contextProps;\n\n\tconst initialMergedProps = Object.entries( otherContextProps ).length\n\t\t? Object.assign( {}, otherContextProps, props )\n\t\t: props;\n\n\tconst classes = cx(\n\t\tgetStyledClassNameFromKey( namespace ),\n\t\tprops.className\n\t);\n\n\t// Provides the ability to customize the render of the component.\n\tconst rendered =\n\t\ttypeof initialMergedProps.renderChildren === 'function'\n\t\t\t? initialMergedProps.renderChildren( initialMergedProps )\n\t\t\t: initialMergedProps.children;\n\n\tfor ( const key in initialMergedProps ) {\n\t\t// @ts-ignore filling in missing props\n\t\tfinalComponentProps[ key ] = initialMergedProps[ key ];\n\t}\n\n\tfor ( const key in overrideProps ) {\n\t\t// @ts-ignore filling in missing props\n\t\tfinalComponentProps[ key ] = overrideProps[ key ];\n\t}\n\n\t// @ts-ignore\n\tfinalComponentProps.children = rendered;\n\tfinalComponentProps.className = classes;\n\n\treturn finalComponentProps;\n}\n"]}