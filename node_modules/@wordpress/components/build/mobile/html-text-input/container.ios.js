"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _reactNative = require("react-native");

var _keyboardAvoidingView = _interopRequireDefault(require("../keyboard-avoiding-view"));

var _styleIos = _interopRequireDefault(require("./style.ios.scss"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
class HTMLInputContainer extends _element.Component {
  constructor() {
    super(...arguments);
    this.panResponder = _reactNative.PanResponder.create({
      onStartShouldSetPanResponderCapture: () => true,
      onPanResponderMove: (e, gestureState) => {
        if (gestureState.dy > 100 && gestureState.dy < 110) {
          //Keyboard.dismiss() and this.textInput.blur() are not working here
          //They require to know the currentlyFocusedID under the hood but
          //during this gesture there's no currentlyFocusedID
          _reactNative.UIManager.blur(e.target);
        }
      }
    });
  }

  render() {
    return (0, _element.createElement)(_keyboardAvoidingView.default, (0, _extends2.default)({
      style: _styleIos.default.keyboardAvoidingView
    }, this.panResponder.panHandlers, {
      parentHeight: this.props.parentHeight
    }), this.props.children);
  }

}

HTMLInputContainer.scrollEnabled = true;
var _default = HTMLInputContainer;
exports.default = _default;
//# sourceMappingURL=container.ios.js.map