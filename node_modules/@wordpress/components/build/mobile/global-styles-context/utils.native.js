"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBlockPaddings = getBlockPaddings;
exports.getBlockColors = getBlockColors;
exports.parseColorVariables = parseColorVariables;
exports.getGlobalStyles = getGlobalStyles;
exports.BLOCK_STYLE_ATTRIBUTES = void 0;

var _lodash = require("lodash");

/**
 * External dependencies
 */
const BLOCK_STYLE_ATTRIBUTES = ['textColor', 'backgroundColor', 'style']; // Mapping style properties name to native

exports.BLOCK_STYLE_ATTRIBUTES = BLOCK_STYLE_ATTRIBUTES;
const BLOCK_STYLE_ATTRIBUTES_MAPPING = {
  textColor: 'color',
  text: 'color',
  background: 'backgroundColor',
  link: 'linkColor',
  placeholder: 'placeholderColor'
};
const PADDING = 12; // $solid-border-space

const UNKNOWN_VALUE = 'undefined';

function getBlockPaddings(mergedStyle, wrapperPropsStyle, blockStyleAttributes, blockColors) {
  const blockPaddings = {};

  if (!mergedStyle.padding && (wrapperPropsStyle !== null && wrapperPropsStyle !== void 0 && wrapperPropsStyle.backgroundColor || blockStyleAttributes !== null && blockStyleAttributes !== void 0 && blockStyleAttributes.backgroundColor || blockColors !== null && blockColors !== void 0 && blockColors.backgroundColor)) {
    blockPaddings.padding = PADDING;
    return blockPaddings;
  } // Prevent adding extra paddings to inner blocks without background colors


  if (mergedStyle !== null && mergedStyle !== void 0 && mergedStyle.padding && !(wrapperPropsStyle !== null && wrapperPropsStyle !== void 0 && wrapperPropsStyle.backgroundColor) && !(blockStyleAttributes !== null && blockStyleAttributes !== void 0 && blockStyleAttributes.backgroundColor) && !(blockColors !== null && blockColors !== void 0 && blockColors.backgroundColor)) {
    blockPaddings.padding = undefined;
  }

  return blockPaddings;
}

function getBlockColors(blockStyleAttributes, defaultColors, blockName, baseGlobalStyles) {
  var _blockStyleAttributes, _baseGlobalStyles$blo, _baseGlobalStyles$sty, _baseGlobalStyles$sty2;

  const blockStyles = {};
  const customBlockStyles = (blockStyleAttributes === null || blockStyleAttributes === void 0 ? void 0 : (_blockStyleAttributes = blockStyleAttributes.style) === null || _blockStyleAttributes === void 0 ? void 0 : _blockStyleAttributes.color) || {};
  const blockGlobalStyles = baseGlobalStyles === null || baseGlobalStyles === void 0 ? void 0 : (_baseGlobalStyles$blo = baseGlobalStyles.blocks) === null || _baseGlobalStyles$blo === void 0 ? void 0 : _baseGlobalStyles$blo[blockName]; // Global styles colors

  if (blockGlobalStyles !== null && blockGlobalStyles !== void 0 && blockGlobalStyles.color) {
    Object.entries(blockGlobalStyles.color).forEach(([key, value]) => {
      const styleKey = BLOCK_STYLE_ATTRIBUTES_MAPPING[key];

      if (styleKey && value !== UNKNOWN_VALUE) {
        var _customBlockStyles$ke;

        const color = (_customBlockStyles$ke = customBlockStyles[key]) !== null && _customBlockStyles$ke !== void 0 ? _customBlockStyles$ke : value;
        blockStyles[styleKey] = color;
      }
    });
  } else if (baseGlobalStyles !== null && baseGlobalStyles !== void 0 && (_baseGlobalStyles$sty = baseGlobalStyles.styles) !== null && _baseGlobalStyles$sty !== void 0 && (_baseGlobalStyles$sty2 = _baseGlobalStyles$sty.color) !== null && _baseGlobalStyles$sty2 !== void 0 && _baseGlobalStyles$sty2.text) {
    var _baseGlobalStyles$sty3, _baseGlobalStyles$sty4;

    blockStyles[BLOCK_STYLE_ATTRIBUTES_MAPPING.text] = baseGlobalStyles === null || baseGlobalStyles === void 0 ? void 0 : (_baseGlobalStyles$sty3 = baseGlobalStyles.styles) === null || _baseGlobalStyles$sty3 === void 0 ? void 0 : (_baseGlobalStyles$sty4 = _baseGlobalStyles$sty3.color) === null || _baseGlobalStyles$sty4 === void 0 ? void 0 : _baseGlobalStyles$sty4.text;
  } // Global styles elements


  if (blockGlobalStyles !== null && blockGlobalStyles !== void 0 && blockGlobalStyles.elements) {
    var _blockGlobalStyles$el, _blockGlobalStyles$el2, _blockGlobalStyles$el3;

    const linkColor = (_blockGlobalStyles$el = blockGlobalStyles.elements) === null || _blockGlobalStyles$el === void 0 ? void 0 : (_blockGlobalStyles$el2 = _blockGlobalStyles$el.link) === null || _blockGlobalStyles$el2 === void 0 ? void 0 : (_blockGlobalStyles$el3 = _blockGlobalStyles$el2.color) === null || _blockGlobalStyles$el3 === void 0 ? void 0 : _blockGlobalStyles$el3.text;
    const styleKey = BLOCK_STYLE_ATTRIBUTES_MAPPING.link;

    if (styleKey && linkColor && linkColor !== UNKNOWN_VALUE) {
      blockStyles[styleKey] = linkColor;
    }
  } // Custom colors


  Object.entries(blockStyleAttributes).forEach(([key, value]) => {
    const isCustomColor = (0, _lodash.startsWith)(value, '#');
    let styleKey = key;

    if (BLOCK_STYLE_ATTRIBUTES_MAPPING[styleKey]) {
      styleKey = BLOCK_STYLE_ATTRIBUTES_MAPPING[styleKey];
    }

    if (!isCustomColor) {
      const mappedColor = (0, _lodash.find)(defaultColors, {
        slug: value
      });

      if (mappedColor) {
        blockStyles[styleKey] = mappedColor.color;
      }
    } else {
      blockStyles[styleKey] = value;
    }
  }); // Color placeholder

  if (blockStyles !== null && blockStyles !== void 0 && blockStyles.color) {
    blockStyles[BLOCK_STYLE_ATTRIBUTES_MAPPING.placeholder] = blockStyles.color;
  }

  return blockStyles;
}

function parseColorVariables(styles, colorPalette) {
  const stylesBase = styles;
  const colorPrefixRegex = /var\(--wp--preset--color--(.*?)\)/g;
  return stylesBase ? JSON.parse(stylesBase === null || stylesBase === void 0 ? void 0 : stylesBase.replace(colorPrefixRegex, (_$1, $2) => {
    const mappedColor = (0, _lodash.find)(colorPalette, {
      slug: $2
    });
    return mappedColor === null || mappedColor === void 0 ? void 0 : mappedColor.color;
  })) : styles;
}

function getGlobalStyles(rawStyles, rawFeatures, colors, gradients) {
  var _parsedExperimentalFe, _parsedExperimentalFe2;

  const parsedGradients = parseColorVariables(JSON.stringify(gradients), colors);
  const globalStyles = parseColorVariables(rawStyles, colors);
  const parsedExperimentalFeatures = parseColorVariables(rawFeatures, colors);
  return {
    colors,
    gradients: parsedGradients,
    __experimentalFeatures: {
      color: {
        palette: parsedExperimentalFeatures === null || parsedExperimentalFeatures === void 0 ? void 0 : (_parsedExperimentalFe = parsedExperimentalFeatures.color) === null || _parsedExperimentalFe === void 0 ? void 0 : _parsedExperimentalFe.palette,
        gradients: parsedExperimentalFeatures === null || parsedExperimentalFeatures === void 0 ? void 0 : (_parsedExperimentalFe2 = parsedExperimentalFeatures.color) === null || _parsedExperimentalFe2 === void 0 ? void 0 : _parsedExperimentalFe2.gradients
      }
    },
    __experimentalGlobalStylesBaseStyles: globalStyles
  };
}
//# sourceMappingURL=utils.native.js.map