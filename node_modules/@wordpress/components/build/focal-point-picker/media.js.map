{"version":3,"sources":["@wordpress/components/src/focal-point-picker/media.js"],"names":["Media","alt","autoPlay","src","onLoad","noop","mediaRef","muted","props","isVideo","MediaPlaceholderElement","onLoadRef","window","requestAnimationFrame","current"],"mappings":";;;;;;;;;AAQA;;;;AALA;;AAUA;;AACA;;AAdA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AAIe,SAASA,KAAT,CAAgB;AAC9BC,EAAAA,GAD8B;AAE9BC,EAAAA,QAF8B;AAG9BC,EAAAA,GAH8B;AAI9BC,EAAAA,MAAM,GAAGC,YAJqB;AAK9BC,EAAAA,QAL8B;AAM9B;AACA;AACAC,EAAAA,KAAK,GAAG,IARsB;AAS9B,KAAGC;AAT2B,CAAhB,EAUX;AACH,MAAK,CAAEL,GAAP,EAAa;AACZ,WACC,4BAAC,uBAAD;AACC,MAAA,SAAS,EAAC,wFADX;AAEC,MAAA,MAAM,EAAGC,MAFV;AAGC,MAAA,QAAQ,EAAGE;AAHZ,MADD;AAOA;;AAED,QAAMG,OAAO,GAAG,wBAAaN,GAAb,CAAhB;AAEA,SAAOM,OAAO,GACb,gEACMD,KADN;AAEC,IAAA,QAAQ,EAAGN,QAFZ;AAGC,IAAA,SAAS,EAAC,kFAHX;AAIC,IAAA,IAAI,MAJL;AAKC,IAAA,KAAK,EAAGK,KALT;AAMC,IAAA,YAAY,EAAGH,MANhB;AAOC,IAAA,GAAG,EAAGE,QAPP;AAQC,IAAA,GAAG,EAAGH;AARP,KADa,GAYb,8DACMK,KADN;AAEC,IAAA,GAAG,EAAGP,GAFP;AAGC,IAAA,SAAS,EAAC,kFAHX;AAIC,IAAA,MAAM,EAAGG,MAJV;AAKC,IAAA,GAAG,EAAGE,QALP;AAMC,IAAA,GAAG,EAAGH;AANP,KAZD;AAqBA;;AAED,SAASO,uBAAT,CAAkC;AAAEJ,EAAAA,QAAF;AAAYF,EAAAA,MAAM,GAAGC,YAArB;AAA2B,KAAGG;AAA9B,CAAlC,EAA0E;AACzE,QAAMG,SAAS,GAAG,qBAAQP,MAAR,CAAlB;AAEA;AACD;AACA;AACA;AACA;;AACC,gCAAiB,MAAM;AACtBQ,IAAAA,MAAM,CAACC,qBAAP,CAA8B,MAAM;AACnCF,MAAAA,SAAS,CAACG,OAAV;AACA,KAFD;AAGA,GAJD,EAIG,EAJH;AAMA,SAAO,4BAAC,uCAAD;AAAkB,IAAA,GAAG,EAAGR;AAAxB,KAAwCE,KAAxC,EAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { noop } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useRef, useLayoutEffect } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { MediaPlaceholder } from './styles/focal-point-picker-style';\nimport { isVideoType } from './utils';\n\nexport default function Media( {\n\talt,\n\tautoPlay,\n\tsrc,\n\tonLoad = noop,\n\tmediaRef,\n\t// Exposing muted prop for test rendering purposes\n\t// https://github.com/testing-library/react-testing-library/issues/470\n\tmuted = true,\n\t...props\n} ) {\n\tif ( ! src ) {\n\t\treturn (\n\t\t\t<MediaPlaceholderElement\n\t\t\t\tclassName=\"components-focal-point-picker__media components-focal-point-picker__media--placeholder\"\n\t\t\t\tonLoad={ onLoad }\n\t\t\t\tmediaRef={ mediaRef }\n\t\t\t/>\n\t\t);\n\t}\n\n\tconst isVideo = isVideoType( src );\n\n\treturn isVideo ? (\n\t\t<video\n\t\t\t{ ...props }\n\t\t\tautoPlay={ autoPlay }\n\t\t\tclassName=\"components-focal-point-picker__media components-focal-point-picker__media--video\"\n\t\t\tloop\n\t\t\tmuted={ muted }\n\t\t\tonLoadedData={ onLoad }\n\t\t\tref={ mediaRef }\n\t\t\tsrc={ src }\n\t\t/>\n\t) : (\n\t\t<img\n\t\t\t{ ...props }\n\t\t\talt={ alt }\n\t\t\tclassName=\"components-focal-point-picker__media components-focal-point-picker__media--image\"\n\t\t\tonLoad={ onLoad }\n\t\t\tref={ mediaRef }\n\t\t\tsrc={ src }\n\t\t/>\n\t);\n}\n\nfunction MediaPlaceholderElement( { mediaRef, onLoad = noop, ...props } ) {\n\tconst onLoadRef = useRef( onLoad );\n\n\t/**\n\t * This async callback mimics the onLoad (img) / onLoadedData (video) callback\n\t * for media elements. It is used in the main <FocalPointPicker /> component\n\t * to calculate the dimensions + boundaries for positioning.\n\t */\n\tuseLayoutEffect( () => {\n\t\twindow.requestAnimationFrame( () => {\n\t\t\tonLoadRef.current();\n\t\t} );\n\t}, [] );\n\n\treturn <MediaPlaceholder ref={ mediaRef } { ...props } />;\n}\n"]}