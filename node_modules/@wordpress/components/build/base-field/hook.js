"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useBaseField = useBaseField;

var _css = require("@emotion/css");

var _element = require("@wordpress/element");

var _context = require("../ui/context");

var _controlGroup = require("../ui/control-group");

var _flex = require("../flex");

var styles = _interopRequireWildcard(require("./styles"));

/**
 * External dependencies
 */
// Disable reason: Temporarily disable for existing usages
// until we remove them as part of https://github.com/WordPress/gutenberg/issues/30503#deprecating-emotion-css
// eslint-disable-next-line no-restricted-imports

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * @typedef OwnProps
 * @property {boolean} [hasError=false] Renders an error.
 * @property {boolean} [disabled]       Whether the field is disabled.
 * @property {boolean} [isInline=false] Renders as an inline element (layout).
 * @property {boolean} [isSubtle=false] Renders a subtle variant.
 */

/** @typedef {import('../flex/types').FlexProps & OwnProps} Props */

/**
 * @param {import('../ui/context').PolymorphicComponentProps<Props, 'div'>} props
 */
function useBaseField(props) {
  const {
    className,
    hasError = false,
    isInline = false,
    isSubtle = false,
    // extract these because useFlex doesn't accept it
    defaultValue,
    disabled,
    ...flexProps
  } = (0, _context.useContextSystem)(props, 'BaseField');
  const {
    styles: controlGroupStyles
  } = (0, _controlGroup.useControlGroupContext)();
  const classes = (0, _element.useMemo)(() => (0, _css.cx)(styles.BaseField, controlGroupStyles, isSubtle && styles.subtle, hasError && styles.error, isInline && styles.inline, className), [className, controlGroupStyles, hasError, isInline, isSubtle]);
  return { ...(0, _flex.useFlex)({ ...flexProps,
      className: classes
    }),
    disabled,
    defaultValue
  };
}
//# sourceMappingURL=hook.js.map