"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = require("lodash");

var _equivalentKeyMap = _interopRequireDefault(require("equivalent-key-map"));

var _utils = require("./utils");

/**
 * External dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Reducer function returning next state for selector resolution of
 * subkeys, object form:
 *
 *  selectorName -> EquivalentKeyMap<Array,boolean>
 */
const subKeysIsResolved = (0, _utils.onSubKey)('selectorName')((state = new _equivalentKeyMap.default(), action) => {
  switch (action.type) {
    case 'START_RESOLUTION':
    case 'FINISH_RESOLUTION':
      {
        const isStarting = action.type === 'START_RESOLUTION';
        const nextState = new _equivalentKeyMap.default(state);
        nextState.set(action.args, isStarting);
        return nextState;
      }

    case 'START_RESOLUTIONS':
    case 'FINISH_RESOLUTIONS':
      {
        const isStarting = action.type === 'START_RESOLUTIONS';
        const nextState = new _equivalentKeyMap.default(state);

        for (const resolutionArgs of action.args) {
          nextState.set(resolutionArgs, isStarting);
        }

        return nextState;
      }

    case 'INVALIDATE_RESOLUTION':
      {
        const nextState = new _equivalentKeyMap.default(state);
        nextState.delete(action.args);
        return nextState;
      }
  }

  return state;
});
/**
 * Reducer function returning next state for selector resolution, object form:
 *
 *   selectorName -> EquivalentKeyMap<Array, boolean>
 *
 * @param  state  Current state.
 * @param  action Dispatched action.
 *
 * @return Next state.
 */

const isResolved = (state = {}, action) => {
  switch (action.type) {
    case 'INVALIDATE_RESOLUTION_FOR_STORE':
      return {};

    case 'INVALIDATE_RESOLUTION_FOR_STORE_SELECTOR':
      return (0, _lodash.has)(state, [action.selectorName]) ? (0, _lodash.omit)(state, [action.selectorName]) : state;

    case 'START_RESOLUTION':
    case 'FINISH_RESOLUTION':
    case 'START_RESOLUTIONS':
    case 'FINISH_RESOLUTIONS':
    case 'INVALIDATE_RESOLUTION':
      return subKeysIsResolved(state, action);
  }

  return state;
};

var _default = isResolved;
exports.default = _default;
//# sourceMappingURL=reducer.js.map