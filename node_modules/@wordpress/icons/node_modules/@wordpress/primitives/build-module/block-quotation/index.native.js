import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { View } from 'react-native';
/**
 * WordPress dependencies
 */

import { Children, cloneElement } from '@wordpress/element';
import { withPreferredColorScheme } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import styles from './style.scss';
export var BlockQuotation = withPreferredColorScheme(function (props) {
  var getStylesFromColorScheme = props.getStylesFromColorScheme,
      style = props.style;
  var blockQuoteStyle = [getStylesFromColorScheme(styles.wpBlockQuoteLight, styles.wpBlockQuoteDark), (style === null || style === void 0 ? void 0 : style.color) && {
    borderLeftColor: style.color
  }];
  var colorStyle = style !== null && style !== void 0 && style.color ? {
    color: style.color
  } : {};
  var newChildren = Children.map(props.children, function (child) {
    if (child && child.props.identifier === 'citation') {
      return cloneElement(child, {
        style: _objectSpread(_objectSpread({}, styles.wpBlockQuoteCitation), colorStyle)
      });
    }

    if (child && child.props.identifier === 'value') {
      return cloneElement(child, {
        tagsToEliminate: ['div'],
        style: colorStyle
      });
    }

    return child;
  });
  return createElement(View, {
    style: blockQuoteStyle
  }, newChildren);
});
//# sourceMappingURL=index.native.js.map