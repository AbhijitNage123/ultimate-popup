{"version":3,"sources":["@wordpress/dom/src/dom/place-caret-at-vertical-edge.js"],"names":["placeCaretAtVerticalEdge","container","isReverse","rect","mayUseScroll","isContentEditable","focus","buffer","height","editableRect","getBoundingClientRect","x","left","y","bottom","top","ownerDocument","defaultView","range","contains","startContainer","scrollIntoView","selection","getSelection","removeAllRanges","addRange"],"mappings":";;;;;;;;;AAGA;;AACA;;AACA;;AALA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,wBAAT,CACdC,SADc,EAEdC,SAFc,EAGdC,IAHc,EAIdC,YAAY,GAAG,IAJD,EAKb;AACD,MAAK,CAAEH,SAAP,EAAmB;AAClB;AACA;;AAED,MAAK,CAAEE,IAAF,IAAU,CAAEF,SAAS,CAACI,iBAA3B,EAA+C;AAC9C,6CAA4BJ,SAA5B,EAAuCC,SAAvC;AACA;AACA;;AAEDD,EAAAA,SAAS,CAACK,KAAV,GAVC,CAYD;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMC,MAAM,GAAGJ,IAAI,CAACK,MAAL,GAAc,CAA7B;AACA,QAAMC,YAAY,GAAGR,SAAS,CAACS,qBAAV,EAArB;AACA,QAAMC,CAAC,GAAGR,IAAI,CAACS,IAAf;AACA,QAAMC,CAAC,GAAGX,SAAS,GAChBO,YAAY,CAACK,MAAb,GAAsBP,MADN,GAEhBE,YAAY,CAACM,GAAb,GAAmBR,MAFtB;AAIA,QAAM;AAAES,IAAAA;AAAF,MAAoBf,SAA1B;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAAkBD,aAAxB;AACA,QAAME,KAAK,GAAG,wCAA2BF,aAA3B,EAA0CL,CAA1C,EAA6CE,CAA7C,EAAgDZ,SAAhD,CAAd;;AAEA,MAAK,CAAEiB,KAAF,IAAW,CAAEjB,SAAS,CAACkB,QAAV,CAAoBD,KAAK,CAACE,cAA1B,CAAlB,EAA+D;AAC9D,QACChB,YAAY,KACV,CAAEc,KAAF,IACD,CAAEA,KAAK,CAACE,cADP,IAED,CAAEF,KAAK,CAACE,cAAN,CAAqBD,QAArB,CAA+BlB,SAA/B,CAHS,CADb,EAKE;AACD;AACA;AACAA,MAAAA,SAAS,CAACoB,cAAV,CAA0BnB,SAA1B;AACAF,MAAAA,wBAAwB,CAAEC,SAAF,EAAaC,SAAb,EAAwBC,IAAxB,EAA8B,KAA9B,CAAxB;AACA;AACA;;AAED,6CAA4BF,SAA5B,EAAuCC,SAAvC;AACA;AACA;;AAED,wCAAiBe,WAAjB,EAA8B,aAA9B;AACA,QAAMK,SAAS,GAAGL,WAAW,CAACM,YAAZ,EAAlB;AACA,wCAAiBD,SAAjB,EAA4B,WAA5B;AACAA,EAAAA,SAAS,CAACE,eAAV;AACAF,EAAAA,SAAS,CAACG,QAAV,CAAoBP,KAApB;AACA","sourcesContent":["/**\n * Internal dependencies\n */\nimport placeCaretAtHorizontalEdge from './place-caret-at-horizontal-edge';\nimport hiddenCaretRangeFromPoint from './hidden-caret-range-from-point';\nimport { assertIsDefined } from '../utils/assert-is-defined';\n\n/**\n * Places the caret at the top or bottom of a given element.\n *\n * @param {HTMLElement} container           Focusable element.\n * @param {boolean}     isReverse           True for bottom, false for top.\n * @param {DOMRect}     [rect]              The rectangle to position the caret with.\n * @param {boolean}     [mayUseScroll=true] True to allow scrolling, false to disallow.\n */\nexport default function placeCaretAtVerticalEdge(\n\tcontainer,\n\tisReverse,\n\trect,\n\tmayUseScroll = true\n) {\n\tif ( ! container ) {\n\t\treturn;\n\t}\n\n\tif ( ! rect || ! container.isContentEditable ) {\n\t\tplaceCaretAtHorizontalEdge( container, isReverse );\n\t\treturn;\n\t}\n\n\tcontainer.focus();\n\n\t// Offset by a buffer half the height of the caret rect. This is needed\n\t// because caretRangeFromPoint may default to the end of the selection if\n\t// offset is too close to the edge. It's unclear how to precisely calculate\n\t// this threshold; it may be the padded area of some combination of line\n\t// height, caret height, and font size. The buffer offset is effectively\n\t// equivalent to a point at half the height of a line of text.\n\tconst buffer = rect.height / 2;\n\tconst editableRect = container.getBoundingClientRect();\n\tconst x = rect.left;\n\tconst y = isReverse\n\t\t? editableRect.bottom - buffer\n\t\t: editableRect.top + buffer;\n\n\tconst { ownerDocument } = container;\n\tconst { defaultView } = ownerDocument;\n\tconst range = hiddenCaretRangeFromPoint( ownerDocument, x, y, container );\n\n\tif ( ! range || ! container.contains( range.startContainer ) ) {\n\t\tif (\n\t\t\tmayUseScroll &&\n\t\t\t( ! range ||\n\t\t\t\t! range.startContainer ||\n\t\t\t\t! range.startContainer.contains( container ) )\n\t\t) {\n\t\t\t// Might be out of view.\n\t\t\t// Easier than attempting to calculate manually.\n\t\t\tcontainer.scrollIntoView( isReverse );\n\t\t\tplaceCaretAtVerticalEdge( container, isReverse, rect, false );\n\t\t\treturn;\n\t\t}\n\n\t\tplaceCaretAtHorizontalEdge( container, isReverse );\n\t\treturn;\n\t}\n\n\tassertIsDefined( defaultView, 'defaultView' );\n\tconst selection = defaultView.getSelection();\n\tassertIsDefined( selection, 'selection' );\n\tselection.removeAllRanges();\n\tselection.addRange( range );\n}\n"]}