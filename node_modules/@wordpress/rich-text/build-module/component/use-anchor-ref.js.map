{"version":3,"sources":["@wordpress/rich-text/src/component/use-anchor-ref.js"],"names":["useMemo","getActiveFormat","useAnchorRef","ref","value","settings","tagName","className","name","activeFormat","undefined","current","ownerDocument","defaultView","selection","getSelection","rangeCount","range","getRangeAt","element","startContainer","nextElementSibling","nodeType","ELEMENT_NODE","parentNode","closest","start","end"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,oBAAxB;AAEA;AACA;AACA;;AACA,SAASC,eAAT,QAAgC,sBAAhC;AAEA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAuB;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,KAAP;AAAcC,EAAAA,QAAQ,GAAG;AAAzB,CAAvB,EAAuD;AAC7D,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA;AAAtB,MAA+BH,QAArC;AACA,QAAMI,YAAY,GAAGD,IAAI,GAAGP,eAAe,CAAEG,KAAF,EAASI,IAAT,CAAlB,GAAoCE,SAA7D;AAEA,SAAOV,OAAO,CAAE,MAAM;AACrB,QAAK,CAAEG,GAAG,CAACQ,OAAX,EAAqB;AACrB,UAAM;AACLC,MAAAA,aAAa,EAAE;AAAEC,QAAAA;AAAF;AADV,QAEFV,GAAG,CAACQ,OAFR;AAGA,UAAMG,SAAS,GAAGD,WAAW,CAACE,YAAZ,EAAlB;;AAEA,QAAK,CAAED,SAAS,CAACE,UAAjB,EAA8B;AAC7B;AACA;;AAED,UAAMC,KAAK,GAAGH,SAAS,CAACI,UAAV,CAAsB,CAAtB,CAAd;;AAEA,QAAK,CAAET,YAAP,EAAsB;AACrB,aAAOQ,KAAP;AACA;;AAED,QAAIE,OAAO,GAAGF,KAAK,CAACG,cAApB,CAjBqB,CAmBrB;;AACAD,IAAAA,OAAO,GAAGA,OAAO,CAACE,kBAAR,IAA8BF,OAAxC;;AAEA,WAAQA,OAAO,CAACG,QAAR,KAAqBH,OAAO,CAACI,YAArC,EAAoD;AACnDJ,MAAAA,OAAO,GAAGA,OAAO,CAACK,UAAlB;AACA;;AAED,WAAOL,OAAO,CAACM,OAAR,CACNnB,OAAO,IAAKC,SAAS,GAAG,MAAMA,SAAT,GAAqB,EAAnC,CADD,CAAP;AAGA,GA7Ba,EA6BX,CAAEE,YAAF,EAAgBL,KAAK,CAACsB,KAAtB,EAA6BtB,KAAK,CAACuB,GAAnC,EAAwCrB,OAAxC,EAAiDC,SAAjD,CA7BW,CAAd;AA8BA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useMemo } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { getActiveFormat } from '../get-active-format';\n\n/** @typedef {import('@wordpress/element').RefObject} RefObject */\n/** @typedef {import('../register-format-type').RichTextFormatType} RichTextFormatType */\n/** @typedef {import('../create').RichTextValue} RichTextValue */\n\n/**\n * This hook, to be used in a format type's Edit component, returns the active\n * element that is formatted, or the selection range if no format is active.\n * The returned value is meant to be used for positioning UI, e.g. by passing it\n * to the `Popover` component.\n *\n * @param {Object}                 $1          Named parameters.\n * @param {RefObject<HTMLElement>} $1.ref      React ref of the element\n *                                             containing  the editable content.\n * @param {RichTextValue}          $1.value    Value to check for selection.\n * @param {RichTextFormatType}     $1.settings The format type's settings.\n *\n * @return {Element|Range} The active element or selection range.\n */\nexport function useAnchorRef( { ref, value, settings = {} } ) {\n\tconst { tagName, className, name } = settings;\n\tconst activeFormat = name ? getActiveFormat( value, name ) : undefined;\n\n\treturn useMemo( () => {\n\t\tif ( ! ref.current ) return;\n\t\tconst {\n\t\t\townerDocument: { defaultView },\n\t\t} = ref.current;\n\t\tconst selection = defaultView.getSelection();\n\n\t\tif ( ! selection.rangeCount ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst range = selection.getRangeAt( 0 );\n\n\t\tif ( ! activeFormat ) {\n\t\t\treturn range;\n\t\t}\n\n\t\tlet element = range.startContainer;\n\n\t\t// If the caret is right before the element, select the next element.\n\t\telement = element.nextElementSibling || element;\n\n\t\twhile ( element.nodeType !== element.ELEMENT_NODE ) {\n\t\t\telement = element.parentNode;\n\t\t}\n\n\t\treturn element.closest(\n\t\t\ttagName + ( className ? '.' + className : '' )\n\t\t);\n\t}, [ activeFormat, value.start, value.end, tagName, className ] );\n}\n"]}