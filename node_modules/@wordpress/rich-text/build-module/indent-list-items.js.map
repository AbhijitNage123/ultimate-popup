{"version":3,"sources":["@wordpress/rich-text/src/indent-list-items.js"],"names":["LINE_SEPARATOR","getLineIndex","canIndentListItems","getTargetLevelLineIndex","text","replacements","lineIndex","startFormats","index","formatsAtIndex","length","indentListItems","value","rootFormat","previousLineIndex","end","newFormats","slice","targetLevelLineIndex","targetFormats","concat","lastformat"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,cAAT,QAA+B,sBAA/B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,uBAAT,CAAkC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAlC,EAA0DC,SAA1D,EAAsE;AACrE,QAAMC,YAAY,GAAGF,YAAY,CAAEC,SAAF,CAAZ,IAA6B,EAAlD;AAEA,MAAIE,KAAK,GAAGF,SAAZ;;AAEA,SAAQE,KAAK,MAAM,CAAnB,EAAuB;AACtB,QAAKJ,IAAI,CAAEI,KAAF,CAAJ,KAAkBR,cAAvB,EAAwC;AACvC;AACA;;AAED,UAAMS,cAAc,GAAGJ,YAAY,CAAEG,KAAF,CAAZ,IAAyB,EAAhD,CALsB,CAOtB;AACA;;AACA,QAAKC,cAAc,CAACC,MAAf,KAA0BH,YAAY,CAACG,MAAb,GAAsB,CAArD,EAAyD;AACxD,aAAOF,KAAP;AACA,KAFD,MAEO,IAAKC,cAAc,CAACC,MAAf,IAAyBH,YAAY,CAACG,MAA3C,EAAoD;AAC1D;AACA;AACD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASC,eAAT,CAA0BC,KAA1B,EAAiCC,UAAjC,EAA8C;AACpD,MAAK,CAAEX,kBAAkB,CAAEU,KAAF,CAAzB,EAAqC;AACpC,WAAOA,KAAP;AACA;;AAED,QAAMN,SAAS,GAAGL,YAAY,CAAEW,KAAF,CAA9B;AACA,QAAME,iBAAiB,GAAGb,YAAY,CAAEW,KAAF,EAASN,SAAT,CAAtC;AACA,QAAM;AAAEF,IAAAA,IAAF;AAAQC,IAAAA,YAAR;AAAsBU,IAAAA;AAAtB,MAA8BH,KAApC;AACA,QAAMI,UAAU,GAAGX,YAAY,CAACY,KAAb,EAAnB;AACA,QAAMC,oBAAoB,GAAGf,uBAAuB,CAAES,KAAF,EAASN,SAAT,CAApD;;AAEA,OAAM,IAAIE,KAAK,GAAGF,SAAlB,EAA6BE,KAAK,GAAGO,GAArC,EAA0CP,KAAK,EAA/C,EAAoD;AACnD,QAAKJ,IAAI,CAAEI,KAAF,CAAJ,KAAkBR,cAAvB,EAAwC;AACvC;AACA,KAHkD,CAKnD;AACA;;;AACA,QAAKkB,oBAAL,EAA4B;AAC3B,YAAMC,aAAa,GAAGd,YAAY,CAAEa,oBAAF,CAAZ,IAAwC,EAA9D;AACAF,MAAAA,UAAU,CAAER,KAAF,CAAV,GAAsBW,aAAa,CAACC,MAAd,CACrB,CAAEJ,UAAU,CAAER,KAAF,CAAV,IAAuB,EAAzB,EAA8BS,KAA9B,CAAqCE,aAAa,CAACT,MAAd,GAAuB,CAA5D,CADqB,CAAtB;AAGA,KALD,MAKO;AACN,YAAMS,aAAa,GAAGd,YAAY,CAAES,iBAAF,CAAZ,IAAqC,EAA3D;AACA,YAAMO,UAAU,GACfF,aAAa,CAAEA,aAAa,CAACT,MAAd,GAAuB,CAAzB,CAAb,IAA6CG,UAD9C;AAGAG,MAAAA,UAAU,CAAER,KAAF,CAAV,GAAsBW,aAAa,CAACC,MAAd,CACrB,CAAEC,UAAF,CADqB,EAErB,CAAEL,UAAU,CAAER,KAAF,CAAV,IAAuB,EAAzB,EAA8BS,KAA9B,CAAqCE,aAAa,CAACT,MAAnD,CAFqB,CAAtB;AAIA;AACD;;AAED,SAAO,EACN,GAAGE,KADG;AAENP,IAAAA,YAAY,EAAEW;AAFR,GAAP;AAIA","sourcesContent":["/**\n * Internal dependencies\n */\n\nimport { LINE_SEPARATOR } from './special-characters';\nimport { getLineIndex } from './get-line-index';\nimport { canIndentListItems } from './can-indent-list-items';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n/** @typedef {import('./create').RichTextFormat} RichTextFormat */\n\n/**\n * Gets the line index of the first previous list item with higher indentation.\n *\n * @param {RichTextValue} value     Value to search.\n * @param {number}        lineIndex Line index of the list item to compare\n *                                  with.\n *\n * @return {number|void} The line index.\n */\nfunction getTargetLevelLineIndex( { text, replacements }, lineIndex ) {\n\tconst startFormats = replacements[ lineIndex ] || [];\n\n\tlet index = lineIndex;\n\n\twhile ( index-- >= 0 ) {\n\t\tif ( text[ index ] !== LINE_SEPARATOR ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst formatsAtIndex = replacements[ index ] || [];\n\n\t\t// Return the first line index that is one level higher. If the level is\n\t\t// lower or equal, there is no result.\n\t\tif ( formatsAtIndex.length === startFormats.length + 1 ) {\n\t\t\treturn index;\n\t\t} else if ( formatsAtIndex.length <= startFormats.length ) {\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n/**\n * Indents any selected list items if possible.\n *\n * @param {RichTextValue}  value      Value to change.\n * @param {RichTextFormat} rootFormat Root format.\n *\n * @return {RichTextValue} The changed value.\n */\nexport function indentListItems( value, rootFormat ) {\n\tif ( ! canIndentListItems( value ) ) {\n\t\treturn value;\n\t}\n\n\tconst lineIndex = getLineIndex( value );\n\tconst previousLineIndex = getLineIndex( value, lineIndex );\n\tconst { text, replacements, end } = value;\n\tconst newFormats = replacements.slice();\n\tconst targetLevelLineIndex = getTargetLevelLineIndex( value, lineIndex );\n\n\tfor ( let index = lineIndex; index < end; index++ ) {\n\t\tif ( text[ index ] !== LINE_SEPARATOR ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Get the previous list, and if there's a child list, take over the\n\t\t// formats. If not, duplicate the last level and create a new level.\n\t\tif ( targetLevelLineIndex ) {\n\t\t\tconst targetFormats = replacements[ targetLevelLineIndex ] || [];\n\t\t\tnewFormats[ index ] = targetFormats.concat(\n\t\t\t\t( newFormats[ index ] || [] ).slice( targetFormats.length - 1 )\n\t\t\t);\n\t\t} else {\n\t\t\tconst targetFormats = replacements[ previousLineIndex ] || [];\n\t\t\tconst lastformat =\n\t\t\t\ttargetFormats[ targetFormats.length - 1 ] || rootFormat;\n\n\t\t\tnewFormats[ index ] = targetFormats.concat(\n\t\t\t\t[ lastformat ],\n\t\t\t\t( newFormats[ index ] || [] ).slice( targetFormats.length )\n\t\t\t);\n\t\t}\n\t}\n\n\treturn {\n\t\t...value,\n\t\treplacements: newFormats,\n\t};\n}\n"]}