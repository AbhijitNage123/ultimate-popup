{"version":3,"sources":["@wordpress/rich-text/src/store/selectors.js"],"names":["createSelector","find","getFormatTypes","state","Object","values","formatTypes","getFormatType","name","getFormatTypeForBareElement","bareElementTagName","className","tagName","getFormatTypeForClassName","elementClassName","indexOf"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,cAAP,MAA2B,QAA3B;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGF,cAAc,CACzCG,KAAF,IAAaC,MAAM,CAACC,MAAP,CAAeF,KAAK,CAACG,WAArB,CAD8B,EAEzCH,KAAF,IAAa,CAAEA,KAAK,CAACG,WAAR,CAF8B,CAArC;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAwBJ,KAAxB,EAA+BK,IAA/B,EAAsC;AAC5C,SAAOL,KAAK,CAACG,WAAN,CAAmBE,IAAnB,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,2BAAT,CAAsCN,KAAtC,EAA6CO,kBAA7C,EAAkE;AACxE,SAAOT,IAAI,CAAEC,cAAc,CAAEC,KAAF,CAAhB,EAA2B,CAAE;AAAEQ,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAF,KAA8B;AACnE,WAAOD,SAAS,KAAK,IAAd,IAAsBD,kBAAkB,KAAKE,OAApD;AACA,GAFU,CAAX;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,yBAAT,CAAoCV,KAApC,EAA2CW,gBAA3C,EAA8D;AACpE,SAAOb,IAAI,CAAEC,cAAc,CAAEC,KAAF,CAAhB,EAA2B,CAAE;AAAEQ,IAAAA;AAAF,GAAF,KAAqB;AAC1D,QAAKA,SAAS,KAAK,IAAnB,EAA0B;AACzB,aAAO,KAAP;AACA;;AAED,WAAQ,IAAIG,gBAAkB,GAAvB,CAA0BC,OAA1B,CAAoC,IAAIJ,SAAW,GAAnD,KAA2D,CAAlE;AACA,GANU,CAAX;AAOA","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { find } from 'lodash';\n\n/**\n * Returns all the available format types.\n *\n * @param {Object} state Data state.\n *\n * @return {Array} Format types.\n */\nexport const getFormatTypes = createSelector(\n\t( state ) => Object.values( state.formatTypes ),\n\t( state ) => [ state.formatTypes ]\n);\n\n/**\n * Returns a format type by name.\n *\n * @param {Object} state Data state.\n * @param {string} name  Format type name.\n *\n * @return {Object?} Format type.\n */\nexport function getFormatType( state, name ) {\n\treturn state.formatTypes[ name ];\n}\n\n/**\n * Gets the format type, if any, that can handle a bare element (without a\n * data-format-type attribute), given the tag name of this element.\n *\n * @param {Object} state              Data state.\n * @param {string} bareElementTagName The tag name of the element to find a\n *                                    format type for.\n * @return {?Object} Format type.\n */\nexport function getFormatTypeForBareElement( state, bareElementTagName ) {\n\treturn find( getFormatTypes( state ), ( { className, tagName } ) => {\n\t\treturn className === null && bareElementTagName === tagName;\n\t} );\n}\n\n/**\n * Gets the format type, if any, that can handle an element, given its classes.\n *\n * @param {Object} state            Data state.\n * @param {string} elementClassName The classes of the element to find a format\n *                                  type for.\n * @return {?Object} Format type.\n */\nexport function getFormatTypeForClassName( state, elementClassName ) {\n\treturn find( getFormatTypes( state ), ( { className } ) => {\n\t\tif ( className === null ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn ` ${ elementClassName } `.indexOf( ` ${ className } ` ) >= 0;\n\t} );\n}\n"]}