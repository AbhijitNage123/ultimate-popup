"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useIndentListItemOnSpace = useIndentListItemOnSpace;

var _element = require("@wordpress/element");

var _compose = require("@wordpress/compose");

var _keycodes = require("@wordpress/keycodes");

var _isCollapsed = require("../is-collapsed");

var _specialCharacters = require("../special-characters");

var _indentListItems = require("../indent-list-items");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function useIndentListItemOnSpace(props) {
  const propsRef = (0, _element.useRef)(props);
  propsRef.current = props;
  return (0, _compose.useRefEffect)(element => {
    function onKeyDown(event) {
      const {
        keyCode,
        shiftKey,
        altKey,
        metaKey,
        ctrlKey
      } = event;
      const {
        multilineTag,
        createRecord,
        handleChange
      } = propsRef.current;

      if ( // Only override when no modifiers are pressed.
      shiftKey || altKey || metaKey || ctrlKey || keyCode !== _keycodes.SPACE || multilineTag !== 'li') {
        return;
      }

      const currentValue = createRecord();

      if (!(0, _isCollapsed.isCollapsed)(currentValue)) {
        return;
      }

      const {
        text,
        start
      } = currentValue;
      const characterBefore = text[start - 1]; // The caret must be at the start of a line.

      if (characterBefore && characterBefore !== _specialCharacters.LINE_SEPARATOR) {
        return;
      }

      handleChange((0, _indentListItems.indentListItems)(currentValue, {
        type: element.tagName.toLowerCase()
      }));
      event.preventDefault();
    }

    element.addEventListener('keydown', onKeyDown);
    return () => {
      element.removeEventListener('keydown', onKeyDown);
    };
  }, []);
}
//# sourceMappingURL=use-indent-list-item-on-space.js.map