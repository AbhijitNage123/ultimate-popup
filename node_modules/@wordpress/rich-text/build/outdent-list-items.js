"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.outdentListItems = outdentListItems;

var _specialCharacters = require("./special-characters");

var _getLineIndex = require("./get-line-index");

var _getParentLineIndex = require("./get-parent-line-index");

var _getLastChildIndex = require("./get-last-child-index");

var _canOutdentListItems = require("./can-outdent-list-items");

/**
 * Internal dependencies
 */

/** @typedef {import('./create').RichTextValue} RichTextValue */

/**
 * Outdents any selected list items if possible.
 *
 * @param {RichTextValue} value Value to change.
 *
 * @return {RichTextValue} The changed value.
 */
function outdentListItems(value) {
  if (!(0, _canOutdentListItems.canOutdentListItems)(value)) {
    return value;
  }

  const {
    text,
    replacements,
    start,
    end
  } = value;
  const startingLineIndex = (0, _getLineIndex.getLineIndex)(value, start);
  const newFormats = replacements.slice(0);
  const parentFormats = replacements[(0, _getParentLineIndex.getParentLineIndex)(value, startingLineIndex)] || [];
  const endingLineIndex = (0, _getLineIndex.getLineIndex)(value, end);
  const lastChildIndex = (0, _getLastChildIndex.getLastChildIndex)(value, endingLineIndex); // Outdent all list items from the starting line index until the last child
  // index of the ending list. All children of the ending list need to be
  // outdented, otherwise they'll be orphaned.

  for (let index = startingLineIndex; index <= lastChildIndex; index++) {
    // Skip indices that are not line separators.
    if (text[index] !== _specialCharacters.LINE_SEPARATOR) {
      continue;
    } // In the case of level 0, the formats at the index are undefined.


    const currentFormats = newFormats[index] || []; // Omit the indentation level where the selection starts.

    newFormats[index] = parentFormats.concat(currentFormats.slice(parentFormats.length + 1));

    if (newFormats[index].length === 0) {
      delete newFormats[index];
    }
  }

  return { ...value,
    replacements: newFormats
  };
}
//# sourceMappingURL=outdent-list-items.js.map