{"version":3,"sources":["@wordpress/rich-text/src/to-html-string.js"],"names":["toHTMLString","value","multilineTag","preserveWhiteSpace","tree","createEmpty","append","getLastChild","getParent","isText","getText","remove","appendText","createChildrenHTML","children","length","parent","object","text","push","index","indexOf","splice","createElementHTML","type","attributes","attributeString","key","map","child","html","undefined","join"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\n\nimport {\n\tescapeEditableHTML,\n\tescapeAttribute,\n\tisValidAttributeName,\n} from '@wordpress/escape-html';\n\n/**\n * Internal dependencies\n */\n\nimport { toTree } from './to-tree';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Create an HTML string from a Rich Text value. If a `multilineTag` is\n * provided, text separated by a line separator will be wrapped in it.\n *\n * @param {Object}        $1                      Named argements.\n * @param {RichTextValue} $1.value                Rich text value.\n * @param {string}        [$1.multilineTag]       Multiline tag.\n * @param {boolean}       [$1.preserveWhiteSpace] Whether or not to use newline\n *                                                characters for line breaks.\n *\n * @return {string} HTML string.\n */\nexport function toHTMLString( { value, multilineTag, preserveWhiteSpace } ) {\n\tconst tree = toTree( {\n\t\tvalue,\n\t\tmultilineTag,\n\t\tpreserveWhiteSpace,\n\t\tcreateEmpty,\n\t\tappend,\n\t\tgetLastChild,\n\t\tgetParent,\n\t\tisText,\n\t\tgetText,\n\t\tremove,\n\t\tappendText,\n\t} );\n\n\treturn createChildrenHTML( tree.children );\n}\n\nfunction createEmpty() {\n\treturn {};\n}\n\nfunction getLastChild( { children } ) {\n\treturn children && children[ children.length - 1 ];\n}\n\nfunction append( parent, object ) {\n\tif ( typeof object === 'string' ) {\n\t\tobject = { text: object };\n\t}\n\n\tobject.parent = parent;\n\tparent.children = parent.children || [];\n\tparent.children.push( object );\n\treturn object;\n}\n\nfunction appendText( object, text ) {\n\tobject.text += text;\n}\n\nfunction getParent( { parent } ) {\n\treturn parent;\n}\n\nfunction isText( { text } ) {\n\treturn typeof text === 'string';\n}\n\nfunction getText( { text } ) {\n\treturn text;\n}\n\nfunction remove( object ) {\n\tconst index = object.parent.children.indexOf( object );\n\n\tif ( index !== -1 ) {\n\t\tobject.parent.children.splice( index, 1 );\n\t}\n\n\treturn object;\n}\n\nfunction createElementHTML( { type, attributes, object, children } ) {\n\tlet attributeString = '';\n\n\tfor ( const key in attributes ) {\n\t\tif ( ! isValidAttributeName( key ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tattributeString += ` ${ key }=\"${ escapeAttribute(\n\t\t\tattributes[ key ]\n\t\t) }\"`;\n\t}\n\n\tif ( object ) {\n\t\treturn `<${ type }${ attributeString }>`;\n\t}\n\n\treturn `<${ type }${ attributeString }>${ createChildrenHTML(\n\t\tchildren\n\t) }</${ type }>`;\n}\n\nfunction createChildrenHTML( children = [] ) {\n\treturn children\n\t\t.map( ( child ) => {\n\t\t\tif ( child.html !== undefined ) {\n\t\t\t\treturn child.html;\n\t\t\t}\n\n\t\t\treturn child.text === undefined\n\t\t\t\t? createElementHTML( child )\n\t\t\t\t: escapeEditableHTML( child.text );\n\t\t} )\n\t\t.join( '' );\n}\n"]}