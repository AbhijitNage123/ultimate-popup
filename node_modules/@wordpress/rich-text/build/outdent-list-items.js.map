{"version":3,"sources":["@wordpress/rich-text/src/outdent-list-items.js"],"names":["outdentListItems","value","text","replacements","start","end","startingLineIndex","newFormats","slice","parentFormats","endingLineIndex","lastChildIndex","index","LINE_SEPARATOR","currentFormats","concat","length"],"mappings":";;;;;;;AAIA;;AACA;;AACA;;AACA;;AACA;;AARA;AACA;AACA;;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,gBAAT,CAA2BC,KAA3B,EAAmC;AACzC,MAAK,CAAE,8CAAqBA,KAArB,CAAP,EAAsC;AACrC,WAAOA,KAAP;AACA;;AAED,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,YAAR;AAAsBC,IAAAA,KAAtB;AAA6BC,IAAAA;AAA7B,MAAqCJ,KAA3C;AACA,QAAMK,iBAAiB,GAAG,gCAAcL,KAAd,EAAqBG,KAArB,CAA1B;AACA,QAAMG,UAAU,GAAGJ,YAAY,CAACK,KAAb,CAAoB,CAApB,CAAnB;AACA,QAAMC,aAAa,GAClBN,YAAY,CAAE,4CAAoBF,KAApB,EAA2BK,iBAA3B,CAAF,CAAZ,IAAkE,EADnE;AAEA,QAAMI,eAAe,GAAG,gCAAcT,KAAd,EAAqBI,GAArB,CAAxB;AACA,QAAMM,cAAc,GAAG,0CAAmBV,KAAnB,EAA0BS,eAA1B,CAAvB,CAXyC,CAazC;AACA;AACA;;AACA,OAAM,IAAIE,KAAK,GAAGN,iBAAlB,EAAqCM,KAAK,IAAID,cAA9C,EAA8DC,KAAK,EAAnE,EAAwE;AACvE;AACA,QAAKV,IAAI,CAAEU,KAAF,CAAJ,KAAkBC,iCAAvB,EAAwC;AACvC;AACA,KAJsE,CAMvE;;;AACA,UAAMC,cAAc,GAAGP,UAAU,CAAEK,KAAF,CAAV,IAAuB,EAA9C,CAPuE,CASvE;;AACAL,IAAAA,UAAU,CAAEK,KAAF,CAAV,GAAsBH,aAAa,CAACM,MAAd,CACrBD,cAAc,CAACN,KAAf,CAAsBC,aAAa,CAACO,MAAd,GAAuB,CAA7C,CADqB,CAAtB;;AAIA,QAAKT,UAAU,CAAEK,KAAF,CAAV,CAAoBI,MAApB,KAA+B,CAApC,EAAwC;AACvC,aAAOT,UAAU,CAAEK,KAAF,CAAjB;AACA;AACD;;AAED,SAAO,EACN,GAAGX,KADG;AAENE,IAAAA,YAAY,EAAEI;AAFR,GAAP;AAIA","sourcesContent":["/**\n * Internal dependencies\n */\n\nimport { LINE_SEPARATOR } from './special-characters';\nimport { getLineIndex } from './get-line-index';\nimport { getParentLineIndex } from './get-parent-line-index';\nimport { getLastChildIndex } from './get-last-child-index';\nimport { canOutdentListItems } from './can-outdent-list-items';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Outdents any selected list items if possible.\n *\n * @param {RichTextValue} value Value to change.\n *\n * @return {RichTextValue} The changed value.\n */\nexport function outdentListItems( value ) {\n\tif ( ! canOutdentListItems( value ) ) {\n\t\treturn value;\n\t}\n\n\tconst { text, replacements, start, end } = value;\n\tconst startingLineIndex = getLineIndex( value, start );\n\tconst newFormats = replacements.slice( 0 );\n\tconst parentFormats =\n\t\treplacements[ getParentLineIndex( value, startingLineIndex ) ] || [];\n\tconst endingLineIndex = getLineIndex( value, end );\n\tconst lastChildIndex = getLastChildIndex( value, endingLineIndex );\n\n\t// Outdent all list items from the starting line index until the last child\n\t// index of the ending list. All children of the ending list need to be\n\t// outdented, otherwise they'll be orphaned.\n\tfor ( let index = startingLineIndex; index <= lastChildIndex; index++ ) {\n\t\t// Skip indices that are not line separators.\n\t\tif ( text[ index ] !== LINE_SEPARATOR ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// In the case of level 0, the formats at the index are undefined.\n\t\tconst currentFormats = newFormats[ index ] || [];\n\n\t\t// Omit the indentation level where the selection starts.\n\t\tnewFormats[ index ] = parentFormats.concat(\n\t\t\tcurrentFormats.slice( parentFormats.length + 1 )\n\t\t);\n\n\t\tif ( newFormats[ index ].length === 0 ) {\n\t\t\tdelete newFormats[ index ];\n\t\t}\n\t}\n\n\treturn {\n\t\t...value,\n\t\treplacements: newFormats,\n\t};\n}\n"]}