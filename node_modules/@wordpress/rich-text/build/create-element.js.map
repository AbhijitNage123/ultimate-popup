{"version":3,"sources":["@wordpress/rich-text/src/create-element.js"],"names":["createElement","implementation","html","body","createHTMLDocument","innerHTML"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,aAAT,CAAwB;AAAEC,EAAAA;AAAF,CAAxB,EAA4CC,IAA5C,EAAmD;AACzD;AACA;AACA;AACA;AACA,MAAK,CAAEF,aAAa,CAACG,IAArB,EAA4B;AAC3BH,IAAAA,aAAa,CAACG,IAAd,GAAqBF,cAAc,CAACG,kBAAf,CAAmC,EAAnC,EAAwCD,IAA7D;AACA;;AAEDH,EAAAA,aAAa,CAACG,IAAd,CAAmBE,SAAnB,GAA+BH,IAA/B;AAEA,SAAOF,aAAa,CAACG,IAArB;AACA","sourcesContent":["/**\n * Parse the given HTML into a body element.\n *\n * Note: The current implementation will return a shared reference, reset on\n * each call to `createElement`. Therefore, you should not hold a reference to\n * the value to operate upon asynchronously, as it may have unexpected results.\n *\n * @param {HTMLDocument} document The HTML document to use to parse.\n * @param {string}       html     The HTML to parse.\n *\n * @return {HTMLBodyElement} Body element with parsed HTML.\n */\nexport function createElement( { implementation }, html ) {\n\t// Because `createHTMLDocument` is an expensive operation, and with this\n\t// function being internal to `rich-text` (full control in avoiding a risk\n\t// of asynchronous operations on the shared reference), a single document\n\t// is reused and reset for each call to the function.\n\tif ( ! createElement.body ) {\n\t\tcreateElement.body = implementation.createHTMLDocument( '' ).body;\n\t}\n\n\tcreateElement.body.innerHTML = html;\n\n\treturn createElement.body;\n}\n"]}