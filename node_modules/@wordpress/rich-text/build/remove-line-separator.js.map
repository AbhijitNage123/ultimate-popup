{"version":3,"sources":["@wordpress/rich-text/src/remove-line-separator.js"],"names":["removeLineSeparator","value","backward","replacements","text","start","end","collapsed","index","removeStart","removeEnd","LINE_SEPARATOR","newValue","length","newReplacements","slice"],"mappings":";;;;;;;AAIA;;AACA;;AACA;;AANA;AACA;AACA;;AAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,mBAAT,CAA8BC,KAA9B,EAAqCC,QAAQ,GAAG,IAAhD,EAAuD;AAC7D,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,IAAhB;AAAsBC,IAAAA,KAAtB;AAA6BC,IAAAA;AAA7B,MAAqCL,KAA3C;AACA,QAAMM,SAAS,GAAG,8BAAaN,KAAb,CAAlB;AACA,MAAIO,KAAK,GAAGH,KAAK,GAAG,CAApB;AACA,MAAII,WAAW,GAAGF,SAAS,GAAGF,KAAK,GAAG,CAAX,GAAeA,KAA1C;AACA,MAAIK,SAAS,GAAGJ,GAAhB;;AACA,MAAK,CAAEJ,QAAP,EAAkB;AACjBM,IAAAA,KAAK,GAAGF,GAAR;AACAG,IAAAA,WAAW,GAAGJ,KAAd;AACAK,IAAAA,SAAS,GAAGH,SAAS,GAAGD,GAAG,GAAG,CAAT,GAAaA,GAAlC;AACA;;AAED,MAAKF,IAAI,CAAEI,KAAF,CAAJ,KAAkBG,iCAAvB,EAAwC;AACvC;AACA;;AAED,MAAIC,QAAJ,CAhB6D,CAiB7D;AACA;;AACA,MAAKL,SAAS,IAAIJ,YAAY,CAAEK,KAAF,CAAzB,IAAsCL,YAAY,CAAEK,KAAF,CAAZ,CAAsBK,MAAjE,EAA0E;AACzE,UAAMC,eAAe,GAAGX,YAAY,CAACY,KAAb,EAAxB;AAEAD,IAAAA,eAAe,CAAEN,KAAF,CAAf,GAA2BL,YAAY,CAAEK,KAAF,CAAZ,CAAsBO,KAAtB,CAA6B,CAA7B,EAAgC,CAAC,CAAjC,CAA3B;AACAH,IAAAA,QAAQ,GAAG,EACV,GAAGX,KADO;AAEVE,MAAAA,YAAY,EAAEW;AAFJ,KAAX;AAIA,GARD,MAQO;AACNF,IAAAA,QAAQ,GAAG,oBAAQX,KAAR,EAAeQ,WAAf,EAA4BC,SAA5B,CAAX;AACA;;AACD,SAAOE,QAAP;AACA","sourcesContent":["/**\n * Internal dependencies\n */\n\nimport { LINE_SEPARATOR } from './special-characters';\nimport { isCollapsed } from './is-collapsed';\nimport { remove } from './remove';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Removes a line separator character, if existing, from a Rich Text value at\n * the current indices. If no line separator exists on the indices it will\n * return undefined.\n *\n * @param {RichTextValue} value    Value to modify.\n * @param {boolean}       backward Indicates if are removing from the start\n *                                 index or the end index.\n *\n * @return {RichTextValue|undefined} A new value with the line separator\n *                                   removed. Or undefined if no line separator\n *                                   is found on the position.\n */\nexport function removeLineSeparator( value, backward = true ) {\n\tconst { replacements, text, start, end } = value;\n\tconst collapsed = isCollapsed( value );\n\tlet index = start - 1;\n\tlet removeStart = collapsed ? start - 1 : start;\n\tlet removeEnd = end;\n\tif ( ! backward ) {\n\t\tindex = end;\n\t\tremoveStart = start;\n\t\tremoveEnd = collapsed ? end + 1 : end;\n\t}\n\n\tif ( text[ index ] !== LINE_SEPARATOR ) {\n\t\treturn;\n\t}\n\n\tlet newValue;\n\t// If the line separator that is about te be removed\n\t// contains wrappers, remove the wrappers first.\n\tif ( collapsed && replacements[ index ] && replacements[ index ].length ) {\n\t\tconst newReplacements = replacements.slice();\n\n\t\tnewReplacements[ index ] = replacements[ index ].slice( 0, -1 );\n\t\tnewValue = {\n\t\t\t...value,\n\t\t\treplacements: newReplacements,\n\t\t};\n\t} else {\n\t\tnewValue = remove( value, removeStart, removeEnd );\n\t}\n\treturn newValue;\n}\n"]}