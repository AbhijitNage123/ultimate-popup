"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeLineSeparator = removeLineSeparator;

var _specialCharacters = require("./special-characters");

var _isCollapsed = require("./is-collapsed");

var _remove = require("./remove");

/**
 * Internal dependencies
 */

/** @typedef {import('./create').RichTextValue} RichTextValue */

/**
 * Removes a line separator character, if existing, from a Rich Text value at
 * the current indices. If no line separator exists on the indices it will
 * return undefined.
 *
 * @param {RichTextValue} value    Value to modify.
 * @param {boolean}       backward Indicates if are removing from the start
 *                                 index or the end index.
 *
 * @return {RichTextValue|undefined} A new value with the line separator
 *                                   removed. Or undefined if no line separator
 *                                   is found on the position.
 */
function removeLineSeparator(value, backward = true) {
  const {
    replacements,
    text,
    start,
    end
  } = value;
  const collapsed = (0, _isCollapsed.isCollapsed)(value);
  let index = start - 1;
  let removeStart = collapsed ? start - 1 : start;
  let removeEnd = end;

  if (!backward) {
    index = end;
    removeStart = start;
    removeEnd = collapsed ? end + 1 : end;
  }

  if (text[index] !== _specialCharacters.LINE_SEPARATOR) {
    return;
  }

  let newValue; // If the line separator that is about te be removed
  // contains wrappers, remove the wrappers first.

  if (collapsed && replacements[index] && replacements[index].length) {
    const newReplacements = replacements.slice();
    newReplacements[index] = replacements[index].slice(0, -1);
    newValue = { ...value,
      replacements: newReplacements
    };
  } else {
    newValue = (0, _remove.remove)(value, removeStart, removeEnd);
  }

  return newValue;
}
//# sourceMappingURL=remove-line-separator.js.map