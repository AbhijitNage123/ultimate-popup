"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.indentListItems = indentListItems;

var _specialCharacters = require("./special-characters");

var _getLineIndex = require("./get-line-index");

var _canIndentListItems = require("./can-indent-list-items");

/**
 * Internal dependencies
 */

/** @typedef {import('./create').RichTextValue} RichTextValue */

/** @typedef {import('./create').RichTextFormat} RichTextFormat */

/**
 * Gets the line index of the first previous list item with higher indentation.
 *
 * @param {RichTextValue} value     Value to search.
 * @param {number}        lineIndex Line index of the list item to compare
 *                                  with.
 *
 * @return {number|void} The line index.
 */
function getTargetLevelLineIndex({
  text,
  replacements
}, lineIndex) {
  const startFormats = replacements[lineIndex] || [];
  let index = lineIndex;

  while (index-- >= 0) {
    if (text[index] !== _specialCharacters.LINE_SEPARATOR) {
      continue;
    }

    const formatsAtIndex = replacements[index] || []; // Return the first line index that is one level higher. If the level is
    // lower or equal, there is no result.

    if (formatsAtIndex.length === startFormats.length + 1) {
      return index;
    } else if (formatsAtIndex.length <= startFormats.length) {
      return;
    }
  }
}
/**
 * Indents any selected list items if possible.
 *
 * @param {RichTextValue}  value      Value to change.
 * @param {RichTextFormat} rootFormat Root format.
 *
 * @return {RichTextValue} The changed value.
 */


function indentListItems(value, rootFormat) {
  if (!(0, _canIndentListItems.canIndentListItems)(value)) {
    return value;
  }

  const lineIndex = (0, _getLineIndex.getLineIndex)(value);
  const previousLineIndex = (0, _getLineIndex.getLineIndex)(value, lineIndex);
  const {
    text,
    replacements,
    end
  } = value;
  const newFormats = replacements.slice();
  const targetLevelLineIndex = getTargetLevelLineIndex(value, lineIndex);

  for (let index = lineIndex; index < end; index++) {
    if (text[index] !== _specialCharacters.LINE_SEPARATOR) {
      continue;
    } // Get the previous list, and if there's a child list, take over the
    // formats. If not, duplicate the last level and create a new level.


    if (targetLevelLineIndex) {
      const targetFormats = replacements[targetLevelLineIndex] || [];
      newFormats[index] = targetFormats.concat((newFormats[index] || []).slice(targetFormats.length - 1));
    } else {
      const targetFormats = replacements[previousLineIndex] || [];
      const lastformat = targetFormats[targetFormats.length - 1] || rootFormat;
      newFormats[index] = targetFormats.concat([lastformat], (newFormats[index] || []).slice(targetFormats.length));
    }
  }

  return { ...value,
    replacements: newFormats
  };
}
//# sourceMappingURL=indent-list-items.js.map