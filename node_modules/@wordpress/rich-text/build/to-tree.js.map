{"version":3,"sources":["@wordpress/rich-text/src/to-tree.js"],"names":["restoreOnAttributes","attributes","isEditableTree","newAttributes","key","newKey","startsWith","slice","length","fromFormat","type","unregisteredAttributes","object","boundaryClass","formatType","elementAttributes","name","className","class","tagName","isEqualUntil","a","b","index","toTree","value","multilineTag","preserveWhiteSpace","createEmpty","append","getLastChild","getParent","isText","getText","remove","appendText","onStartIndex","onEndIndex","placeholder","formats","replacements","text","start","end","formatsLength","tree","multilineFormat","activeFormats","deepestActiveFormat","lastSeparatorFormats","lastCharacterFormats","lastCharacter","i","character","charAt","shouldInsertPadding","LINE_SEPARATOR","characterFormats","reduce","accumulator","format","push","pointer","node","ZWNBSP","forEach","formatIndex","parent","newNode","OBJECT_REPLACEMENT_CHARACTER","html","decodeURIComponent","undefined","contenteditable","style"],"mappings":";;;;;;;AAIA;;AACA;;AACA;;AANA;AACA;AACA;AAUA,SAASA,mBAAT,CAA8BC,UAA9B,EAA0CC,cAA1C,EAA2D;AAC1D,MAAKA,cAAL,EAAsB;AACrB,WAAOD,UAAP;AACA;;AAED,QAAME,aAAa,GAAG,EAAtB;;AAEA,OAAM,MAAMC,GAAZ,IAAmBH,UAAnB,EAAgC;AAC/B,QAAII,MAAM,GAAGD,GAAb;;AACA,QAAKA,GAAG,CAACE,UAAJ,CAAgB,yBAAhB,CAAL,EAAmD;AAClDD,MAAAA,MAAM,GAAGD,GAAG,CAACG,KAAJ,CAAW,0BAA0BC,MAArC,CAAT;AACA;;AAEDL,IAAAA,aAAa,CAAEE,MAAF,CAAb,GAA0BJ,UAAU,CAAEG,GAAF,CAApC;AACA;;AAED,SAAOD,aAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,UAAT,CAAqB;AACpBC,EAAAA,IADoB;AAEpBT,EAAAA,UAFoB;AAGpBU,EAAAA,sBAHoB;AAIpBC,EAAAA,MAJoB;AAKpBC,EAAAA,aALoB;AAMpBX,EAAAA;AANoB,CAArB,EAOI;AACH,QAAMY,UAAU,GAAG,kCAAeJ,IAAf,CAAnB;AAEA,MAAIK,iBAAiB,GAAG,EAAxB;;AAEA,MAAKF,aAAL,EAAqB;AACpBE,IAAAA,iBAAiB,CAAE,gCAAF,CAAjB,GAAwD,MAAxD;AACA;;AAED,MAAK,CAAED,UAAP,EAAoB;AACnB,QAAKb,UAAL,EAAkB;AACjBc,MAAAA,iBAAiB,GAAG,EAAE,GAAGd,UAAL;AAAiB,WAAGc;AAApB,OAApB;AACA;;AAED,WAAO;AACNL,MAAAA,IADM;AAENT,MAAAA,UAAU,EAAED,mBAAmB,CAC9Be,iBAD8B,EAE9Bb,cAF8B,CAFzB;AAMNU,MAAAA;AANM,KAAP;AAQA;;AAEDG,EAAAA,iBAAiB,GAAG,EAAE,GAAGJ,sBAAL;AAA6B,OAAGI;AAAhC,GAApB;;AAEA,OAAM,MAAMC,IAAZ,IAAoBf,UAApB,EAAiC;AAChC,UAAMG,GAAG,GAAGU,UAAU,CAACb,UAAX,GACTa,UAAU,CAACb,UAAX,CAAuBe,IAAvB,CADS,GAET,KAFH;;AAIA,QAAKZ,GAAL,EAAW;AACVW,MAAAA,iBAAiB,CAAEX,GAAF,CAAjB,GAA2BH,UAAU,CAAEe,IAAF,CAArC;AACA,KAFD,MAEO;AACND,MAAAA,iBAAiB,CAAEC,IAAF,CAAjB,GAA4Bf,UAAU,CAAEe,IAAF,CAAtC;AACA;AACD;;AAED,MAAKF,UAAU,CAACG,SAAhB,EAA4B;AAC3B,QAAKF,iBAAiB,CAACG,KAAvB,EAA+B;AAC9BH,MAAAA,iBAAiB,CAACG,KAAlB,GAA2B,GAAGJ,UAAU,CAACG,SAAW,IAAIF,iBAAiB,CAACG,KAAO,EAAjF;AACA,KAFD,MAEO;AACNH,MAAAA,iBAAiB,CAACG,KAAlB,GAA0BJ,UAAU,CAACG,SAArC;AACA;AACD;;AAED,SAAO;AACNP,IAAAA,IAAI,EAAEI,UAAU,CAACK,OADX;AAENP,IAAAA,MAAM,EAAEE,UAAU,CAACF,MAFb;AAGNX,IAAAA,UAAU,EAAED,mBAAmB,CAAEe,iBAAF,EAAqBb,cAArB;AAHzB,GAAP;AAKA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkB,YAAT,CAAuBC,CAAvB,EAA0BC,CAA1B,EAA6BC,KAA7B,EAAqC;AACpC,KAAG;AACF,QAAKF,CAAC,CAAEE,KAAF,CAAD,KAAeD,CAAC,CAAEC,KAAF,CAArB,EAAiC;AAChC,aAAO,KAAP;AACA;AACD,GAJD,QAIUA,KAAK,EAJf;;AAMA,SAAO,IAAP;AACA;;AAEM,SAASC,MAAT,CAAiB;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA,YAFuB;AAGvBC,EAAAA,kBAHuB;AAIvBC,EAAAA,WAJuB;AAKvBC,EAAAA,MALuB;AAMvBC,EAAAA,YANuB;AAOvBC,EAAAA,SAPuB;AAQvBC,EAAAA,MARuB;AASvBC,EAAAA,OATuB;AAUvBC,EAAAA,MAVuB;AAWvBC,EAAAA,UAXuB;AAYvBC,EAAAA,YAZuB;AAavBC,EAAAA,UAbuB;AAcvBnC,EAAAA,cAduB;AAevBoC,EAAAA;AAfuB,CAAjB,EAgBH;AACH,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA,IAAzB;AAA+BC,IAAAA,KAA/B;AAAsCC,IAAAA;AAAtC,MAA8ClB,KAApD;AACA,QAAMmB,aAAa,GAAGL,OAAO,CAAC/B,MAAR,GAAiB,CAAvC;AACA,QAAMqC,IAAI,GAAGjB,WAAW,EAAxB;AACA,QAAMkB,eAAe,GAAG;AAAEpC,IAAAA,IAAI,EAAEgB;AAAR,GAAxB;AACA,QAAMqB,aAAa,GAAG,wCAAkBtB,KAAlB,CAAtB;AACA,QAAMuB,mBAAmB,GAAGD,aAAa,CAAEA,aAAa,CAACvC,MAAd,GAAuB,CAAzB,CAAzC;AAEA,MAAIyC,oBAAJ;AACA,MAAIC,oBAAJ;AACA,MAAIC,aAAJ,CAVG,CAYH;;AACA,MAAKzB,YAAL,EAAoB;AACnBG,IAAAA,MAAM,CAAEA,MAAM,CAAEgB,IAAF,EAAQ;AAAEnC,MAAAA,IAAI,EAAEgB;AAAR,KAAR,CAAR,EAA0C,EAA1C,CAAN;AACAwB,IAAAA,oBAAoB,GAAGD,oBAAoB,GAAG,CAAEH,eAAF,CAA9C;AACA,GAHD,MAGO;AACNjB,IAAAA,MAAM,CAAEgB,IAAF,EAAQ,EAAR,CAAN;AACA;;AAED,OAAM,IAAIO,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGR,aAArB,EAAoCQ,CAAC,EAArC,EAA0C;AACzC,UAAMC,SAAS,GAAGZ,IAAI,CAACa,MAAL,CAAaF,CAAb,CAAlB;AACA,UAAMG,mBAAmB,GACxBrD,cAAc,MACd;AACE,KAAEiD,aAAF,IACDA,aAAa,KAAKK,iCADjB,IAED;AACA;AACAL,IAAAA,aAAa,KAAK,IANL,CADf;AASA,QAAIM,gBAAgB,GAAGlB,OAAO,CAAEa,CAAF,CAA9B,CAXyC,CAazC;;AACA,QAAK1B,YAAL,EAAoB;AACnB,UAAK2B,SAAS,KAAKG,iCAAnB,EAAoC;AACnCC,QAAAA,gBAAgB,GAAGR,oBAAoB,GAAG,CACzCT,YAAY,CAAEY,CAAF,CAAZ,IAAqB,EADoB,EAExCM,MAFwC,CAGzC,CAAEC,WAAF,EAAeC,MAAf,KAA2B;AAC1BD,UAAAA,WAAW,CAACE,IAAZ,CAAkBD,MAAlB,EAA0Bd,eAA1B;AACA,iBAAOa,WAAP;AACA,SANwC,EAOzC,CAAEb,eAAF,CAPyC,CAA1C;AASA,OAVD,MAUO;AACNW,QAAAA,gBAAgB,GAAG,CAClB,GAAGR,oBADe,EAElB,IAAKQ,gBAAgB,IAAI,EAAzB,CAFkB,CAAnB;AAIA;AACD;;AAED,QAAIK,OAAO,GAAGhC,YAAY,CAAEe,IAAF,CAA1B;;AAEA,QAAKU,mBAAmB,IAAIF,SAAS,KAAKG,iCAA1C,EAA2D;AAC1D,UAAIO,IAAI,GAAGD,OAAX;;AAEA,aAAQ,CAAE9B,MAAM,CAAE+B,IAAF,CAAhB,EAA2B;AAC1BA,QAAAA,IAAI,GAAGjC,YAAY,CAAEiC,IAAF,CAAnB;AACA;;AAEDlC,MAAAA,MAAM,CAAEE,SAAS,CAAEgC,IAAF,CAAX,EAAqBC,yBAArB,CAAN;AACA,KA3CwC,CA6CzC;;;AACA,QAAKb,aAAa,KAAKK,iCAAvB,EAAwC;AACvC,UAAIO,IAAI,GAAGD,OAAX;;AAEA,aAAQ,CAAE9B,MAAM,CAAE+B,IAAF,CAAhB,EAA2B;AAC1BA,QAAAA,IAAI,GAAGjC,YAAY,CAAEiC,IAAF,CAAnB;AACA;;AAED,UAAK3B,YAAY,IAAIM,KAAK,KAAKU,CAA/B,EAAmC;AAClChB,QAAAA,YAAY,CAAES,IAAF,EAAQkB,IAAR,CAAZ;AACA;;AAED,UAAK1B,UAAU,IAAIM,GAAG,KAAKS,CAA3B,EAA+B;AAC9Bf,QAAAA,UAAU,CAAEQ,IAAF,EAAQkB,IAAR,CAAV;AACA;AACD;;AAED,QAAKN,gBAAL,EAAwB;AACvBA,MAAAA,gBAAgB,CAACQ,OAAjB,CAA0B,CAAEL,MAAF,EAAUM,WAAV,KAA2B;AACpD,YACCJ,OAAO,IACPZ,oBADA,IAEA;AACA9B,QAAAA,YAAY,CACXqC,gBADW,EAEXP,oBAFW,EAGXgB,WAHW,CAHZ,MAQA;AACA;AACEb,QAAAA,SAAS,KAAKG,iCAAd,IACDC,gBAAgB,CAACjD,MAAjB,GAA0B,CAA1B,KAAgC0D,WAXjC,CADD,EAaE;AACDJ,UAAAA,OAAO,GAAGhC,YAAY,CAAEgC,OAAF,CAAtB;AACA;AACA;;AAED,cAAM;AAAEpD,UAAAA,IAAF;AAAQT,UAAAA,UAAR;AAAoBU,UAAAA;AAApB,YAA+CiD,MAArD;AAEA,cAAM/C,aAAa,GAClBX,cAAc,IACdmD,SAAS,KAAKG,iCADd,IAEAI,MAAM,KAAKZ,mBAHZ;AAKA,cAAMmB,MAAM,GAAGpC,SAAS,CAAE+B,OAAF,CAAxB;AACA,cAAMM,OAAO,GAAGvC,MAAM,CACrBsC,MADqB,EAErB1D,UAAU,CAAE;AACXC,UAAAA,IADW;AAEXT,UAAAA,UAFW;AAGXU,UAAAA,sBAHW;AAIXE,UAAAA,aAJW;AAKXX,UAAAA;AALW,SAAF,CAFW,CAAtB;;AAWA,YAAK8B,MAAM,CAAE8B,OAAF,CAAN,IAAqB7B,OAAO,CAAE6B,OAAF,CAAP,CAAmBtD,MAAnB,KAA8B,CAAxD,EAA4D;AAC3D0B,UAAAA,MAAM,CAAE4B,OAAF,CAAN;AACA;;AAEDA,QAAAA,OAAO,GAAGjC,MAAM,CAAEuC,OAAF,EAAW,EAAX,CAAhB;AACA,OA3CD;AA4CA,KA3GwC,CA6GzC;;;AACA,QAAKf,SAAS,KAAKG,iCAAnB,EAAoC;AACnCN,MAAAA,oBAAoB,GAAGO,gBAAvB;AACAN,MAAAA,aAAa,GAAGE,SAAhB;AACA;AACA,KAlHwC,CAoHzC;;;AACA,QAAKD,CAAC,KAAK,CAAX,EAAe;AACd,UAAKhB,YAAY,IAAIM,KAAK,KAAK,CAA/B,EAAmC;AAClCN,QAAAA,YAAY,CAAES,IAAF,EAAQiB,OAAR,CAAZ;AACA;;AAED,UAAKzB,UAAU,IAAIM,GAAG,KAAK,CAA3B,EAA+B;AAC9BN,QAAAA,UAAU,CAAEQ,IAAF,EAAQiB,OAAR,CAAV;AACA;AACD;;AAED,QAAKT,SAAS,KAAKgB,+CAAnB,EAAkD;AACjD,UAAK,CAAEnE,cAAF,IAAoBsC,YAAY,CAAEY,CAAF,CAAZ,CAAkB1C,IAAlB,KAA2B,QAApD,EAA+D;AAC9DoD,QAAAA,OAAO,GAAGjC,MAAM,CACfE,SAAS,CAAE+B,OAAF,CADM,EAEfrD,UAAU,CAAE;AACXC,UAAAA,IAAI,EAAE,QADK;AAEXR,UAAAA;AAFW,SAAF,CAFK,CAAhB;AAOA2B,QAAAA,MAAM,CAAEiC,OAAF,EAAW;AAChBQ,UAAAA,IAAI,EAAEC,kBAAkB,CACvB/B,YAAY,CAAEY,CAAF,CAAZ,CAAkBnD,UAAlB,CAA8B,uBAA9B,CADuB;AADR,SAAX,CAAN;AAKA,OAbD,MAaO;AACN6D,QAAAA,OAAO,GAAGjC,MAAM,CACfE,SAAS,CAAE+B,OAAF,CADM,EAEfrD,UAAU,CAAE,EACX,GAAG+B,YAAY,CAAEY,CAAF,CADJ;AAEXxC,UAAAA,MAAM,EAAE,IAFG;AAGXV,UAAAA;AAHW,SAAF,CAFK,CAAhB;AAQA,OAvBgD,CAwBjD;;;AACA4D,MAAAA,OAAO,GAAGjC,MAAM,CAAEE,SAAS,CAAE+B,OAAF,CAAX,EAAwB,EAAxB,CAAhB;AACA,KA1BD,MA0BO,IAAK,CAAEnC,kBAAF,IAAwB0B,SAAS,KAAK,IAA3C,EAAkD;AACxDS,MAAAA,OAAO,GAAGjC,MAAM,CAAEE,SAAS,CAAE+B,OAAF,CAAX,EAAwB;AACvCpD,QAAAA,IAAI,EAAE,IADiC;AAEvCT,QAAAA,UAAU,EAAEC,cAAc,GACvB;AACA,uCAA6B;AAD7B,SADuB,GAIvBsE,SANoC;AAOvC5D,QAAAA,MAAM,EAAE;AAP+B,OAAxB,CAAhB,CADwD,CAUxD;;AACAkD,MAAAA,OAAO,GAAGjC,MAAM,CAAEE,SAAS,CAAE+B,OAAF,CAAX,EAAwB,EAAxB,CAAhB;AACA,KAZM,MAYA,IAAK,CAAE9B,MAAM,CAAE8B,OAAF,CAAb,EAA2B;AACjCA,MAAAA,OAAO,GAAGjC,MAAM,CAAEE,SAAS,CAAE+B,OAAF,CAAX,EAAwBT,SAAxB,CAAhB;AACA,KAFM,MAEA;AACNlB,MAAAA,UAAU,CAAE2B,OAAF,EAAWT,SAAX,CAAV;AACA;;AAED,QAAKjB,YAAY,IAAIM,KAAK,KAAKU,CAAC,GAAG,CAAnC,EAAuC;AACtChB,MAAAA,YAAY,CAAES,IAAF,EAAQiB,OAAR,CAAZ;AACA;;AAED,QAAKzB,UAAU,IAAIM,GAAG,KAAKS,CAAC,GAAG,CAA/B,EAAmC;AAClCf,MAAAA,UAAU,CAAEQ,IAAF,EAAQiB,OAAR,CAAV;AACA;;AAED,QAAKP,mBAAmB,IAAIH,CAAC,KAAKX,IAAI,CAACjC,MAAvC,EAAgD;AAC/CqB,MAAAA,MAAM,CAAEE,SAAS,CAAE+B,OAAF,CAAX,EAAwBE,yBAAxB,CAAN;;AAEA,UAAK1B,WAAW,IAAIG,IAAI,CAACjC,MAAL,KAAgB,CAApC,EAAwC;AACvCqB,QAAAA,MAAM,CAAEE,SAAS,CAAE+B,OAAF,CAAX,EAAwB;AAC7BpD,UAAAA,IAAI,EAAE,MADuB;AAE7BT,UAAAA,UAAU,EAAE;AACX,0CAA8BqC,WADnB;AAEX;AACA;AACA;AACAmC,YAAAA,eAAe,EAAE,OALN;AAMXC,YAAAA,KAAK,EACJ;AAPU;AAFiB,SAAxB,CAAN;AAYA;AACD;;AAEDxB,IAAAA,oBAAoB,GAAGO,gBAAvB;AACAN,IAAAA,aAAa,GAAGE,SAAhB;AACA;;AAED,SAAOR,IAAP;AACA","sourcesContent":["/**\n * Internal dependencies\n */\n\nimport { getActiveFormats } from './get-active-formats';\nimport { getFormatType } from './get-format-type';\nimport {\n\tLINE_SEPARATOR,\n\tOBJECT_REPLACEMENT_CHARACTER,\n\tZWNBSP,\n} from './special-characters';\n\nfunction restoreOnAttributes( attributes, isEditableTree ) {\n\tif ( isEditableTree ) {\n\t\treturn attributes;\n\t}\n\n\tconst newAttributes = {};\n\n\tfor ( const key in attributes ) {\n\t\tlet newKey = key;\n\t\tif ( key.startsWith( 'data-disable-rich-text-' ) ) {\n\t\t\tnewKey = key.slice( 'data-disable-rich-text-'.length );\n\t\t}\n\n\t\tnewAttributes[ newKey ] = attributes[ key ];\n\t}\n\n\treturn newAttributes;\n}\n\n/**\n * Converts a format object to information that can be used to create an element\n * from (type, attributes and object).\n *\n * @param {Object}  $1                        Named parameters.\n * @param {string}  $1.type                   The format type.\n * @param {Object}  $1.attributes             The format attributes.\n * @param {Object}  $1.unregisteredAttributes The unregistered format\n *                                            attributes.\n * @param {boolean} $1.object                 Whether or not it is an object\n *                                            format.\n * @param {boolean} $1.boundaryClass          Whether or not to apply a boundary\n *                                            class.\n * @param {boolean} $1.isEditableTree\n *\n * @return {Object} Information to be used for element creation.\n */\nfunction fromFormat( {\n\ttype,\n\tattributes,\n\tunregisteredAttributes,\n\tobject,\n\tboundaryClass,\n\tisEditableTree,\n} ) {\n\tconst formatType = getFormatType( type );\n\n\tlet elementAttributes = {};\n\n\tif ( boundaryClass ) {\n\t\telementAttributes[ 'data-rich-text-format-boundary' ] = 'true';\n\t}\n\n\tif ( ! formatType ) {\n\t\tif ( attributes ) {\n\t\t\telementAttributes = { ...attributes, ...elementAttributes };\n\t\t}\n\n\t\treturn {\n\t\t\ttype,\n\t\t\tattributes: restoreOnAttributes(\n\t\t\t\telementAttributes,\n\t\t\t\tisEditableTree\n\t\t\t),\n\t\t\tobject,\n\t\t};\n\t}\n\n\telementAttributes = { ...unregisteredAttributes, ...elementAttributes };\n\n\tfor ( const name in attributes ) {\n\t\tconst key = formatType.attributes\n\t\t\t? formatType.attributes[ name ]\n\t\t\t: false;\n\n\t\tif ( key ) {\n\t\t\telementAttributes[ key ] = attributes[ name ];\n\t\t} else {\n\t\t\telementAttributes[ name ] = attributes[ name ];\n\t\t}\n\t}\n\n\tif ( formatType.className ) {\n\t\tif ( elementAttributes.class ) {\n\t\t\telementAttributes.class = `${ formatType.className } ${ elementAttributes.class }`;\n\t\t} else {\n\t\t\telementAttributes.class = formatType.className;\n\t\t}\n\t}\n\n\treturn {\n\t\ttype: formatType.tagName,\n\t\tobject: formatType.object,\n\t\tattributes: restoreOnAttributes( elementAttributes, isEditableTree ),\n\t};\n}\n\n/**\n * Checks if both arrays of formats up until a certain index are equal.\n *\n * @param {Array}  a     Array of formats to compare.\n * @param {Array}  b     Array of formats to compare.\n * @param {number} index Index to check until.\n */\nfunction isEqualUntil( a, b, index ) {\n\tdo {\n\t\tif ( a[ index ] !== b[ index ] ) {\n\t\t\treturn false;\n\t\t}\n\t} while ( index-- );\n\n\treturn true;\n}\n\nexport function toTree( {\n\tvalue,\n\tmultilineTag,\n\tpreserveWhiteSpace,\n\tcreateEmpty,\n\tappend,\n\tgetLastChild,\n\tgetParent,\n\tisText,\n\tgetText,\n\tremove,\n\tappendText,\n\tonStartIndex,\n\tonEndIndex,\n\tisEditableTree,\n\tplaceholder,\n} ) {\n\tconst { formats, replacements, text, start, end } = value;\n\tconst formatsLength = formats.length + 1;\n\tconst tree = createEmpty();\n\tconst multilineFormat = { type: multilineTag };\n\tconst activeFormats = getActiveFormats( value );\n\tconst deepestActiveFormat = activeFormats[ activeFormats.length - 1 ];\n\n\tlet lastSeparatorFormats;\n\tlet lastCharacterFormats;\n\tlet lastCharacter;\n\n\t// If we're building a multiline tree, start off with a multiline element.\n\tif ( multilineTag ) {\n\t\tappend( append( tree, { type: multilineTag } ), '' );\n\t\tlastCharacterFormats = lastSeparatorFormats = [ multilineFormat ];\n\t} else {\n\t\tappend( tree, '' );\n\t}\n\n\tfor ( let i = 0; i < formatsLength; i++ ) {\n\t\tconst character = text.charAt( i );\n\t\tconst shouldInsertPadding =\n\t\t\tisEditableTree &&\n\t\t\t// Pad the line if the line is empty.\n\t\t\t( ! lastCharacter ||\n\t\t\t\tlastCharacter === LINE_SEPARATOR ||\n\t\t\t\t// Pad the line if the previous character is a line break, otherwise\n\t\t\t\t// the line break won't be visible.\n\t\t\t\tlastCharacter === '\\n' );\n\n\t\tlet characterFormats = formats[ i ];\n\n\t\t// Set multiline tags in queue for building the tree.\n\t\tif ( multilineTag ) {\n\t\t\tif ( character === LINE_SEPARATOR ) {\n\t\t\t\tcharacterFormats = lastSeparatorFormats = (\n\t\t\t\t\treplacements[ i ] || []\n\t\t\t\t).reduce(\n\t\t\t\t\t( accumulator, format ) => {\n\t\t\t\t\t\taccumulator.push( format, multilineFormat );\n\t\t\t\t\t\treturn accumulator;\n\t\t\t\t\t},\n\t\t\t\t\t[ multilineFormat ]\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tcharacterFormats = [\n\t\t\t\t\t...lastSeparatorFormats,\n\t\t\t\t\t...( characterFormats || [] ),\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\n\t\tlet pointer = getLastChild( tree );\n\n\t\tif ( shouldInsertPadding && character === LINE_SEPARATOR ) {\n\t\t\tlet node = pointer;\n\n\t\t\twhile ( ! isText( node ) ) {\n\t\t\t\tnode = getLastChild( node );\n\t\t\t}\n\n\t\t\tappend( getParent( node ), ZWNBSP );\n\t\t}\n\n\t\t// Set selection for the start of line.\n\t\tif ( lastCharacter === LINE_SEPARATOR ) {\n\t\t\tlet node = pointer;\n\n\t\t\twhile ( ! isText( node ) ) {\n\t\t\t\tnode = getLastChild( node );\n\t\t\t}\n\n\t\t\tif ( onStartIndex && start === i ) {\n\t\t\t\tonStartIndex( tree, node );\n\t\t\t}\n\n\t\t\tif ( onEndIndex && end === i ) {\n\t\t\t\tonEndIndex( tree, node );\n\t\t\t}\n\t\t}\n\n\t\tif ( characterFormats ) {\n\t\t\tcharacterFormats.forEach( ( format, formatIndex ) => {\n\t\t\t\tif (\n\t\t\t\t\tpointer &&\n\t\t\t\t\tlastCharacterFormats &&\n\t\t\t\t\t// Reuse the last element if all formats remain the same.\n\t\t\t\t\tisEqualUntil(\n\t\t\t\t\t\tcharacterFormats,\n\t\t\t\t\t\tlastCharacterFormats,\n\t\t\t\t\t\tformatIndex\n\t\t\t\t\t) &&\n\t\t\t\t\t// Do not reuse the last element if the character is a\n\t\t\t\t\t// line separator.\n\t\t\t\t\t( character !== LINE_SEPARATOR ||\n\t\t\t\t\t\tcharacterFormats.length - 1 !== formatIndex )\n\t\t\t\t) {\n\t\t\t\t\tpointer = getLastChild( pointer );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { type, attributes, unregisteredAttributes } = format;\n\n\t\t\t\tconst boundaryClass =\n\t\t\t\t\tisEditableTree &&\n\t\t\t\t\tcharacter !== LINE_SEPARATOR &&\n\t\t\t\t\tformat === deepestActiveFormat;\n\n\t\t\t\tconst parent = getParent( pointer );\n\t\t\t\tconst newNode = append(\n\t\t\t\t\tparent,\n\t\t\t\t\tfromFormat( {\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tattributes,\n\t\t\t\t\t\tunregisteredAttributes,\n\t\t\t\t\t\tboundaryClass,\n\t\t\t\t\t\tisEditableTree,\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tif ( isText( pointer ) && getText( pointer ).length === 0 ) {\n\t\t\t\t\tremove( pointer );\n\t\t\t\t}\n\n\t\t\t\tpointer = append( newNode, '' );\n\t\t\t} );\n\t\t}\n\n\t\t// No need for further processing if the character is a line separator.\n\t\tif ( character === LINE_SEPARATOR ) {\n\t\t\tlastCharacterFormats = characterFormats;\n\t\t\tlastCharacter = character;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// If there is selection at 0, handle it before characters are inserted.\n\t\tif ( i === 0 ) {\n\t\t\tif ( onStartIndex && start === 0 ) {\n\t\t\t\tonStartIndex( tree, pointer );\n\t\t\t}\n\n\t\t\tif ( onEndIndex && end === 0 ) {\n\t\t\t\tonEndIndex( tree, pointer );\n\t\t\t}\n\t\t}\n\n\t\tif ( character === OBJECT_REPLACEMENT_CHARACTER ) {\n\t\t\tif ( ! isEditableTree && replacements[ i ].type === 'script' ) {\n\t\t\t\tpointer = append(\n\t\t\t\t\tgetParent( pointer ),\n\t\t\t\t\tfromFormat( {\n\t\t\t\t\t\ttype: 'script',\n\t\t\t\t\t\tisEditableTree,\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t\tappend( pointer, {\n\t\t\t\t\thtml: decodeURIComponent(\n\t\t\t\t\t\treplacements[ i ].attributes[ 'data-rich-text-script' ]\n\t\t\t\t\t),\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tpointer = append(\n\t\t\t\t\tgetParent( pointer ),\n\t\t\t\t\tfromFormat( {\n\t\t\t\t\t\t...replacements[ i ],\n\t\t\t\t\t\tobject: true,\n\t\t\t\t\t\tisEditableTree,\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t}\n\t\t\t// Ensure pointer is text node.\n\t\t\tpointer = append( getParent( pointer ), '' );\n\t\t} else if ( ! preserveWhiteSpace && character === '\\n' ) {\n\t\t\tpointer = append( getParent( pointer ), {\n\t\t\t\ttype: 'br',\n\t\t\t\tattributes: isEditableTree\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t'data-rich-text-line-break': 'true',\n\t\t\t\t\t  }\n\t\t\t\t\t: undefined,\n\t\t\t\tobject: true,\n\t\t\t} );\n\t\t\t// Ensure pointer is text node.\n\t\t\tpointer = append( getParent( pointer ), '' );\n\t\t} else if ( ! isText( pointer ) ) {\n\t\t\tpointer = append( getParent( pointer ), character );\n\t\t} else {\n\t\t\tappendText( pointer, character );\n\t\t}\n\n\t\tif ( onStartIndex && start === i + 1 ) {\n\t\t\tonStartIndex( tree, pointer );\n\t\t}\n\n\t\tif ( onEndIndex && end === i + 1 ) {\n\t\t\tonEndIndex( tree, pointer );\n\t\t}\n\n\t\tif ( shouldInsertPadding && i === text.length ) {\n\t\t\tappend( getParent( pointer ), ZWNBSP );\n\n\t\t\tif ( placeholder && text.length === 0 ) {\n\t\t\t\tappend( getParent( pointer ), {\n\t\t\t\t\ttype: 'span',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\t'data-rich-text-placeholder': placeholder,\n\t\t\t\t\t\t// Necessary to prevent the placeholder from catching\n\t\t\t\t\t\t// selection. The placeholder is also not editable after\n\t\t\t\t\t\t// all.\n\t\t\t\t\t\tcontenteditable: 'false',\n\t\t\t\t\t\tstyle:\n\t\t\t\t\t\t\t'pointer-events:none;user-select:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;',\n\t\t\t\t\t},\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\tlastCharacterFormats = characterFormats;\n\t\tlastCharacter = character;\n\t}\n\n\treturn tree;\n}\n"]}